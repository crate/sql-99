{\rtf1\ansi\ansicpg1252\deff0\deflang4105\deflangfe4105{\fonttbl{\f0\fnil\fcharset0 Courier New;}{\f1\fmodern\fprq1\fcharset0 Courier New;}}
{\colortbl ;\red0\green0\blue255;}
{\*\generator Msftedit 5.41.21.2510;}\viewkind4\uc1\pard\nowidctlpar\lang9\kerning1\f0\fs21 SQL-99 Complete, Really\lang4105\par
\lang9 Copyright (c) 2005-2016 Trudy Pelzer & Peter Gulutzan.\lang4105\par
\lang9 All rights reserved.\lang4105\par
\par
\lang9 Redistribution and use in source and 'compiled' forms (PDF, PostScript, HTML, RTF, etc), with or without modification, are permitted provided that the following conditions are met:\lang4105\par
\par
\lang9 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer as the first lines of this file unmodified.\lang4105\par
\par
\lang9 2. Redistributions in compiled form (transformed to other DTDs, converted to PDF, PostScript, HTML, RTF, and other formats) must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\lang4105\par
\par
\lang9 3. The name of the author may not be used to endorse or promote products derived from this documentation without specific prior written permission.\lang4105\par
\par
\pard\lang9 THIS DOCUMENTATION IS PROVIDED BY THE AUTHOR "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS DOCUMENTATION, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\par
\lang4105\kerning0\f1\par
\page\par
APPENDIX A -- Remote Database Access\par
\par
Remote Database Access (RDA) is a standard for interfacing to databases via\par
some network. The standards for networks are usually bound up with a hierarchy\par
called the Open Systems Interconnect (OSI) layers, which look like this:\par
\par
LAYERS (from top to bottom) WHAT'S DEFINED\par
\par
---------------             the programs the end-users see\par
- Application -\par
---------------\par
\par
----------------            negotiating syntax of messages\par
- Presentation -\par
----------------\par
\par
----------------            naming, session establishment\par
- Session      -\par
----------------\par
\par
----------------            acknowledgments, sequence numbers, time-outs\par
- Transport    -\par
----------------\par
\par
----------------            routing through network addresses\par
- Network      -\par
----------------\par
\par
----------------            packet structure\par
- Datalink     -\par
----------------\par
\par
----------------            bit stream, transmission rate\par
- Physical     -\par
----------------\par
\par
Typically, a DBMS programmer worries about Application, the top layer. RDA is\par
a specification for the next lower layers -- Presentation and Session. In\par
other words: END USERS AND APPLICATION PROGRAMMERS HAVE NO DIRECT INTEREST IN\par
RDA BECAUSE IT CONCERNS LOW-LEVEL CODING. Typically, the DBMS vendor supplies\par
some mediating software which covers or obscures the network communication\par
job.\par
\par
All right: for most people, it's not vital to understand RDA in any detail.\par
What we think is useful is a short summary and tutorial. From this chapter,\par
you'll get an idea of:\par
      ## What RDA's job is.\par
      ## What sort of information goes back and forth on the network.\par
      ## What "client/server" actually means.\par
\par
ISO/IEC 9759\par
\par
The standard for RDA is ISO/IEC 9759 "Remote Database Access For SQL". This is\par
a completely different document from the standard SQL document (ISO/IEC 9075),\par
so it's not correct to say that RDA is part of the SQL standard. But it's a\par
related standard, and the respective committees work together closely.\par
\par
Much of the impetus for RDA came from an industry consortium known as the SQL\par
Access Group (SAG). In 1991 members of the SAG consortium produced the first\par
prototypes for version 1 of RDA. The latest edition is Version 3, which is\par
still unofficial at the time we're writing this. Version 3 is quite different\par
from the earlier versions. It operates very much like the SQL/CLI\par
specification, using similar or even the same names and parameters for most of\par
its functions. For example, the SQL/CLI function SQLExecDirect has an RDA\par
equivalent: RDAExecDirect. The parameters are similar (a handle and a string\par
with an SQL statement and a size word). The effect is similar (an SQL\par
statement is parsed and executed). The big difference, and the whole point of\par
RDA, is architecture: SQLExecDirect is a function which you call directly,\par
RDAExecDirect is a message which you pass to a "remote" entity.\par
\par
The nearby functions are the "client", the messages they send out are called\par
"requests". The remote entity is the "server", the messages that it sends back\par
are called "responses".\par
\par
TCP/IP\par
\par
In the early RDA versions, the main concern was to interface via OSI. The\par
latest version is quite specific: the main transport layer should be\par
Transaction Connect Protocol / Internet Protocol, or TCP/IP. Actually TCP/IP\par
is a family of protocols, made famous by the fact that The Internet runs on\par
TCP/IP.\par
\par
The TCP/IP protocol family is primarily responsible for the level "below" RDA\par
-- the Transport Layer. And, TCP/IP interfaces in its turn with the lower\par
levels. The OSI stack works like a bucket brigade: the top level sends buckets\par
down to the next level which passes to the next level and so on; meanwhile,\par
buckets are coming back the other way. Which buckets are empty or full,\par
depends on where the fire is at the moment.\par
\par
The RDA is what's between you (the application) and TCP/IP (the transport).\par
\par
The Client/Server Model\par
\par
The client sends requests to the server. The server sends responses to the\par
client.\par
\par
      client ----------requests------------->\par
             <---------responses-------------   server\par
\par
There are only eleven RDA requests. Each request designates a distinct\par
operation that the client wants the server to perform. Here's the list:\par
\par
Request                  What the client wants the server to perform\par
RDAConnect               Set up connection between client and server\par
RDADisconnect            Cancel the connection made with RDAConnect\par
RDAEndTran               COMMIT, ROLLBACK, or "prepare for COMMIT"\par
RDAClientAttribute       Note what client's resource attributes are\par
RDAStatementPrepare      Prepare an SQL statement\par
RDAStatementDeallocate   Unprepare, close Cursor, free statement resource\par
RDAStatementExecute      Execute a prepared SQL statement\par
RDAStatementExecDirect   Prepare and execute a SQL statement in one go\par
RDAStatementFetchRows    FETCH selected rows and send contents to client\par
RDAStatementCloseCursor  No more selected rows will be fetched, clean up\par
RDAStatementCancel       Cancel any of the "RDAStatement..." requests\par
\par
There is only one RDA response. A response designates the results of a\par
server's performance -- or attempted performance -- of a client request.\par
Here's the list:\par
\par
Response                 What client should do with the response\par
"RDAResponse"            Read diagnostics and/or fetched row values\par
\par
The eleven requests, and the response are described below. You may assume that\par
all the messages contain identifiers and handles which are necessary to\par
synchronize operations. We have omitted such "protocol" information in our\par
descriptions. We have included only the "parameter" information, which is\par
necessary to illustrate the essential point of each particular operation.\par
\par
RDAConnect\par
\par
Message Content:\par
  DestinationServerName character string       name of server\par
  UserName              character string       name of server\par
  Authentication        character string       name of server\par
\par
What the server is supposed to do:\par
Answer the phone! The client is sending enough information for the server to\par
set up a connection -- notice that the parameters here are the same as the\par
parameters used for the SQL/CLI "SQLConnect" function.\par
\par
The server will be responsible for a particular "cluster of Catalogs" -- which\par
we may think of as a "database". There's no standard way to pass a database\par
name with this call, so we can assume that the usual expectation is that\par
different databases will have different servers. In other words: by specifying\par
the server, you are indirectly specifying the database that should be opened.\par
\par
RDADisconnect\par
\par
Message Content:\par
  <nothing>\par
\par
What the server is supposed to do:\par
Hang up the phone! Cut off the connection that was made with RDAConnect.\par
\par
The disconnection will probably free the server so it can do other tasks, or\par
perhaps shut down. The connection could be important for the network too --\par
you're freeing up a line so that the network server can allow other users to\par
get on. But TCP/IP is stateless, so the concept of "freeing up a line" is less\par
meaningful than it would be with other network protocols (such as NETBIOS).\par
\par
RDAEndTran\par
\par
Message Content:\par
  CompletionType        32-bit INTEGER   flag: COMMIT OR ROLLBACK\par
\par
What the server is supposed to:\par
The RDAEndTran marks a transaction boundary, and the flag will usually\par
indicate COMMIT or ROLLBACK, so the usual job is simple: the server should end\par
a current transaction with COMMIT or with ROLLBACK.\par
\par
There is a reason that RDAEndTran is a distinct message -- that makes it\par
easier for the network to notice it, without having to know how to parse SQL\par
statements. The network might intercept RDAEndTran, because the job of\par
"committing" might affect more than just one server job.\par
\par
One other flag value that CompletionType may contain (besides COMMIT or\par
ROLLBACK) is: PREPARE TO COMMIT. As part of what we call the "two-phase\par
commit" process, the first step is to co-ordinate: get all the servers on the\par
network to acknowledge that they are all ready to commit. The second step is\par
the COMMIT itself. Two-phase commit is advanced stuff; many DBMSs will refuse\par
to support the PREPARE TO COMMIT operation.\par
\par
RDAClientAttribute\par
\par
Message Content:\par
  ClientAttributes         array           List of attributes\par
\par
What the server is supposed to do:\par
Take note of what attributes the client has. An "attribute" is an env or dbc\par
or stmt attribute. That is, it's a number or string that was earlier passed to\par
the client, via a SQLSetEnvAttr or SQLSetConnectAttr or SQLSetStmtAttr\par
function call.\par
\par
The client won't send a new RDAClientAttribute message every time its own\par
attributes change. That would result in too much network traffic. One of the\par
features of client/server architecture is: the server doesn't do everything.\par
The client is capable of storing data locally for a particular connection and\par
only passing on what's necessary when it's necessary.\par
\par
RDAStatementPrepare\par
\par
Message Content:\par
  StatementIdent                32-bit integer       sort of a handle\par
  StatementText                 character string     SQL preparable statement\par
\par
What the server is supposed to do:\par
Prepare an SQL statement. The client might be able to do some primitive syntax\par
checking, but for the full job of binding and parsing, the client has to pass\par
the SQL statement to the server. Only the server has direct access to the\par
database and its metadata.\par
\par
If we were calling SQLPrepare, we'd pass a "hstmt" (handle of a stmt). But a\par
handle is a local identifier. There's no guarantee that a handle value will be\par
unique over the whole network. Therefore, instead of a hstmt, the client must\par
pass a StatementIdent. This is a handle of a handle. Given a StatementIdent,\par
the client and server can each look up what their respective hstmt values are\par
for the same stmt.\par
\par
RDAStatementDeallocate\par
\par
Message Content:\par
  StatementIdent          32-bit integer     sort of a handle\par
\par
What the server is supposed to do:\par
Free a stmt. Compare the SQL/CLI function SQLFreeHandle(SQL_HANDLE_STMT,...).\par
\par
With client-server, any statement resource (stmt) will be duplicated in two\par
places: the client and the server. When the client is done with a stmt, it\par
should send an RDAStatementDeallocate message to the server, so that the\par
duplicate will be destroyed too.\par
\par
RDAStatementExecute\par
\par
Message Content:\par
  StatementIdent                32-bit integer       sort of a handle\par
  ParameterDescriptor           <array>              info re "host variable"\par
  ParameterData                 <array>              "host variable" content\par
\par
What the server is supposed to do:\par
Execute an SQL statement. Presumably the statement was prepared earlier, due\par
to an RDAStatementPrepare message with the same StatementIdent.\par
\par
The ParameterDescriptor and ParameterData fields -- which weren't necessary\par
for SQLPrepare -- represent the solution to a rather tough question: what\par
should be done with input parameters? There are no direct RDA equivalents for\par
the SQL/CLI functions that handle "parameter descriptors". They'd be useless\par
anyway, because SQL/CLI parameter descriptors require pointers and pointers\par
have no meaning to a job on a different machine. So what happens is: the\par
client bundles up all the input parameter values, and sends them as part of\par
the message.\par
\par
This might mean that requests get monstrous. But RDA's designers thought it\par
would be a bad idea to split RDAStatementExecute into multiple separate\par
messages. What if the messages didn't all arrive in the right order?\par
\par
RDAStatementExecDirect\par
\par
Message Content:\par
  StatementIdent                32-bit integer       sort of a handle\par
  StatementText                 character string     SQL preparable statement\par
  ParameterDescriptor           <array>              info re "host variable"\par
  ParameterData                 <array>              "host variable" content\par
\par
What the Server is supposed to do:\par
Prepare what's in StatementText, then execute it (using the input parameters\par
if there are any).\par
\par
RDAStatementExecDirect is logically redundant: we could accomplish the same\par
thing by sending RDAStatementPrepare followed by RDAStatementExecute. Such\par
redundancy is occasionally justifiable because it's more efficient to send one\par
message instead of two. Network traffic is expensive.\par
\par
RDAStatementFetchRows\par
\par
Message Content:\par
  StatementIdent               32-bit integer   sort of a handle\par
  FetchOrientation             32-bit integer   "next", "first", etc.\par
  FetchOffset                  32-bit integer   start, relative to last fetch\par
  FetchCount                   32-bit integer   how many rows to fetch\par
\par
What the server is supposed to do:\par
Get the values in each of the indicated rows, and ship them to the client.\par
Presumably there was an early RDAStatementExecute or RDAStatementExecDirect\par
message for this StatementIdent, which caused a query to be executed. So the\par
server has a result set that it can fetch the rows from.\par
\par
The FetchOrientation and FetchOffset parameters contain values equivalent to\par
those which are used by the SQL/CLI function SQLFetchScroll. For example,\par
FetchOrientation might equal SQL_FETCH_ABSOLUTE and FetchOffset might equal\par
55.\par
\par
In standard SQL, it's only possible to fetch one row at a time. With RDA --\par
and once again this can be explained by "efficiency" -- it's possible to ask\par
for multiple rows to be fetched at once. That's what the FetchCount parameter\par
is for.\par
\par
RDAStatementCloseCursor\par
\par
Message Content:\par
  StatementIdent               32-bit integer   sort of a handle\par
\par
What the server is supposed to do:\par
Well, close the Cursor. This isn't an end-of-transaction signal, but it does\par
tell the server that it can forget about a result set that it created with a\par
recent SELECT statement.\par
\par
The client could pass messages in this sequence: (a) RDAStatementExecDirect\par
with a SELECT statement so that the server creates a result set and Cursor,\par
(b) RDAStatementFetchRows so that the server will fetch row values and send\par
them to the client and (c) RDAStatementCloseCursor so that the server will\par
free (and possibly unlock) resources that were allocated for Cursor\par
maintenance.\par
\par
RDAStatementCancel\par
\par
Message Content:\par
  StatementIdent               32-bit integer  sort of a handle\par
\par
What the server is supposed to do:\par
Abort any activity that is taking place for the statement identified by\par
StatementIdent. Since statement execution is atomic, the statement won't be\par
half-done -- the result is as if the statement was never executed at all.\par
\par
Why would the client send the statement in the first place, if it didn't want\par
to finish it? The usual answer is that the client can "change its mind",\par
perhaps because the execution is taking too long or because some new\par
information has arrived (such as a Shutdown message from Windows). Or,\par
consider this scenario:\par
      ## There are two servers. Each server is responsible for a copy of the\par
same database.\par
      ## The client sends an RDAExecDirect message to both servers, with the\par
same query.\par
      ## Inevitably, one of the servers will respond more quickly than the\par
other. Perhaps it's less busy, or perhaps its message packets are just moving\par
by a shorter route. \par
      ## Once the client receives the response from the fast server, it sends\par
an RDAStatementCancel message to the slow one, meaning "oh forget it -- I\par
already have the data".\par
\par
The Server's Response: RDAResponse\par
\par
Message Content:\par
  ServerAttributes            <array>   server's env/dbc/stmt attributes\par
  Diagnostics                 <array>   errors or warnings\par
  ParameterDescriptor         <array>   IPD, for RDAStatementPrepare\par
  RowDescriptor               <array>   metadata, for RDAStatementFetchRows\par
  Rows                        <array>   data, for RDAStatementFetchRows\par
\par
The server sends one response message to the client for every request message\par
that it receives from the client. The contents of responses can vary quite a\par
bit, but usually you know what sort of responses to expect, by observing what\par
the original request was. For example, if the request was an\par
RDAStatementFetchRows message, a reasonable hope is that the response will\par
contain data from the rows that got fetched.\par
\par
A single response contains the entire set of results. This means that the\par
contents of a response are useful for one or many operations that get\par
performed by the client alone: "get diagnostics", "get attributes" or "get\par
data". For example, the SQL/CLI function SQLGetDiagRec does not involve a\par
network message containing RDAGetDiagRec -- there is no such thing. Instead,\par
when an application calls the SQLGetDiagRec function, the DBMS looks in the\par
Diagnostics section of the last response that was received from the server.\par
This means that SQLGetDiagRec can be called millions of times without\par
affecting the network or the server. And the same goes for the other "get"\par
functions. This also means that the client has to buffer all responses, but\par
that's okay -- local storage is cheap.\par
\par
A Short Session\par
\par
Let's walk through a short client/server session which involves a single\par
query. We show client action on the left, server action on the right.\par
\par
CLIENT                                SERVER\par
\par
... Client is receiving input from    ... Server is idle, just waiting for\par
a user via a dialog box               incoming messages\par
\par
Client sends RDAConnect message   -->\par
\par
                                  <-- Server sends response, diagnostic="OK"\par
\par
Client sends                      -->\par
RDAStatementExecDirect,\par
"SELECT * FROM Employees;" message\par
\par
                                  <-- Server sends response, diagnostic="OK"\par
\par
Client sends                      -->\par
RDAStatementFetchRows message\par
\par
                                  <-- Server sends response, diagnostic="OK"\par
                                      and 2 rows: \{ ('A',1) ('B',2) \}\par
\par
Client sends                      -->\par
RDAStatementCloseCursor message\par
\par
                                  <-- Server sends response, diagnostic="OK"\par
\par
Client sends                      -->\par
RDAEndTran message\par
\par
                                  <-- Server sends response, diagnostic="OK"\par
\par
Client sends                      -->\par
RDADisconnect message\par
\par
                                  <-- Server sends response, diagnostic="OK"\par
\par
The network session is over, but      Server is idle again ...  \par
the client can continue: "FETCH"\par
the first row, "FETCH" the second \par
row (from local buffers)...\par
\par
Making it hard\par
\par
In our initial tour of RDA, we skipped some non-essential points. We note them\par
now so that you'll at least be aware of the existence of anything that is\par
potentially significant.\par
\par
[1] Clients can send multiple requests without waiting for responses. This\par
makes for hairy programming, because when responses eventually do arrive, they\par
might not be in the right order.\par
\par
[2] There might be multiple clients for one server, which leads to the various\par
special considerations that we mentioned in our chapter on concurrency. Or,\par
there might be several servers for one client.\par
\par
[3] The network can be heterogeneous, that is, you should be able to connect a\par
brand X client to a brand Y server. In theory.\par
\par
[4] There is an optional client-side feature: a standard defined CLI (the "RDA\par
API"). This is simply a wrapper, so that you can call a function which sends a\par
message, without worrying about the details of "how to send a message" over\par
TCP/IP.\par
\par
[5] There are optional Schemas which contain Tables which contain information\par
about available servers, logs of requests and so on. The Tables can be\par
accessed in the same way that Views can be accessed in INFORMATION_SCHEMA.\par
\par
What good is RDA?\par
\par
In theory, RDA would be a relatively painless way to transfer information via\par
TCP/IP or other OSI protocols. Programmers could write their own applications\par
or utilities, such as Intranet servers. But most SQL programmers would prefer\par
it if RDA was silently included in the DBMS. They want to call SQLExecDirect,\par
for instance. If the DBMS does the job by silently sending RDAExecDirect\par
messages to some server, fine.\par
\par
So all a SQL programmer really needs to know is what you -- we hope! -- have\par
just gleaned from this discussion of RDA. You  should now be as competent as\par
you need to be. Specifically:\par
      ## You can appreciate database architecture now that you can visualize\par
what "clients" and "servers" do.\par
      ## You can write better SQL/CLI code since you know what some of the\par
underlying effects are.\par
      ## You can figure out whether direct use of RDA would help you around\par
some specific network problem.\par
\par
From those examples, it might seem that we're talking about "low-level code"\par
solutions -- an analogue would be the way that people sometimes write\par
assembler code snippets in their C programs. We're big fans of that technique\par
[[ footnote: see our book OPTIMIZING C WITH ASSEMBLY LANGUAGE, R&D Books ]].\par
But the analogy doesn't really hold: writing for RDA is not inherently more\par
arcane or low-level than writing any SQL/CLI code. That's clear when you\par
observe that the parameters are, in almost all cases, the same.\par
\page\par
APPENDIX B -- SQL Taxonomy\par
\par
For easy reference, this appendix gathers together all of our notes on what to\par
avoid if you want to restrict your code to Core SQL. It also includes the SQL\par
Taxonomy tables from the SQL Standard -- these list all of the features\par
required for full SQL3 support, noting those which are required for Core SQL\par
support.\par
\par
Core SQL Notes\par
\par
## If you want to restrict your code to Core SQL, don't use bracketed\par
comments.\par
\par
## If you want to restrict your code to Core SQL, make sure your <regular\par
identifier>s and your <delimited identifier>s are no more than 18 characters\par
long.\par
\par
## If you want to restrict your code to Core SQL, do not use either binary or\par
hexadecimal <bit string literal>s.\par
\par
## If you want to restrict your code to Core SQL, don't define any BIT or BIT\par
varying <data type>s.\par
\par
## If you want to restrict your code to Core SQL, don't use the concatenation\par
operator, SUBSTRING or POSITION with bit strings.\par
\par
## If you want to restrict your code to Core SQL, don't use BLOBs in\par
comparisons.\par
\par
## If you want to restrict your code to Core SQL, don't use the concatenation\par
operator, SUBSTRING or the [NOT LIKE] predicate with BLOBs.\par
\par
## If you want to restrict your code to Core SQL, don't add a Character set\par
specification to <character string literal>s, don't add a COLLATE clause to\par
<character string literal>s and don't split long <character string literal>s\par
into smaller strings.\par
\par
## If you want to restrict your code to Core SQL, don't use <national\par
character string literal>s.\par
\par
## If you want to restrict your code to Core SQL, don't use the CHARACTER SET\par
clause or the COLLATE clause for CHAR or VARCHAR or CLOB <data type>\par
specifications.\par
\par
## If you want to restrict your code to Core SQL, don't use the NCHAR or NCHAR\par
VARYING or NCLOB <data type>s.\par
\par
## If you want to restrict your code to Core SQL, don't use CLOBs or NCLOBs in\par
comparisons.\par
\par
## If you want to restrict your code to Core SQL, don't use the concatenation\par
operator with CLOBs or NCLOBs and don't use the COLLATE clause to force an\par
EXPLICIT Collation for any character string concatenation.\par
\par
## If you want to restrict your code to Core SQL, don't use SUBSTRING with\par
NCLOBs and don't use the COLLATE clause to force an EXPLICIT Collation for any\par
SUBSTRING operation.\par
\par
## If you want to restrict your code to Core SQL, don't use OVERLAY with\par
character strings.\par
\par
## If you want to restrict your code to Core SQL, don't use TRIM with NCLOBs\par
and don't use the COLLATE clause to force an EXPLICIT Collation for any TRIM\par
operation.\par
\par
## If you want to restrict your code to Core SQL, don't use the COLLATE clause\par
to force an EXPLICIT Collation for any UPPER or LOWER operation.\par
\par
## If you want to restrict your code to Core SQL, don't use TRANSLATE.\par
\par
## If you want to restrict your code to Core SQL, don't use CONVERT.\par
\par
## If you want to restrict your code to Core SQL, don't use the <regular\par
expression substring function> form of SUBSTRING.\par
\par
## If you want to restrict your code to Core SQL, don't use POSITION with\par
character strings.\par
\par
## If you want to restrict your code to Core SQL, don't use BIT_LENGTH,\par
CHAR_LENGTH or OCTET_LENGTH with NCLOBs.\par
\par
## If you want to restrict your code to Core SQL, don't use the [NOT] LIKE\par
predicate with CLOBs or NCLOBs and, when you do use [NOT LIKE], make sure your\par
"character_string_argument" is a <Column reference> and that your "pattern"\par
and your "escape_character" are both <value specification>s.\par
\par
## If you want to restrict your code to Core SQL, don't use the [NOT] SIMILAR\par
predicate.\par
\par
## If you want to restrict your code to Core SQL, don't explicitly define the\par
Character set that any character string belongs to -- always allow it to\par
belong to the default Character set.\par
\par
## If you want to restrict your code to Core SQL, don't use <time zone\par
interval>s.\par
\par
## If you want to restrict your code to Core SQL, don't add a fractional\par
seconds precision or a <time zone interval> to your time values.\par
\par
## If you want to restrict your code to Core SQL, don't add a fractional\par
seconds precision greater than 6 digits or a <time zone interval> to your\par
timestamp values.\par
\par
## If you want to restrict your code to Core SQL, don't define your TIME <data\par
type>s with a fractional seconds precision and don't add the optional noise\par
words WITHOUT TIME ZONE: use only TIME, never TIME(x) WITHOUT TIME ZONE.\par
\par
## If you want to restrict your code to Core SQL, don't use TIME WITH TIME\par
ZONE <data type>s.\par
\par
## If you want to restrict your code to Core SQL, don't define your TIMESTAMP\par
<data type>s with a fractional seconds precision other than 0 or 6 and don't\par
add the optional noise words WITHOUT TIME ZONE: use only TIMESTAMP,\par
TIMESTAMP(0) or TIMESTAMP(6), never TIMESTAMP(x) WITHOUT TIME ZONE.\par
\par
## If you want to restrict your code to Core SQL, don't use TIMESTAMP WITH\par
TIME ZONE <data type>s.\par
\par
## If you want to restrict your code to Core SQL, don't use <interval\par
literal>s.\par
\par
## If you want to restrict your code to Core SQL, don't use the INTERVAL <data\par
type>.\par
\par
## If you want to restrict your code to Core SQL, don't add or subtract\par
datetime expressions, don't add the optional AT LOCAL/AT TIME ZONE clause to\par
any time or timestamp value and don't use interval expressions at all.\par
\par
## If you want to restrict your code to Core SQL, don't use CURRENT_TIME or\par
CURRENT_TIMESTAMP, don't specify a fractional seconds precision for LOCALTIME\par
and don't specify a fractional seconds precision for LOCALTIMESTAMP other than\par
zero or 6.\par
\par
## If you want to restrict your code to Core SQL, don't use EXTRACT.\par
\par
## If you want to restrict your code to Core SQL, don't use ABS with an\par
interval argument.\par
\par
## If you want to restrict your code to Core SQL, don't use the OVERLAPS\par
predicate.\par
\par
## If you want to restrict your code to Core SQL, don't use <boolean\par
literal>s.\par
\par
## If you want to restrict your code to Core SQL, don't define any BOOLEAN\par
<data type>s.\par
\par
## If you want to restrict your code to Core SQL, don't use the optional truth\par
value Boolean test (i.e.: don't use the constructs "boolean_argument" IS TRUE,\par
"boolean_argument" IS FALSE or "boolean_argument" IS UNKNOWN) and don't use\par
"boolean_argument" unless it's an SQL predicate or it's enclosed in\par
parentheses.\par
\par
## If you want to restrict your code to Core SQL, don't define any ARRAY <data\par
type>s and don't use any of SQL's array syntax.\par
\par
## If you want to restrict your code to Core SQL, don't use CONCATENATE.\par
\par
## If you want to restrict your code to Core SQL, don't use CARDINALITY.\par
\par
## If you want to restrict your code to Core SQL, don't use the ROW <data\par
type> or <row reference>s and <Field reference>s and, when using a <row value\par
constructor>, don't use ARRAY[] or ARRAY??(??) as an "element_expression",\par
don't construct a row with more than one Field, don't use the ROW <keyword> in\par
front of your element_expression and don't use a subquery to construct your\par
row.\par
\par
## If you want to restrict your code to Core SQL, don't use the REF <data\par
type>.\par
\par
## If you want to restrict your code to Core SQL, don't use DEREF.\par
\par
## If you want to restrict your code to Core SQL, don't use UDTs, methods or\par
any of SQL's <reference type> or UDT syntax.\par
\par
## If you want to restrict your code to Core SQL, don't use <Domain name> as a\par
CAST target: CAST only to a <data type>.\par
\par
## If you want to restrict your code to Core SQL, don't use CAST to convert\par
any BLOB value to another <data type>.\par
\par
## If you want to restrict your code to Core SQL, don't use CAST to convert\par
any CLOB or NCLOB values to another <data type>.\par
\par
## If you want to restrict your code to Core SQL, don't use this expression:\par
"NULL IS NULL" or this expression: "NULL IS NOT NULL".\par
\par
## If you want to restrict your code to Core SQL, don't use the CREATE ROLE\par
statement.\par
\par
## If you want to restrict your code to Core SQL, don't specify the UNDER\par
Privilege, don't specify the SELECT Privilege as a Column Privilege (that is,\par
with a <Column name> list) and don't specify the INSERT Privilege as a Column\par
Privilege.\par
\par
## If you want to restrict your code to Core SQL, don't use the FROM <grantor>\par
clause with the GRANT statement.\par
\par
## If you want to restrict your code to Core SQL, don't use the <grant role\par
statement> form of the GRANT statement and don't grant any grantable\par
Privileges on your Objects to other users -- Core SQL only allows the owner of\par
an Object to hold a grantable Privilege.\par
\par
## If you want to restrict your code to Core SQL, don't use the <revoke role\par
statement> form of the REVOKE statement and don't use REVOKE ... CASCADE or\par
the GRANT OPTION FOR clause. Also, when revoking, make sure that your current\par
<AuthorizationID> is the owner of the Schema that owns the Object you're\par
revoking Privileges for.\par
\par
## If you want to restrict your code to Core SQL, don't use the DROP ROLE\par
statement.\par
\par
## If you want to restrict your code to Core SQL, don't use CURRENT_USER,\par
SESSION_USER, SYSTEM_USER or CURRENT_ROLE.\par
\par
## If you want to restrict your code to Core SQL, don't use explicit <Catalog\par
name>s.\par
\par
## If you want to restrict your code to Core SQL, do not reference\par
INFORMATION_SCHEMA.ADMINISTRABLE_ROLE_AUTHORIZATIONS,\par
INFORMATION_SCHEMA.APPLICABLE_ROLES, INFORMATION_SCHEMA.ASSERTIONS,\par
INFORMATION_SCHEMA.COLLATIONS, INFORMATION_SCHEMA.COLUMN_DOMAIN_USAGE,\par
INFORMATION_SCHEMA.COLUMN_PRIVILEGES,\par
INFORMATION_SCHEMA.COLUMN_USER_DEFINED_TYPE_USAGE,\par
INFORMATION_SCHEMA.CONSTRAINT_COLUMN_USAGE,\par
INFORMATION_SCHEMA.CONSTRAINT_TABLE_USAGE,\par
INFORMATION_SCHEMA.DIRECT_SUPERTABLES, INFORMATION_SCHEMA.DOMAINS,\par
INFORMATION_SCHEMA.DOMAIN_CONSTRAINTS,\par
INFORMATION_SCHEMA.DOMAIN_USER_DEFINED_TYPE_USAGE,\par
INFORMATION_SCHEMA.ENABLED_ROLES, INFORMATION_SCHEMA.KEY_COLUMN_USAGE,\par
INFORMATION_SCHEMA.METHOD_SIGNATURES,\par
INFORMATION_SCHEMA.METHOD_SIGNATURE_PARAMETERS,\par
INFORMATION_SCHEMA.ROLE_COLUMN_GRANTS, INFORMATION_SCHEMA.ROLE_ROUTINE_GRANTS,\par
INFORMATION_SCHEMA.ROLE_TABLE_GRANTS, INFORMATION_SCHEMA.ROLE_USAGE_GRANTS,\par
INFORMATION_SCHEMA.ROLE_USER_DEFINED_TYPE_GRANTS,\par
INFORMATION_SCHEMA.ROUTINE_COLUMN_USAGE,\par
INFORMATION_SCHEMA.ROUTINE_TABLE_USAGE, INFORMATION_SCHEMA.SQL_FEATURES,\par
INFORMATION_SCHEMA.SQL_IMPLEMENTATION_INFO, INFORMATION_SCHEMA.SQL_SIZING,\par
INFORMATION_SCHEMA.SQL_SIZING_PROFILES, INFORMATION_SCHEMA.TABLE_PRIVILEGES,\par
INFORMATION_SCHEMA.TRANSFORMS, INFORMATION_SCHEMA.TRANSLATIONS,\par
INFORMATION_SCHEMA.TRIGGER_COLUMN_USAGE,\par
INFORMATION_SCHEMA.TRIGGER_TABLE_USAGE, INFORMATION_SCHEMA.USAGE_PRIVILEGES,\par
INFORMATION_SCHEMA.USER_DEFINED_TYPE_PRIVILEGES,\par
INFORMATION_SCHEMA.USER_DEFINED_TYPES, INFORMATION_SCHEMA.VIEW_COLUMN_USAGE or\par
INFORMATION_SCHEMA.VIEW_TABLE_USAGE.\par
\par
## If you want to restrict your code to Core SQL, don't use a DEFAULT\par
CHARACTER SET clause or a PATH clause in your CREATE SCHEMA statements and\par
don't include any of the following in your <Schema element list>: CREATE\par
ASSERTION statements, CREATE CHARACTER SET statements, CREATE COLLATION\par
statements, CREATE DOMAIN statements, CREATE TRANSLATION statements, CREATE\par
TYPE statements, CREATE ROLE statements or GRANT statements to Roles.\par
\par
## If you want to restrict your code to Core SQL, don't use the DROP SCHEMA\par
statement.\par
\par
## If you want to restrict your code to Core SQL, don't create any temporary\par
Base tables, don't use a LIKE clause as a <table element>, don't use an OF\par
clause as a <table element> and don't add a <column scope clause> to any\par
CREATE TABLE statement.\par
\par
## If you want to restrict your code to Core SQL, don't add a COLLATE clause\par
to your <Column definition>s, don't base your Columns on Domains, don't name\par
your <Column Constraint>s and don't define a <Column Constraint> with a\par
<referential triggered action>.\par
\par
## If you want to restrict your code to Core SQL, don't use "DEFAULT\par
CURRENT_PATH" when defining a <default clause>.\par
\par
## If you want to restrict your code to Core SQL, don't use ALTER TABLE to\par
drop a Column from a Table, to change a <Column definition> using any of the\par
available options, to add a Constraint to a Table or to drop a Constraint from\par
a Table.\par
\par
## If you want to restrict your code to Core SQL, don't use the CASCADE drop\par
behaviour for your DROP TABLE statements.\par
\par
## If you want to restrict your code to Core SQL, don't define any RECURSIVE\par
Views, don't use the EXCEPT, INTERSECT or CORRESPONDING operators in your View\par
queries and don't use the optional CASCADED or LOCAL levels specification in\par
your check clauses -- always define Views only with WITH CHECK OPTION alone.\par
\par
## If you want to restrict your code to Core SQL, don't use the CASCADE drop\par
behaviour for your DROP VIEW statements.\par
\par
## If you want to restrict your code to Core SQL, don't use the DECLARE LOCAL\par
TEMPORARY TABLE statement.\par
\par
## If you want to restrict your code to Core SQL, don't use the CREATE DOMAIN\par
statement.\par
\par
## If you want to restrict your code to Core SQL, don't use the ALTER DOMAIN\par
statement.\par
\par
## If you want to restrict your code to Core SQL, don't use the DROP DOMAIN\par
statement.\par
\par
## If you want to restrict your code to Core SQL, don't name your Constraints\par
and don't add a <constraint attributes> clause to your Constraint definitions.\par
(This means you'll be defining all Constraints as NOT DEFERRABLE INITIALLY\par
IMMEDIATE.)\par
\par
## If you want to restrict your code to Core SQL, don't use the\par
"UNIQUE(VALUE)" form to define a UNIQUE Constraint and don't add a NOT NULL\par
Constraint to any Column that is part of a unique key for a UNIQUE Constraint.\par
\par
## If you want to restrict your code to Core SQL, don't define your FOREIGN\par
KEY Constraints with a MATCH clause, an ON UPDATE clause or an ON DELETE\par
clause.\par
\par
## If you want to restrict your code to Core SQL, don't use a subquery in a\par
CHECK Constraint's search condition. Also, for Core SQL, the REFERENCES\par
Privilege isn't needed to create a CHECK Constraint.\par
\par
## If you want to restrict your code to Core SQL, don't use the CREATE\par
ASSERTION statement.\par
\par
## If you want to restrict your code to Core SQL, don't use the DROP ASSERTION\par
statement.\par
\par
## If you want to restrict your code to Core SQL, don't use any <Character set\par
name>s.\par
\par
## If you want to restrict your code to Core SQL, don't use the CREATE\par
CHARACTER SET statement.\par
\par
## If you want to restrict your code to Core SQL, don't use the DROP CHARACTER\par
SET statement.\par
\par
## If you want to restrict your code to Core SQL, don't use any <Collation\par
name>s or <Form-of-use conversion name>s.\par
\par
## If you want to restrict your code to Core SQL, don't use the CREATE\par
COLLATION statement.\par
\par
## If you want to restrict your code to Core SQL, don't use the DROP COLLATION\par
statement.\par
\par
## If you want to restrict your code to Core SQL, don't use any <Translation\par
name>s.\par
\par
## If you want to restrict your code to Core SQL, don't use the CREATE\par
TRANSLATION statement.\par
\par
## If you want to restrict your code to Core SQL, don't use the DROP\par
TRANSLATION statement.\par
\par
## If you want to restrict your code to Core SQL, don't use the CREATE TRIGGER\par
statement.\par
\par
## If you want to restrict your code to Core SQL, don't use the DROP TRIGGER\par
statement.\par
\par
## If you want to restrict your code to Core SQL, don't use LOCATOR\par
indicators, DYNAMIC RESULT SETS clauses, TRANSFORM GROUP clauses or duplicate\par
<Routine name>s when defining an SQL-invoked routine and don't define any\par
SQL-invoked methods.\par
\par
## If you want to restrict your code to Core SQL, don't use the CASCADE drop\par
behaviour for your DROP ROUTINE/FUNCTION/PROCEDURE statements.\par
\par
## If you want to restrict your code to Core SQL, don't use an <element\par
reference> or CURRENT_PATH to specify a value.\par
\par
## If you want to restrict your code to Core SQL, don't use a <value\par
expression> that evaluates to a Boolean value, an array, an interval or a REF\par
value, don't use a <subtype treatment> to specify a value and don't use the\par
COLLATE clause to force a collating sequence for any value.\par
\par
## If you want to restrict your code to Core SQL, don't use a <query name> to\par
make up a <Table reference> and don't use the <keyword> ONLY to make up a\par
<Table reference> that refers to a typed Table.\par
\par
## If you want to restrict your code to Core SQL, don't use the <distinct\par
predicate>.\par
\par
## If you want to restrict your code to Core SQL, don't use BLOBS, CLOBs or\par
NCLOBs in a CASE expression.\par
\par
## If you want to restrict your code to Core SQL, don't use CROSS JOIN, don't\par
use UNION JOIN, don't use NATURAL for any type of join and don't use FULL\par
[OUTER] JOIN.\par
\par
## If you want to restrict your code to Core SQL, make sure that all\par
"scalar_expressions" in an <in value list> are either <literal>s, references\par
to a host variables or SQL parameters, <Field reference>s or the USER\par
function.\par
\par
## If you want to restrict your code to Core SQL, don't use the <unique\par
predicate>.\par
\par
## If you want to restrict your code to Core SQL, don't use the <match\par
predicate>.\par
\par
## If you want to restrict your code to Core SQL, don't use the <quantified\par
predicate>.\par
\par
## If you want to restrict your code to Core SQL, don't use TABLE <Table\par
name>.\par
\par
## If you want to restrict your code to Core SQL, don't use a Table\par
constructor that involves a Table expression, don't use a Table constructor\par
anywhere but in an INSERT statement and make all your Table constructors\par
contain exactly one row.\par
\par
## If you want to restrict your code to Core SQL, don't use WITH [RECURSIVE]\par
in a <query expression>, the INTERSECT set operator, a CORRESPONDING clause\par
with any set operator or any set operator with an explicit DISTINCT.\par
\par
## If you want to restrict your code to Core SQL, don't use ROLLUP or CUBE,\par
and don't add a COLLATE clause to any grouping Column reference.\par
\par
## If you want to restrict your code to Core SQL, don't use the set functions\par
EVERY, ANY, SOME or GROUPING, don't use a set function unless it operates only\par
on a <Column reference> that refers to a Column belonging to a Table named in\par
the FROM clause, and when counting, always use COUNT(*): don't use\par
COUNT(Column) or COUNT(ALL Column) at all.\par
\par
## If you want to restrict your code to Core SQL, don't use a <query\par
expression> with EXCEPT, INTERSECT or CORRESPONDING in an INSERT statement,\par
don't use a <query expression> that names an underlying Table of your target\par
Table in an INSERT statement, don't use the <query expression> TABLE <Table\par
name> in an INSERT statement, if you use the <query expression VALUES (value\par
commalist) in an INSERT statement, make sure it constructs only one new row,\par
don't use the DEFAULT VALUES form of the INSERT statement and make sure all\par
your INSERT <Table reference>s are actually <Table name>s, with no\par
<Correlation name>s or <derived Column list>s.\par
\par
## If you want to restrict your code to Core SQL, don't use a <search\par
condition> that names an underlying Table of your target Table in an UPDATE\par
statement and make sure all your UPDATE <Table reference>s are actually <Table\par
name>s, with no <Correlation name>s or <derived Column list>s.\par
\par
## If you want to restrict your code to Core SQL, don't use a <search\par
condition> that names an underlying Table of your target Table in a DELETE\par
statement and make sure all your DELETE <Table reference>s are actually <Table\par
name>s, with no <Correlation name>s or <derived Column list>s.\par
\par
## If you want to restrict your code to Core SQL, don't use AND CHAIN or AND\par
NO CHAIN with COMMIT.\par
\par
## If you want to restrict your code to Core SQL, don't use AND CHAIN, AND NO\par
CHAIN or TO SAVEPOINT with ROLLBACK.\par
\par
## If you want to restrict your code to Core SQL, don't use the SAVEPOINT\par
statement.\par
\par
## If you want to restrict your code to Core SQL, don't use the RELEASE\par
SAVEPOINT statement.\par
\par
## If you want to restrict your code to Core SQL, don't use SET LOCAL\par
TRANSACTION and don't set any transaction's isolation level to anything but\par
SERIALIZABLE.\par
\par
## If you want to restrict your code to Core SQL, don't use the START\par
TRANSACTION statement.\par
\par
## If you want to restrict your code to Core SQL, don't use the CONNECT\par
statement.\par
\par
## If you want to restrict your code to Core SQL, don't use the SET CONNECTION\par
statement.\par
\par
## If you want to restrict your code to Core SQL, don't use the DISCONNECT\par
statement.\par
\par
## If you want to restrict your code to Core SQL, don't use the SET SESSION\par
CHARACTERISTICS statement.\par
\par
## If you want to restrict your code to Core SQL, don't use the SET SESSION\par
AUTHORIZATION statement.\par
\par
## If you want to restrict your code to Core SQL, don't use the SET ROLE\par
statement.\par
\par
## If you want to restrict your code to Core SQL, don't use the SET TIME ZONE\par
statement.\par
\par
Taxonomy Tables\par
\par
In the following tables:\par
     ## The first column, "Feature ID", gives the SQL Standard's\par
identification for each feature and subfeature. The Feature ID value consists\par
of either a letter and three digits or a letter, three digits, a hyphen and\par
one or two additional digits. Feature ID values without a hyphen identify\par
complete features. Feature ID values containing a hyphen and additional digits\par
identify subfeatures that help to define a complete feature.\par
     ## The second column, "Feature Description", gives a brief description of\par
the feature or subfeature.\par
     ## The third column, "Core SQL?", shows the SQL Standard's definition of\par
the minimal conformance requirement, called "Core SQL". Features that are\par
included in the definition of Core SQL contain a "YES" in this column (their\par
subfeatures contain "(yes)" for consistency). Features and subfeatures that\par
are not part of Core SQL contain a "No" in this column.\par
\par
<<<INSERT APP_B_T1.DOC HERE>>>\par
\par
<<<INSERT APP_B_T2.DOC HERE>>>\par
\par
<<<INSERT APP_B_T3.DOC HERE>>>\par
\par
<<<INSERT APP_B_T4.DOC HERE>>>\par
\par
\par
Table Tax_1: SQL/Foundation Feature Taxonomy\par
\par
FEATURE  FEATURE                                                         CORE\par
ID       DESCRIPTION                                                     SQL?\par
E011     Numeric data types.                                             YES\par
E011-1   The INTEGER and SMALLINT data types, integer literals, integer  (yes)\par
         expressions, integer comparison and integer assignment.\par
E011-2   The REAL, DOUBLE PRECISION and FLOAT data types,                (yes)\par
         approximate numeric literals, approximate numeric expressions,\par
         approximate numeric comparison and approximate numeric \par
         assignment.\par
E011-3   The DECIMAL and NUMERIC data types, decimal & numeric literals, (yes)\par
         decimal & numeric expressions, decimal & numeric comparison\par
         and decimal & numeric assignment.          \par
E011-4   The +, -, * and / arithmetic operators.                         (yes)\par
E011-5   The =, <>, >, >=, < and <= operators.                           (yes)\par
E011-6   Implicit casting among the numeric data types.                  (yes)\par
E021     Character data types.                                           YES\par
E021-1   CHARACTER data type (including all its spellings.               (yes)\par
E021-2   CHARACTER VARYING data type (including all its spellings.       (yes)\par
E021-3   Character literals, character comparison and character          (yes)\par
         assignment.\par
E021-4   The CHARACTER_LENGTH function.                                  (yes)\par
E021-5   The OCTET_LENGTH function.                                      (yes)\par
E021-6   The SUBSTRING function for use with CHARACTER and CHARACTER     (yes)\par
         VARYING data types.\par
E021-7   <character value expression>s by use of the concatenation       (yes)\par
         operation on CHARACTER and CHARACTER VARYING data types.\par
E021-8   The UPPER and LOWER functions.                                  (yes)\par
E021-9   The TRIM function.                                              (yes)\par
E021-10  Implicit casting among the character data types.                (yes)\par
E031     Identifiers.                                                    YES\par
E031-1   Delimited identifiers.                                          (yes)\par
E031-2   Lower case identifiers.                                         (yes)\par
E031-3   Trailing underscore.                                            (yes)\par
E041     Basic schema definition.                                        YES\par
E041-1   <schema definition> as a means of defining base tables and      (yes)\par
         views, together with the ability to grant permissions on those\par
         base tables and views.\par
E041-2   <table definition> for persistent base tables.                  (yes)\par
E041-3   <view definition>.                                              (yes)\par
E041-4   WITH CHECK OPTION clause on <view definition>.                  (yes)\par
E041-5   <grant statement>.                                              (yes)\par
E041-6   Allow the optional keyword TABLE on a <grant statement>.        (yes)\par
E051     Basic query specification.                                      YES\par
E051-1   SELECT DISTINCT.                                                (yes)\par
E051-2   GROUP BY clause supported.                                      (yes)\par
E051-3   A GROUP BY clause need not contain all the non-aggregated       (yes)\par
         columns in the select list.\par
E051-4   A GROUP BY clause can contain columns that are not in the       (yes)\par
         select list.\par
E051-5   <select list> items can be renamed (optional "AS <column name>" (yes)\par
         in <select sublist>).\par
E051-6   HAVING clause supported.                                        (yes)\par
E051-7   Qualified * in select list (<select list> item of the form      (yes)\par
         "<table name>.*" or "<correlation name>.*").\par
E051-8   <correlation names> can be specified in the FROM clause and can (yes)\par
         be used elsewhere in the <query specification> to distinguish\par
         among columns.\par
E051-9   Support for the ability to rename the columns in the FROM       (yes)\par
         clause (that is "FROM <table name> [ [AS] <correlation name> ] \par
         [ <column name> \{, <column name>\}... ]").\par
E051-10  Derived tables supported in the FROM clause.                    (yes)\par
E051-11  Allow the optional keyword AS before a <correlation name>.      (yes)\par
E061     Basic predicates and search conditions.                         YES\par
E061-1   <comparison predicate>.                                         (yes)\par
E061-2   <between predicate>.                                            (yes)\par
E061-3   <in predicate>.                                                 (yes)\par
E061-4   <like predicate>.                                               (yes)\par
E061-5   <like escape clause>.                                           (yes)\par
E061-6   <null predicate>.                                               (yes)\par
E061-7   <quantified comparison predicate>.                              (yes)\par
E061-8   <exists predicate>.                                             (yes)\par
E061-9   Subqueries in <comparison predicate>.                           (yes)\par
E061-10  Subqueries in <exists predicate>.                               (yes)\par
E061-11  Subqueries in <in predicate>.                                   (yes)\par
E061-12  Subqueries in <quantified predicate>.                           (yes)\par
E061-13  Correlated subqueries (<correlation names> used in a sub-query  (yes)\par
         as correlated reference to a column in the outer query).\par
E061-14  <search condition> (two or more predicates combined using the   (yes)\par
         AND, OR and NOT logical operators).\par
E071     Basic query expressions.                                        YES\par
E071-1   UNION DISTINCT table operator.                                  (yes)\par
E071-2   UNION ALL table operator.                                       (yes)\par
E071-3   EXCEPT DISTINCT table operator.                                 (yes)\par
E071-4   EXCEPT ALL table operator.                                      (yes)\par
E071-5   Columns combined via table operators need not have exactly the  (yes)\par
         same data type.\par
E071-6   Support of table operators within a subquery.                   (yes)\par
E081     Basic Privileges.                                               YES\par
E081-1   SELECT privilege.                                               (yes)\par
E081-2   DELETE privilege.                                               (yes)\par
E081-3   INSERT privilege at the table level.                            (yes)\par
E081-4   UPDATE privilege at the table level.                            (yes)\par
E081-5   UPDATE privilege at the column level.                           (yes)\par
E081-6   REFERENCES privilege at the table level.                        (yes)\par
E081-7   REFERENCES privilege at the column level.                       (yes)\par
E081-8   WITH GRANT OPTION.                                              (yes)\par
E091     Set functions.                                                  YES\par
E091-1   AVG.                                                            (yes)\par
E091-2   COUNT.                                                          (yes)\par
E091-3   MAX.                                                            (yes)\par
E091-4   MIN.                                                            (yes)\par
E091-5   SUM.                                                            (yes)\par
E091-6   ALL quantifier.                                                 (yes)\par
E091-7   DISTINCT quantifier.                                            (yes)\par
E101     Basic data manipulation.                                        YES\par
E101-1   <insert statement>.                                             (yes)\par
E101-2   The VALUES clause in an <insert statement> used to insert       YES\par
         multiple rows with one invocation.\par
E101-3   <update statement: searched>.                                   (yes)\par
E101-4   <delete statement: searched>.                                   (yes)\par
E111     <select statement: single row>.                                 YES\par
E121     Basic cursor support.                                           YES\par
E121-1   <declare cursor>.                                               (yes)\par
E121-2   Columns in the <order by clause> need not also be specified in  (yes)\par
         the <select list>.\par
E121-3   Value expressions in ORDER BY clause (that is, a <sort key>     (yes)\par
         element is not restricted to being either a <column name> or an\par
         <integer> that designates a column>).\par
E121-4   <open statement>.                                               (yes)\par
E121-5   <fetch statement>.                                              (yes)\par
E121-6   <update statement: positioned>.                                 (yes)\par
E121-7   <delete statement: positioned>.                                 (yes)\par
E121-8   <close statement>.                                              (yes)\par
E121-10  FETCH with implicit NEXT.                                       (yes)\par
E121-16  Support the optional FROM clause in <fetch statement>.          (yes)\par
E122     Scrollable cursors.                                             No\par
E122-1   Read-only scrollable cursor support.                            No\par
E122-2   Read-write scrollable cursor support.                           No\par
E122-3   FETCH with explicit NEXT.                                       No\par
E122-4   FETCH FIRST.                                                    No\par
E122-5   FETCH LAST.                                                     No\par
E122-6   FETCH PRIOR.                                                    No\par
E122-7   FETCH ABSOLUTE.                                                 No\par
E122-8   FETCH RELATIVE.                                                 No\par
E123     <table reference> in <delete statement: positioned>, <delete    No\par
         statement: searched>, <insert statement>, <update statement:\par
         positioned> and <update statement: searched>.\par
E131     Null value support (nulls in lieu of values).                   YES\par
E141     Basic integrity constraints.                                    YES\par
E141-1   NOT NULL constraints.                                           (yes)\par
E141-2   UNIQUE constraints of NOT NULL columns.                         (yes)\par
E141-3   PRIMARY KEY constraints.                                        (yes)\par
E141-4   Basic FOREIGN KEY constraint with the NO ACTION default for     (yes)\par
         both referential delete action and referential update action.\par
E141-6   CHECK constraints.                                              (yes)\par
E141-7   Column defaults.                                                (yes)\par
E141-8   NOT NULL inferred on UNIQUE and PRIMARY KEY.                    (yes)\par
E141-9   Named constraints.                                              (yes)\par
E141-10  Referential name order (names in a foreign key can be specified (yes)\par
         in any order).\par
E142     Referential delete actions.                                     No\par
E143     UNIQUE constraints of possibly null columns.                    No\par
E151     Transaction support.                                            YES\par
E151-1   <commit statement>.                                             (yes)\par
E151-2   <rollback statement>.                                           (yes)\par
E151-4   Support for the READ ONLY and READ WRITE clauses on the SET     (yes)\par
         TRANSACTION statement.\par
E151-5   Support for the READ ONLY and UPDATE clauses on the DECLARE     (yes)\par
         CURSOR statement.\par
E151-6   A <query expression> is updatable even though its <where        (yes)\par
         clause> contains a <subquery>.\par
E151-7   Allow the word WORK not to be specified.                        (yes)\par
E152     Basic SET TRANSACTION statement.                                YES\par
E152-1   SET TRANSACTION ISOLATION LEVEL SERIALIZABLE.                   (yes)\par
E152-2   SET TRANSACTION statement, <transaction access mode> clause.    (yes)\par
E152-3   SET TRANSACTION statement, <diagnostics size> clause.           (yes)\par
E153     Transaction isolation levels other than SERIALIZABLE.           No\par
E161     SQL comments using double <minus sign>.                         YES\par
E162     Bracketed SQL comments (/*...*/ comments).                      No\par
E171     SQLSTATE support.                                               YES\par
E182     Module language.                                                YES\par
E191     Basic flagging.                                                 YES\par
F021     Basic information schema (Support of the COLUMNS, TABLES and    YES\par
         VIEWS views in the INFORMATION_SCHEMA).\par
F031     Basic schema manipulation with RESTRICT option.                 YES\par
F031-1   CREATE TABLE statement to create persistent base tables.        (yes)\par
F031-2   CREATE VIEW statement.                                          (yes)\par
F031-3   GRANT statement.                                                (yes)\par
F031-4   ALTER TABLE statement, ADD COLUMN clause.                       (yes)\par
F031-8   ALTER TABLE statement, ALTER COLUMN clause.                     (yes)\par
F031-9   ALTER TABLE statement, ADD CONSTRAINT clause.                   (yes)\par
F031-10  ALTER TABLE statement, DROP CONSTRAINT clause.                  (yes)\par
F031-13  DROP TABLE statement, RESTRICT clause.                          (yes)\par
F031-16  DROP VIEW statement, RESTRICT clause.                           (yes)\par
F031-19  REVOKE statement, RESTRICT clause.                              (yes)\par
F031-20  DROP TYPE statement, RESTRICT clause.                           (yes)\par
F031-21  DROP ROUTINE statement, RESTRICT clause.                        (yes)\par
F032     Basic schema manipulation with CASCADE option.                  No\par
F032-1   DROP TABLE statement, CASCADE clause.                           No\par
F032-2   DROP VIEW statement, CASCADE clause.                            No\par
F032-3   DROP TYPE statement, CASCADE clause.                            (yes)\par
F032-4   DROP ROUTINE statement, CASCADE clause.                         (yes)\par
F032-5   REVOKE statement, CASCADE clause.                               No\par
F033     ALTER TABLE statement, DROP COLUMN.                             No\par
F033-1   ALTER TABLE statement, DROP COLUMN CASCADE clause.              No\par
F033-2   ALTER TABLE statement, DROP COLUMN RESTRICT clause.             (yes)\par
F034     Full REVOKE statement.                                          No\par
F034-1   REVOKE statement performed by an <authorization identifier>     No\par
         other than the owner of a schema object.\par
F034-2   REVOKE statement, GRANT OPTION FOR clause.                      No\par
F034-3   REVOKE statement to revoke a privilege that the grantee has     No\par
         WITH GRANT OPTION.\par
F041     Basic joined table.                                             YES\par
F041-1   Inner join (but not necessarily the INNER keyword).             (yes)\par
F041-2   INNER keyword.                                                  (yes)\par
F041-3   Left Outer Join.                                                (yes)\par
F041-4   Right Outer Join.                                               (yes)\par
F041-5   Outer joins can be nested.                                      (yes)\par
F041-6   Column names in ON clause can be in different order than those  (yes)\par
         in the OUTER JOIN clause.\par
F041-7   The inner table in a left or right outer join can also be used  (yes)\par
         in an inner join.\par
F041-8   All comparison operators are supported (rather than just =).    (yes)\par
F051     Basic date & time.                                              YES\par
F051-1   DATE data type (including support of DATE literal).             (yes)\par
F051-2   TIME data type (including support of TIME literal) with         (yes)\par
         fractional seconds precision of at least 0.\par
F051-3   TIMESTAMP data type (including support of TIMESTAMP literal)    (yes)\par
         with fractional seconds precision of at least 0 and 6.\par
F051-4   Comparison predicate on like date & time data types.            (yes)\par
F051-5   Explicit CAST between datetime types and CHARACTER & CHARACTER  (yes)\par
         VARYING.\par
F051-6   CURRENT_DATE.                                                   (yes)\par
F051-7   CURRENT_TIME.                                                   (yes)\par
F051-8   CURRENT_TIMESTAMP.                                              (yes)\par
F052     Interval data type.                                             No\par
F081     UNION in views.                                                 YES\par
F121     Get diagnostics.                                                No\par
F131     Grouped operations.                                             YES\par
F131-1   Even though a table in the FROM clause is a grouped view, the   (yes)\par
         query can contain a WHERE, GROUP BY or HAVING.\par
F131-2   Even though a table in the FROM clause is a grouped view,       (yes)\par
         multiple tables can be specified in the query.\par
F131-3   Even though a table in the FROM clause is a grouped view, the   (yes)\par
         select list can contain a <set function>.\par
F131-4   A subquery within a comparison predicate cannot contain a GROUP (yes)\par
         BY clause or a HAVING clause and can identify a grouped view.\par
F131-5   The table in the FROM clause of a single row SELECT statement   (yes)\par
         can be a grouped view. Also a single row SELECT statement may\par
         specify a GROUP BY clause or HAVING clause.\par
F171     Multiple schemas per user.                                      YES\par
F181     Multiple module support (the ability to associate multiple host YES\par
         compilation units with a single SQL-session at one time).\par
F201     CAST functions (excluding support for casting the INTERVAL data YES\par
         type).\par
F221     Explicit defaults.                                              YES\par
F222     DEFAULT VALUES support in an <insert statement>.                No\par
F231     Privilege Tables.                                               No\par
F231-1   TABLE_PRIVILEGES view.                                          No\par
F231-2   COLUMN_PRIVILEGES view.                                         No\par
F231-3   USAGE_PRIVILEGES view.                                          No\par
F251     Domain support.                                                 No\par
F261     CASE expression.                                                YES\par
F261-1   <simple case>.                                                  (yes)\par
F261-2   <searched case>.                                                (yes)\par
F261-3   NULLIF.                                                         (yes)\par
F261-4   COALESCE.                                                       (yes)\par
F271     Compound character literals.                                    No\par
F281     LIKE enhancements.                                              No\par
F291     UNIQUE predicate.                                               No\par
F301     <corresponding specification> in <query expression>s.           No\par
F302     INTERSECT DISTINCT table operator.                              No\par
F303     INTERSECT ALL table operator.                                   No\par
F311     Schema definition statement.                                    YES\par
F321     User authorization.                                             No\par
F331     Constraint tables.                                              YES\par
F331-1   TABLE_CONSTRAINTS view.                                         (yes)\par
F331-2   REFERENTIAL_CONSTRAINTS view.                                   (yes)\par
F331-3   CHECK_CONSTRAINTS view.                                         (yes)\par
F341     Usage tables.                                                   No\par
F361     User authorization.                                             No\par
F381     Extended schema manipulation.                                   No\par
F391     Long identifiers.                                               No\par
F401     Full outer join.                                                No\par
F401-1   Natural Join.                                                   No\par
F411     Time zone specification.                                        No\par
F421     National character.                                             No\par
F441     Extended set function support.                                  No\par
F451     Character set definition.                                       No\par
F461     Named character sets.                                           No\par
F471     Scalar subquery values.                                         YES\par
F481     Expanded NULL predicate.                                        YES\par
F491     Constraint management.                                          No\par
F501     Features and conformance tables.                                YES\par
F501-1   SQL_FEATURES.                                                   (yes)\par
F501-2   SQL_SIZING.                                                     (yes)\par
F511     BIT data type.                                                  No\par
F521     Assertions.                                                     No\par
F531     Temporary tables.                                               No\par
F551     Full datetime.                                                  No\par
F561     Full value expressions.                                         No\par
F571     Truth value tests.                                              No\par
F581     The POSITION function for use with CHARACTER, CHARACTER VARYING No\par
         and LOB data types.\par
F611     Indicator data types.                                           No\par
F641     Row and table constructors.                                     No\par
F651     Catalog name qualifiers.                                        No\par
F661     Simple tables.                                                  No\par
F671     Subqueries in CHECK.                                            No\par
F681     Union and cross join.                                           No\par
F691     Collation and translation.                                      No\par
F701     Referential update actions.                                     No\par
F721     Deferrable constraints.                                         No\par
F731     INSERT column privileges.                                       No\par
F741     Referential MATCH types.                                        No\par
F751     View CHECK enhancements.                                        No\par
F761     Session management.                                             No\par
F771     Connection management.                                          No\par
F781     Self-referencing operations.                                    No\par
F791     Insensitive cursors.                                            No\par
F811     Extended flagging.                                              No\par
F821     Local table references.                                         No\par
F831     Full cursor update.                                             No\par
T011     Timestamp in information schema for configuration management.   No\par
T031     BOOLEAN data type.                                              No\par
T041     Basic LOB data type support.                                    YES\par
T041-1   BLOB data type.                                                 (yes)\par
T041-2   CLOB data type.                                                 (yes)\par
T041-3   LENGTH and SUBSTRING function support for LOB data types.       (yes)\par
T041-4   concatenation of LOB data types.                                (yes)\par
T041-5   non-holdable locator for LOB data types.                        (yes)\par
T042     Extended LOB data type support.                                 No\par
T042-1   OVERLAY function.                                               No\par
T071     CASCADE option for DROP COLLATION.                              No\par
T121     WITH (excluding RECURSIVE) in <query expression>.               YES\par
T122     WITH RECURSIVE in <query expression>.                           No\par
T131     Recursive query.                                                No\par
T141     SIMILAR predicate.                                              No\par
T151     DISTINCT predicate.                                             No\par
T161     Optional interval qualifier.                                    No\par
T171     LIKE clause in table definition.                                No\par
T191     Referential action RESTRICT.                                    No\par
T201     Comparable data types for referential constraints.              YES\par
T211     Triggers.                                                       No\par
T211-1   Support for triggers activated on UPDATE, INSERT, DELETE of     No\par
         one base table.\par
T211-2   Support for BEFORE triggers that are applied before any         No\par
         modifications are made to the database. These triggers have\par
         access to old (delete, update) and new (insert, update) rows.\par
T211-3   Support for AFTER triggers that are applied before any          No\par
         modifications are made to the database. These triggers have\par
         access to both old (delete, update) and new (insert, update)\par
         rows and transition tables.\par
T211-4   Support for triggers that are to be applied once for each row   No\par
         of the subject table that is affected by the triggering SQL\par
         operation.\par
T211-5   Ability to specify a search condition that must be true before  No\par
         the trigger is invoked.\par
T211-6   Support for run-time rules for the interaction of triggers and  No\par
         constraints.\par
T211-7   TRIGGER privilege.                                              No\par
T211-8   Multiple triggers for the same the event are executed in the    No\par
         order in which they were created in the catalog.\par
T212     Triggers applied once for the triggering statement.             No\par
T221     WITH HOLD cursors.                                              YES\par
T231     SENSITIVE cursors.                                              No\par
T241     START TRANSACTION statement.                                    No\par
T251     LOCAL option for SET TRANSACTION statement.                     No\par
T261     Chained transactions.                                           No\par
T271     Savepoints.                                                     No\par
T281     SELECT privilege with column granularity.                       No\par
T291     Static and Dynamic execution rights.                            No\par
T301     Functional Dependencies.                                        No\par
T321     Basic SQL-invoked routines.                                     YES\par
T321-1   User-defined functions with no overloading.                     (yes)\par
T321-2   User-defined stored procedures with no overloading.             (yes)\par
T321-3   <routine invocation>.                                           (yes)\par
T321-4   <call statement>.                                               (yes)\par
T321-5   <return statement>.                                             (yes)\par
T322     Overloading of SQL-invoked functions and SQL-invoked            No\par
         procedures.\par
T331     Roles.                                                          No\par
T361     User-defined aggregate operators.                               No\par
T371     Quantified predicate extensions.                                No\par
T391     Table name not required in <delete statement: positioned> or    No\par
         <update statement: positioned>.\par
T401     INSERT into a cursor.                                           No\par
T411     ROW may be specified in an UPDATE statement.                    No\par
T421     Character Sets.                                                 No\par
T431     CUBE and ROLLUP operations.                                     No\par
T441     ABS and MOD functions.                                          No\par
T461     Symmetric <between predicate>.                                  No\par
T471     Result sets return value.                                       No\par
O011     Minimum user-defined data type support (distinct types).        YES\par
O021     Basic user-defined data types (Support for structured types     No\par
         (ADTs and named row types) with the exception of those features\par
         listed under Enhanced ADTs).\par
O022     Enhanced user-defined data types.                               No\par
O022-1   Constructor option.                                             No\par
O022-2   Attribute default.                                              No\par
O022-3   Multiple inheritance.                                           No\par
O022-4   Public, private, protected specification on attributes.         No\par
O022-5   Ordering clause in type definition.                             No\par
O041     Reference types.                                                No\par
O051     Create table of type.                                           No\par
O061     ALTER TABLE <add named row type>.                               No\par
O071     SQL paths in function and type name resolution.                 No\par
O081     Subtables.                                                      No\par
O091     Basic array support.                                            No\par
O091-1   Arrays of built-in data types.                                  No\par
O091-2   Arrays of distinct types.                                       No\par
O092     Arrays of UDTs.                                                 No\par
O094     Arrays of reference types.                                      No\par
O111     ONLY in query expressions (to restrict subtable search).        No\par
O121     Dereference operation (path expressions).                       No\par
O131     Reference operation.                                            No\par
O141     Attribute & field reference.                                    No\par
O141-1   Observer reference.                                             No\par
O141-2   Field reference.                                                No\par
O151     Type predicate.                                                 No\par
O161     <subtype treatment>.                                            No\par
O171     Array expressions.                                              No\par
O191     Basic SQL routines on user-defined types (with dynamic          No\par
         dispatch).\par
O192     Basic SQL routines on user-defined types.                       No\par
O192-1   Type preserving functions.                                      No\par
O192-2   Generalized expressions.                                        No\par
O201     SQL routines on arrays.                                         No\par
O201-1   Array parameters.                                               No\par
O201-2   Array as result type of functions.                              No\par
O211     User-defined cast functions.                                    No\par
O231     ADT locators.                                                   No\par
O232     Array locators.                                                 No\par
\par
\par
Table Tax_2: SQL/CLI Feature Taxonomy\par
\par
FEATURE  FEATURE                                                         CORE\par
ID       DESCRIPTION                                                     SQL?\par
C01      SQL/CLI.                                                        No\par
\par
\par
Table Tax_3: SQL/PSM Feature Taxonomy\par
\par
FEATURE  FEATURE                                                         CORE\par
ID       DESCRIPTION                                                     SQL?\par
P01      Stored modules                                                  No\par
P01-1    <SQL-server module definition>                                  No\par
P01-2    <drop module statement>                                         No\par
P02      Computational completeness                                      No\par
P02-1    <compound statement>                                            No\par
P02-2    <handler declaration>                                           No\par
P02-3    <condition declaration>                                         No\par
P02-4    <SQL variable declaration>                                      No\par
P02-5    <assignment statement>                                          No\par
P02-6    <case statement>                                                No\par
P02-7    <if statement>                                                  No\par
P02-8    <iterate statement>                                             No\par
P02-9    <leave statement>                                               No\par
P02-10   <loop statement>                                                No\par
P02-11   <repeat statement>                                              No\par
P02-12   <while statement>                                               No\par
P02-13   <for statement>                                                 No\par
P02-14   <signal statement>                                              No\par
P02-15   <resignal statement>                                            No\par
P02-16   <control statement>s as the SQL-statement of                    No\par
P03      Information Schema views                                        No\par
P03-1    MODULES view                                                    No\par
P03-2    MODULE_TABLE_USAGE view                                         No\par
P03-3    MODULE_COLUMN_USAGE view                                        No\par
P03-4    MODULE_PRIVILEGES view                                          No\par
\par
\par
Table Tax_4: SQL/Bindings Feature Taxonomy\par
\par
FEATURE  FEATURE                                                    CORE\par
ID       DESCRIPTION                                                SQL?\par
B011     Embedded Ada                                               (maybe)[1]\par
B012     Embedded C                                                 (maybe)[1]\par
B013     Embedded COBOL                                             (maybe)[1]\par
B014     Embedded Fortran                                           (maybe)[1]\par
B015     Embedded MUMPS                                             (maybe)[1]\par
B016     Embedded Pascal                                            (maybe)[1]\par
B017     Embedded PL/I                                              (maybe)[1]\par
B021     Direct SQL                                                 No       \par
B031     Basic dynamic SQL                                          No     \par
B032     Extended dynamic SQL                                       No  \par
B032-1   <describe input> statement                                 No     \par
B041     Extensions to embedded SQL exception                       No\par
B051     Enhanced execution rights                                  No\par
\par
[Note 1] A conforming DBMS must support at least one embedded language if\par
embedded SQL is the binding style.\par
\page\par
APPENDIX C -- Non-portable SQL Features\par
\par
Not all SQL DBMSs are created equal. This Appendix lists the areas for which\par
the SQL Standard provides no standardized solution for a DBMS, i.e.: the\par
following areas are all labeled either "implementor-defined" or "implementor-\par
dependent" in the Standard. Thus, valid syntax and/or the expected response\par
will vary from one DBMS to another -- keep this in mind when writing your\par
applications. \par
\par
Implementation-defined features\par
\par
The SQL Standard requires a SQL DBMS to define and document how it will handle\par
each of these features.\par
\par
Overall method of SQL support: \par
\par
The exact SQL syntax and method for accessing SQL-data supported by a DBMS is\par
non-standard for four reasons: \par
      1. The SQL Standard allows implementors to choose to support either one\par
of the following options for SQL conformance: Core SQL or Enhanced SQL. \par
      2. The SQL Standard allows implementors to choose to support either one\par
or more of the following options for binding style: Module Language, Embedded\par
Syntax or Direct SQL Invocation.\par
      3. The SQL Standard contains numerous non-standardized areas where\par
implementors are required to decide upon appropriate responses on their own:\par
the "implementor-defined" and "implementor-dependent" areas contained in the\par
Standard. \par
      4. The SQL Standard allows implementors to provide options for\par
processing database operations that the Standard does not address (e.g.: a\par
CREATE INDEX statement), as well as allowing implementors to provide options\par
for processing Standard-defined SQL in a non-conforming manner. To quote the\par
Standard: "An [SQL-]implementation remains conforming even if it provides user\par
options to process nonconforming SQL language or to process conforming SQL\par
language in a nonconforming manner." \par
\par
Connection and session results: \par
\par
The result of executing CONNECT TO is non-standard because the SQL Standard\par
allows implementors to choose to support either one of the following options: \par
      1. a DBMS may allow the establishment of only one SQL-session at a time,\par
or \par
      2. a DBMS may support multiple concurrent SQL-sessions.\par
\par
A DBMS's default SQL-session and initial default SQL-Connection are non-\par
standard because the SQL Standard requires implementors to choose their own\par
initial default <Connection name>.\par
\par
The effect of "CONNECT TO DEFAULT;" is non-standard because the SQL Standard\par
requires implementors to define what the default SQL-Connection and the\par
default SQL-server are.\par
\par
A <Connection name> must be a <regular identifier> or a <delimited identifier>\par
that is no more than 128 octets in length, but the value of a valid\par
<Connection name> is non-standard because the SQL Standard requires\par
implementors to define what a valid <Connection name> may be and what\par
Character set <Connection name>s belong to.\par
\par
A DBMS's initial default <AuthorizationID> is non-standard because the SQL\par
Standard requires implementors to choose their own initial default\par
<AuthorizationID>.\par
\par
The effect of omitting the optional USER clause from a CONNECT statement is\par
non-standard because the SQL Standard requires implementors to define their\par
own initial default SQL-session <AuthorizationID>.\par
\par
Whether the <user name> in a CONNECT statement must be identical to the Module\par
<AuthorizationID> is non-standard because the SQL Standard requires\par
implementors to define whether the two must match.\par
\par
A DBMS's initial default Catalog is non-standard because the SQL Standard\par
requires implementors to choose their own initial default <Catalog name>. \par
\par
A DBMS's initial default Schema is non-standard because the SQL Standard\par
requires implementors to choose their own initial default <Schema name>. \par
\par
A DBMS's initial default Character set is non-standard for two reasons: \par
      1. The SQL Standard requires implementors to choose their own initial\par
default <Character set name>. \par
      2. The SQL Standard requires implementors to define the character\par
repertoire for their initial default Character set. \par
\par
A DBMS's initial default time zone offset is non-standard because the SQL\par
Standard requires implementors to define their own initial default time zone\par
offset.\par
\par
The result of executing SET SESSION AUTHORIZATION is non-standard for two\par
reasons: \par
      1. Although it is mandatory to support the use of SET SESSION\par
AUTHORIZATION at the start of a SQL-session, the SQL Standard allows\par
implementors to decide whether to allow the SQL-session default\par
<AuthorizationID> to be changed at any other time. \par
      2. For DBMSs that allow the use of SET SESSION AUTHORIZATION at other\par
times, the SQL Standard allows implementors to define when exactly when the\par
SQL-session default <AuthorizationID> may also be changed. \par
\par
SQL does not include any CREATE CLUSTER, OPEN CLUSTER, ADD TO CLUSTER or DROP\par
CLUSTER statements. The method you'll use to access a Cluster with your DBMS\par
is thus non-standard because the SQL Standard requires implementors to define\par
what the physical aspects of a Cluster are, whether any Catalog can be part of\par
more than one Cluster at a time, how a Cluster comes into being, how it may be\par
accessed and how it may be destroyed. \par
\par
SQL does not include any CREATE CATALOG, OPEN CATALOG or DROP CATALOG\par
statements. The method you'll use to access a Catalog with your DBMS is thus\par
non-standard because the SQL Standard requires implementors to define how a\par
Catalog comes into being, how it may be accessed and how it may be destroyed.\par
\par
The total number of Views in INFORMATION_SCHEMA, and their exact definition,\par
is non-standard because the SQL Standard allows implementors to add additional\par
Views, as well as to add additional Columns to the Standard-defined Views, to\par
describe additional, implementation-defined features.\par
\par
Parsing/display: \par
\par
A newline character, or end-of-line marker, is non-standard because the SQL\par
Standard requires implementors to define which white space characters their\par
parsers will recognize as newline characters. \par
\par
The logical representation of the null value is non-standard because the SQL\par
Standard requires implementors to define the character used to display the\par
null value.\par
\par
Either a NULL is greater than all non-null values or a NULL is less than all\par
non-null values -- it's non-standard because the SQL Standard requires\par
implementors to define whether NULLs sort high or low.\par
\par
Names: \par
\par
An <SQL-server name> must be unique (for all Clusters) within an SQL-\par
environment, but is non-standard for two reasons: \par
      1. The SQL Standard requires implementors to define what constitutes a\par
valid <SQL-server name>. \par
      2. The SQL Standard requires implementors to define the Character set\par
that the characters of a <SQL-server name> belong to. \par
\par
An <AuthorizationID> is non-standard for four reasons: \par
      1. The SQL Standard requires implementors to define what constitutes a\par
valid <AuthorizationID>. \par
      2. The SQL Standard requires implementors to define their own method for\par
mapping <AuthorizationID>s to users. \par
      3. The SQL Standard requires implementors to define their own method for\par
creating an <AuthorizationID>. SQL does not include a CREATE AUTHORIZATIONID\par
statement. \par
      4. The SQL Standard requires implementors to define their own method for\par
dropping an <AuthorizationID>. SQL does not include a DROP AUTHORIZATIONID\par
statement. \par
\par
<Connection name>s are non-standard for two reasons: \par
      1. The SQL Standard requires implementors to define what constitutes a\par
valid <Connection name>. \par
      2. The SQL Standard requires implementors to define the Character set\par
that the characters of a <Connection name> belong to. \par
\par
A <Catalog name> is a <regular identifier> or <delimited identifier> that is\par
unique (for all Catalogs) within the Cluster it belongs to, but is non-\par
standard because the SQL Standard requires implementors to define all valid\par
<Catalog name>s. \par
\par
Defining <literal>s: \par
\par
A national <character string literal> belongs to a Character set which is the\par
same Character set used for NCHAR and NCHAR VARYING <data type>s but is non-\par
standard for two reasons: \par
      1. The SQL Standard requires implementors to define the Character set\par
that the characters of a national <character string literal> belong to. \par
      2. The SQL Standard requires implementors to define the character\par
repertoire for their national <character string literal> Character set. \par
 \par
The maximum size of a <time value>'s fractional seconds may not be less than 6\par
digits but is non-standard because the SQL Standard requires implementors to\par
define the maximum fractional seconds precision. \par
\par
The maximum length of a <time literal> may not be less than 15 characters but\par
is non-standard because the SQL Standard requires implementors to define the\par
maximum size of a <time value>'s fractional seconds precision. \par
\par
The allowable range for a <time value> must include, at a minimum, all times\par
from: TIME '00:00:00.0' to: TIME '23:59:61.999999' but the exact range of\par
valid values is non-standard because the SQL Standard requires implementors to\par
define the maximum size of a <time value>'s fractional seconds precision. \par
\par
The maximum length of a <timestamp literal> may not be less than 26 characters\par
but is non-standard because the SQL Standard requires implementors to define\par
the maximum size of a <time value>'s fractional seconds precision. \par
\par
The allowable range for a <timestamp value> must include, at a minimum, all\par
timestamps from: TIMESTAMP '0001-01-01 00:00:00.0' to: TIMESTAMP '9999-12-31\par
23:59:61.999999' but the exact range of valid values is non-standard because\par
the SQL Standard requires implementors to define the maximum size of a <time\par
value>'s fractional seconds precision. \par
\par
The maximum "start datetime" precision for an <interval qualifier> may not be\par
less tha~ 2 digits but is noomstandaru because the SQL Standaru requires\par
implementors to uefine tqe maximum leading precision. \par
\par
The maximum fractional seconds precision for an <interval qualifier>'s "start\par
datetimeR value or "end datetime"Dvalue of SECWND may not be less than 6\par
digits but is noomstandard because tqe SQL Standard requqres implementorol Privileges held on the Module by any other\par
<AuthorizationID> are also revoked.\par
      ## All SQL routines, Triggers, Views and Constraints that depend on the Module are dropped with a CASCADE drop behaviour.\par
\par
BEGIN ... END: compound statement\par
\par
Advance warning: BEGIN ... END has several optional clauses. We are going to\par
start with the simplest form, and examine the options in following sections.\par
\par
In its simplest form, BEGIN ... END in SQL serves the same purpose as\par
"begin...end" in Pascal or "\{...\}" in C. BEGIN ... END encloses a sequence of\par
statements which are part of the same syntactical unit: a compound statement.\par
The simplest required syntax is:\par
\par
BEGIN\par
   [ <SQL statement>; ... ]\par
END\par
\par
Here's a simple example:\par
   BEGIN\par
       INSERT INTO Table_1 VALUES (5);\par
       INSERT INTO Table_2 VALUES (6);\par
   END\par
\par
ATOMIC statements:\par
A slightly more complicated form of a compound statement has one extra optional clause: [NOT] ATOMIC. The required syntax is:\par
\par
BEGIN [ [ NOT ] ATOMIC ]    /* whether compound statement is atomic */\par
  [ <SQL statement>; ... ]\par
END\par
\par
If ATOMIC is specified, the compound statement may not contain COMMIT or\par
ROLLBACK. If you omit the clause, it defaults to NOT ATOMIC: the compound\par
statement may contain COMMIT or ROLLBACK. Here's an example:\par
\par
   BEGIN ATOMIC\par
      INSERT INTO Table_1 VALUES (5);\par
      INSERT INTO Table_2 VALUES (6);\par
   END\par
\par
We've already discussed the idea that transactions are atomic, and individual\par
SQL statements are atomic. Compound SQL statements can be atomic too, provided\par
that they are explicitly designated by the <keyword> ATOMIC. Thus, in the\par
above example, if the first INSERT statement succeeds but the second INSERT\par
statement fails, then the effects of the first INSERT is cancelled. It's as if\par
there was a savepoint at the beginning of the compound statement and a\par
ROLLBACK TO SAVEPOINT was executed when the second INSERT failed.\par
\par
Variables:\par
A slightly more complicated form of a compound statement has one more optional\par
clause: a variable declaration list. The required syntax is:\par
\par
BEGIN [ [ NOT ] ATOMIC ]\par
  [ <variable declaration>; ... ]     /* variable-declaration list */\par
  [ <SQL statement>; ... ]\par
END\par
\par
   <variable declaration> ::=\par
   DECLARE <SQL variable name> <data type> [ DEFAULT default value ]\par
\par
Here's an example:\par
\par
   BEGIN ATOMIC\par
     DECLARE v1 CHAR(5);                          /* variable declaration */\par
     DECLARE v2,v3,v4 SMALLINT;                   /* variable declaration */\par
     DECLARE v5 DATE DEFAULT DATE '1993-01-01';   /* variable declaration */\par
     SELECT * INTO v1,v2,v3,v4 FROM Table_1;      /* statement */\par
     INSERT INTO Table_2 VALUES (v1,v2,v3,v4,v5); /* statement */\par
   END\par
\par
** TRAP: Don't get confused by the similarity to a <Column definition>. A\par
variable definition can contain ONLY a <data type> and (optionally) a DEFAULT\par
clause. It cannot contain a <Domain name>, a <Constraint> or a COLLATE clause.\par
\par
In our example we defined five variables: v1, v2, v3, v4, v5. BEGIN ... END\par
defines a "local scope", which means that (a) these variable names have no\par
meaning outside the compound statement, (b) the values in these variables are\par
not saved when the compound statement ends and (c) the values in these\par
variables are not reset by execution of a ROLLBACK statement, because\par
variables are not part of the database.\par
\par
The example uses the first four variables as targets in a singleton SELECT\par
statement. It also uses all five variables as sources in an INSERT statement.\par
Variables can be used in all sorts of <value expression>s. Variables are\par
extremely useful for temporary storage, and it's a wonder that most SQL\par
implementations get along without them. The designers of SQL don't give us the\par
option of using variables for persistent storage: we're supposed to use Base\par
tables for that.\par
\par
Assignment statements:\par
Assignment statements begin with the <keyword> SET -- but don't call them "SET\par
statements", to avoid confusion with non-PSM statements that also begin with\par
SET. Assignment statements are syntactically similar to the SET clauses used\par
in UPDATE statements. Here is the required syntax:\par
\par
SET\par
   <target>     /* where the value goes to; usually a variable */\par
   =\par
   <source>     /* where the value comes from; an expression */\par
\par
In theory the <target> doesn't have to be a variable -- it could be a\par
parameter or a "host variable" -- but normal programs will take the form\par
"<variable> = <expression>". Here are some examples:\par
\par
   SET v1 = 5\par
\par
   SET v1 = (v2+7)/5\par
\par
   SET v1 = NULL\par
\par
   SET v1 = column_1\par
\par
Cursors:\par
A slightly more complicated form of a compound statement has one more optional\par
clause: a Cursor declaration list. The required syntax is:\par
\par
BEGIN [ [ NOT ] ATOMIC ]\par
  [ <variable declaration>; ... ]\par
  [ DECLARE CURSOR statement; ... ]      /* Cursor-declaration list */\par
  [ <SQL statement>; ... ]\par
END\par
\par
The mechanics of Cursors are the same for PSM as they are for embedded SQL and for SQL/CLI. Here's an example:\par
\par
   BEGIN\par
     DECLARE v1 SMALLINT;             /* variable-declaration */\par
     DECLARE cc CURSOR FOR\par
        SELECT column_1 FROM Table_1; /* Cursor-declaration */\par
     OPEN cc;                         /* statement */\par
     FETCH cc INTO v1;                /* statement */\par
     CLOSE cc;                        /* statement */\par
     INSERT INTO Table_2 VALUES (v1); /* statement */\par
   END\par
\par
Objects that you declare in a compound statement have "local scope", so the\par
<Cursor name> in this example -- cc -- can only be  used by SQL statements\par
within the BEGIN ... END. The example could be replaced with this SQL statement:\par
\par
    INSERT INTO Table_2 SELECT column1 FROM Table_1;\par
\par
if there is only one row in TABLE_1.\par
\par
Conditions:\par
A slightly more complicated form of a compound statement changes the optional\par
variable declaration clause: instead of a variable declaration list, BEGIN ...\par
END actually allows a variable or condition declaration list, so that you can\par
declare conditions as well as variables. The required syntax is:\par
\par
BEGIN [ [ NOT ] ATOMIC ]\par
  [ <variable | condition declaration>; ... ] /* variable-or-condition\par
declaration list */\par
  [ DECLARE CURSOR statement; ... ]\par
  [ <SQL statement>; ... ]\par
END\par
\par
   <condition declaration> ::=\par
      DECLARE <condition name> CONDITION [ FOR <sqlstate value> ]\par
\par
Quick review: An SQLSTATE value is a 5-character status code string. Upon\par
completion of any SQL statement, there will be a status code in SQLSTATE,\par
which is the main diagnostic field. Typical values are '01006'\par
(warning-privilege not revoked), '22012' (data exception-division by zero),\par
'42000' (syntax error or access violation). You'll find a complete list of\par
SQLSTATE values in our chapter on SQL/CLI diagnostics.\par
\par
Here's an example of the latest form of BEGIN ... END:\par
\par
   BEGIN ATOMIC\par
     DECLARE v1 SMALLINT;                          /* variable-declaration */\par
     DECLARE warning_revoke CONDITION FOR '01006'; /* condition declaration */\par
     DECLARE divide_by_zero CONDITION FOR '22012'; /* condition declaration */\par
     DECLARE syntax_error CONDITION FOR '42000';   /* condition declaration */\par
     DECLARE cc CURSOR FOR\par
        SELECT column_1 FROM Table_1;              /* Cursor-declaration */\par
     OPEN cc;                                      /* statement */\par
     FETCH cc INTO v1;                             /* statement */\par
     CLOSE cc;                                     /* statement */\par
     INSERT INTO Table_2 VALUES (v1);              /* statement */\par
     INSERT INTO Table_1 VALUES (0);               /* statement */\par
     INSERT INTO Table_2 VALUES (1);               /* statement */\par
   END\par
\par
In this example, we have simply given condition names to three of the possible SQLSTATE values.\par
\par
Handlers:\par
A slightly more complicated form of a compound statement adds another optional\par
clause: a handler declaration list. The required syntax is:\par
\par
BEGIN [ [ NOT ] ATOMIC ]\par
  [ <variable | condition declaration>; ... ]\par
  [ DECLARE CURSOR statement; ... ]\par
  [ <handler declaration>; ...]               /* handler-declaration list */\par
  [ <SQL statement>; ... ]\par
END\par
\par
  <handler declaration> ::=\par
  DECLARE <handler type> HANDLER FOR <condition value list> <handler action>\par
\par
     <handler type> ::= \{CONTINUE | EXIT | UNDO \}\par
\par
     <handler action> ::= <SQL statement>\par
\par
     <condition value list> ::= <condition value> [ \{,<condition value>\}... ]\par
\par
     <condition value> ::=\par
     <sqlstate value>| <condition name>| SQLEXCEPTION | SQLWARNING | NOT FOUND\par
\par
The following example contains three handlers. The first is for an SQLSTATE\par
value, the second is for a condition name and the third is for any warning\par
(i.e.: any SQLSTATE in class '01').\par
\par
  BEGIN\par
    DECLARE constraint_error CONDITION FOR '23000';/* condition declaration */\par
    DECLARE v1 CHAR(5) DEFAULT 'Okay!';            /* variable declaration */\par
    DECLARE CONTINUE HANDLER FOR '22003'           /* handler declaration */\par
       SET v1 = 'Ovflw';\par
    DECLARE CONTINUE HANDLER FOR constraint_error  /* handler declaration */\par
       SET v1 = 'c-err';\par
    DECLARE CONTINUE HANDLER FOR SQLWARNING        /* handler declaration */\par
       SET v1 = '?????';\par
    INSERT INTO Table_1 VALUES (99999);            /* statement */\par
    INSERT INTO Table_2 VALUES (v1);               /* statement */\par
  END\par
\par
To see the effect of these handlers, consider what will happen with the SQL statement:\par
\par
   INSERT INTO Table_1 VALUES (99999);\par
\par
If this SQL statement fails due to overflow, then variable v1 gets 'Ovflw'; if\par
it fails due to an integrity Constraint violation, then variable v1 gets\par
'c-err'; if it succeeds but there is some warning, then variable v1 gets\par
'?????'. But, regardless, play continues because all the handlers are CONTINUE\par
handlers. So the second INSERT statement will put in one of the values\par
'Ovflw', 'c-err', '?????' or 'Okay!' ('Okay!' is the default value for v1 so\par
this is what goes in if the result of the first INSERT is success with no warnings).\par
\par
What if exception '42000' happens? That would be an "unhandled exception"\par
since we did not define a handler for exception '42000'. The result would be\par
that the second INSERT is not attempted -- the whole compound statement fails.\par
\par
The following chart compares the exception-handling features of embedded SQL, the CLI and the PSM.\par
\par
                                EMBEDDED SQL       CLI   PSM\par
method of declaration           EXEC SQL WHENEVER  none  handler-declaration\par
what happens                    GOTO               N/A   any SQL statement\par
handles SQLNOTFOUND?            yes                N/A   yes\par
handles SQLERROR?               yes                N/A   yes\par
handles SQLWARNING?             yes                N/A   yes\par
handles specific status codes?  no                 N/A   yes\par
\par
Among the SQL statements that a handler can execute are two new special ones: the SIGNAL statement and the RESIGNAL statement. These SQL statements affect the diagnostics area.\par
\par
Labels:\par
We're still not done with the BEGIN ... END statement. The final form of a\par
compound statement adds two more optional clauses: a beginning label and an\par
end label. The required syntax for a compound statement is:\par
\par
[ <beginning_label>: ]\par
BEGIN [ [ NOT ] ATOMIC ]\par
  [ <variable | condition declaration>; ... ]\par
  [ DECLARE CURSOR statement; ... ]\par
  [ <handler declaration>; ...]\par
  [ <SQL statement>; ... ]\par
END [ <end_label> ]\par
\par
  <beginning_label> ::= <identifier>\par
\par
  <end_label> ::= <identifier>\par
\par
If you add labels to your compound statement, they should be equivalent (if\par
both are specified). Labels are useful as referents for various control\par
statements, which we will discuss later. Here's an example:\par
\par
  full_blown_example:                      /* beginning_label */\par
  BEGIN ATOMIC                             /* compound statement is atomic */\par
    DECLARE v1 INTEGER DEFAULT 0;          /* variable declaration */\par
    DECLARE c1 CONDITION FOR '01000';      /* condition declaration */\par
    DECLARE CONTINUE HANDLER FOR SQLERROR  /* handler declaration */\par
      SET v1 = 1;                          /* assignment statement */\par
    INSERT INTO Table_1 VALUES (0);        /* statement */\par
    INSERT INTO Table_2 VALUES (v1);       /* statement */\par
  END full_blown_example                   /* end_label */\par
\par
This is our final version of BEGIN .. END. It looks quite imposing. That's\par
because MOST SYNTACTIC ITEMS ARE LOCAL TO THE COMPOUND STATEMENT. Therefore\par
everything is within the compound statement and, by contrast, the Module definition is trivial.\par
\par
SIGNAL statement\par
\par
The SIGNAL statement is used to clear the diagnostics area. The required syntax for the SIGNAL statement is:\par
\par
SIGNAL <condition name or sqlstate value>\par
   SET <signal information item list>\par
\par
   <signal information item list> ::=\par
   <signal information item> [ \{,<signal information item>\}... ]\par
\par
      <signal information item> ::=\par
      <condition information item name> = <simple value specification>\par
\par
The SIGNAL statement clears every record in the diagnostics area. The end\par
result is a record containing the passed condition name or sqlstate value. If\par
you include the optional SET clause, your DBMS effectively executes:\par
\par
   RESIGNAL <signal information item list>;\par
\par
Note: You'll find the list of <condition information item name>s in our chapter on embedded SQL -- see the GET DIAGNOSTICS statement.\par
\par
RESIGNAL statement\par
\par
The RESIGNAL statement is used to pass conditions on to another handler. The required syntax for the RESIGNAL statement is:\par
\par
RESIGNAL [ <condition name or sqlstate value> ]\par
   SET <signal information item list>\par
\par
The RESIGNAL statement passes the given exception "up the line" to the next\par
appropriate handler (since compound statements may be embedded in compound\par
statements, this next appropriate handler will usually be in some outside\par
context). The current diagnostics area remains unchanged, but -- if the\par
optional [<condition name or sqlstate value>] clause is specified -- there\par
will be one more diagnostics record, containing this new value. If you include\par
the optional SET clause, the <condition information item name> field in the\par
first condition area in the diagnostics area is changed to the value indicated.\par
\par
Program Control\par
\par
Essential SQL has almost nothing that can control the program flow (except for\par
the CALL and RETURN statements which are associated with SQL routines). By\par
contrast, a DBMS with PSM support will allow eight control statements. Of\par
these, seven are similar to statements which appear in other languages. The\par
eighth, FOR, depends on Objects which are unique to the SQL environment.\par
Here's a list of these statements:\par
      ## CASE -- Switch depending on condition.\par
      ## IF -- If (condition) do.\par
      ## ITERATE -- Restart loop.\par
      ## LOOP -- Do statement(s) repeatedly.\par
      ## LEAVE -- Break out of a loop or block.\par
      ## WHILE -- Repeat statement(s) as long as condition is true.\par
      ## REPEAT -- Repeat statement(s) until condition is true.\par
      ## FOR -- Cursor-based FETCH loop.\par
\par
CASE statement\par
\par
The CASE statement is useful for switching between possible execution paths.\par
There are two forms -- one contains search conditions, the other contains\par
value expressions. The required syntax for the CASE statement is:\par
\par
searched CASE statement ::=\par
CASE\par
  WHEN <search condition> THEN <statement>(s)\par
  [ WHEN <search condition> THEN <statement>(s) ... ]\par
  [ ELSE <statement>(s) ]\par
END CASE\par
\par
simple CASE statement ::=\par
CASE <case value>\par
   WHEN <when value> THEN <statement>(s)\par
   [ WHEN <when value> THEN <statement>(s) ... ]\par
   [ ELSE <statement>(s) ]\par
END CASE\par
\par
A "simple CASE statement" is merely a shorthand, and may be replaced by a\par
"searched CASE statement" which has the form: "CASE WHEN <when value> = <case\par
value> ...". Thus, the following examples, showing a searched CASE statement\par
on the left and a simple CASE statement on the right, are exactly equivalent:\par
\par
   CASE                                CASE parameter_value\par
     WHEN parameter_value = 15           WHEN 15\par
      THEN INSERT INTO t VALUES (15);     THEN INSERT INTO t VALUES (15);\par
     WHEN parameter_value = 17           WHEN 17\par
      THEN INSERT INTO t VALUES (17);     THEN INSERT INTO t VALUES (17);\par
     ELSE INSERT INTO t VALUES (0);      ELSE INSERT INTO t VALUES (0);\par
   END CASE                            END CASE\par
\par
When executing a CASE statement, the DBMS goes through the WHEN clauses from\par
top to bottom, looking for a TRUE condition. If it finds one, it executes the\par
statement(s) after THEN, and the CASE terminates. If it finds none, it\par
executes the statements(s) after ELSE -- or, if there is no ELSE, returns this\par
SQLSTATE error: 20000 "case not found for case statement". For the above\par
example, then, if the value of parameter_value is 5, then the DBMS will\par
execute this SQL statement:\par
\par
   INSERT INTO t VALUES (0);\par
\par
** TRAP: The syntax for the CASE statement is somewhat different from the\par
syntax for the SQL CASE expression (see our chapter on simple search\par
conditions). In particular, the CASE statement has no equivalent for the ELSE\par
NULL clause, and the terminator is END CASE rather than END.\par
\par
IF statement\par
\par
The IF statement is useful for simple "if (x) then (do this)" situations. The required syntax for the IF statement is:\par
\par
IF <search condition> THEN <SQL statement>(s)\par
   ELSEIF <search condition> THEN <SQL statement>(s)\par
   ELSE <SQL statement>(s)\par
END IF\par
\par
Here's an example:\par
\par
  IF\par
   5=5 THEN UPDATE Table_1 SET column_1 = column_1 + 1;\par
  END IF\par
\par
In this example, the search condition is TRUE, so the UPDATE statement will be\par
executed. If the search condition had been FALSE or UNKNOWN, then the UPDATE statement would not have been executed.\par
\par
LOOP statement\par
\par
The LOOP statement is useful for repeated execution of SQL statements. The required syntax for the LOOP statement is:\par
\par
[ <beginning_label>: ]\par
LOOP\par
   <SQL statement>(s)\par
END LOOP [ <end_label> ]\par
\par
The SQL statements between LOOP and END LOOP are repeated until the loop\par
finishes. The <beginning_label> and the <end_label> must be equivalent, if you\par
use them both. Here's an example:\par
\par
   LOOP\par
      SET x = x + 1;\par
   END LOOP\par
\par
This example shows an infinite loop. The usual way to exit from a loop is with the LEAVE statement.\par
\par
LEAVE statement\par
\par
The LEAVE statement is useful for exiting a block or for exiting a loop. The required syntax for the LEAVE statement is:\par
\par
LEAVE <statement_label>\par
\par
Here's an example:\par
\par
   beginning_label:\par
   LOOP\par
     SET x = x + 1;\par
     IF x > 1000 THEN LEAVE beginning_label; END IF;\par
   END LOOP beginning_label\par
\par
In this example, the loop will be exited once the value of x passes 1000.\par
\par
WHILE statement\par
\par
The WHILE statement is useful for repeated execution of SQL statements, with a\par
built-in equivalent to the LEAVE statement. The required syntax for the WHILE statement is:\par
\par
[ <beginning_label>: ]\par
WHILE <search condition> DO\par
   <SQL statement>(s)\par
END WHILE [ <end_label> ]\par
\par
As long as the <search condition> is TRUE, the SQL statements between WHILE\par
and END WHILE are repeatedly executed. The <beginning_label> and the\par
<end_label> must be equivalent, if you use them both. Here's an example:\par
\par
   WHILE x <= 1000 DO\par
      SET x = x + 1;\par
   END WHILE\par
\par
This example will loop, incrementing x, until "x <= 1000" is either FALSE or\par
UNKNOWN. If the <search condition> is FALSE or UNKNOWN when the loop begins, then nothing happens.\par
\par
REPEAT statement\par
\par
The REPEAT statement is much like the WHILE statement, except that the\par
condition is tested after the execution of the SQL statement(s). The required syntax for the REPEAT statement is:\par
\par
[ <beginning_label>: ]\par
REPEAT\par
   <SQL statement>(s) UNTIL <search condition>\par
END REPEAT [ <end_label> ]\par
\par
As long as the <search condition> is FALSE or UNKNOWN, the SQL statements\par
between REPEAT and END REPEAT are repeatedly executed. The <beginning_label>\par
and the <end_label> must be equivalent, if you use them both. Here's an example:\par
\par
   REPEAT\par
      DELETE FROM Table_1 WHERE column_1 = x;\par
      SET x = x + 1;\par
      UNTIL x > 5\par
   END REPEAT\par
\par
In this example, the UPDATE statement will be repeated until x is greater than 5 -- that is, the loop will repeat until after theIf a sensitive or asensitive holdable-Cursor is held open for a subsequent\par
transaction, then whether any significant changes made to SQL-data (by this or\par
any subsequent transaction in which the Cursor is held open) will be visible\par
through that Cursor in the subsequent transaction is non-standard because the\par
SQL Standard requires implementors to define how they will handle this\par
situation.\par
\par
Whether a DBMS is able to disallow significant changes that would not be\par
visible through a currently open Cursor is non-standard because the SQL\par
Standard requires implementors to define their actions in such situations.\par
\par
The extent to which a DBMS may disallow independent changes that are not\par
significant is non-standard because the SQL Standard requires implementors to\par
define their actions in such situations.\par
\par
The status of any open Cursors in any SQL-client Module associated with the\par
current transaction that were opened by that transaction before the\par
establishment of a savepoint to which a ROLLBACK is executed is non-standard\par
because the SQL Standard requires implementors to define their actions in such\par
situations.\par
\par
Diagnostics:\par
\par
The actual length of variable-length character items in the diagnostics area\par
has to be at least 128 octets but is otherwise non-standard because the SQL\par
Standard requires implementors to define the actual length.\par
\par
The character string value set for the diagnostic area's CLASS_ORIGIN and\par
SUBCLASS_ORIGIN fields may not be 'ISO 9075' but is otherwise non-standard\par
because the SQL Standard requires implementors to define their own values for\par
any non-standard errors.\par
\par
The character string value set for the diagnostic area's MESSAGE_TEXT field is\par
non-standard because the SQL Standard requires implementors to define their\par
own values for this field.\par
\par
Any negative values set for the diagnostic area's COMMAND_FUNCTION_CODE field\par
indicate implementation-defined SQL-statements and are thus non-standard\par
because the SQL Standard requires implementors to define their own values for\par
this field if they support any non-standard SQL statements.\par
\par
The method of flagging nonconforming SQL language or processing of conforming\par
SQL language is implementation-defined, as is the list of additional\par
<keyword>s that may be required by the DBMS.\par
\par
The full set of known functional dependencies is non-standard because the SQL\par
Standard allows implementors to define additional functional dependencies if\par
they choose.\par
\par
Implementation-dependent features\par
\par
The SQL Standard requires a SQL DBMS to define how it will handle each of\par
these features. The decision does not have to be documented.\par
\par
If more than one condition could have occurred when executing an SQL\par
statement, it is implementation-dependent whether the DBMS will make\par
diagnostic information pertaining to more than one condition available.\par
\par
The treatment of language that does not conform to the SQL Standard is\par
implementation-dependent.\par
\par
If evaluation of the inessential parts of an expression or search condition\par
would cause an exception condition to be raised, it is\par
implementation-dependent whether or not that condition is raised.\par
\par
The actual size of the diagnostics area is implementation-dependent if you\par
don't specify the size yourself.\par
\par
If DECLARE CURSOR does not include an ORDER BY clause, or includes an ORDER BY\par
clause that doesn't specify the order of the  rows completely, then the rows\par
of the result Table have an order that is defined only to the extent that the\par
ORDER BY clause specifies and is otherwise implementation-dependent.\par
\par
The effect on the position and state of an open Cursor when an error occurs\par
during the execution of an SQL statement that identifies the Cursor is\par
implementation-dependent.\par
\par
If an asensitive Cursor is open and a change is made to SQL-data from within\par
the same transaction other than through that Cursor, then whether that change\par
will be visible through that Cursor before it is closed is\par
implementation-dependent.\par
\par
The mapping of <AuthorizationID>s to operating system users is\par
implementation-dependent.\par
\par
When an SQL-session is initiated, the current <authorization  identifier> for\par
the SQL-session is determined in an implementation-dependent manner, unless\par
the session is initiated using a <connect statement>.\par
\par
A unique implementation-dependent SQL-session identifier is associated with\par
each SQL-session.\par
\par
The SQL-client <Module name> of the SQL-client Module that is effectively\par
materialized on an SQL-server is implementation-dependent.\par
\par
Diagnostic information is passed to the diagnostics area in an application in\par
an implementation-dependent manner.\par
\par
The effect on diagnostic information of incompatibilities between the\par
character repertoires supported by the SQL-client and SQL-server environments\par
is implementation-dependent.\par
\par
The time of evaluation of the CURRENT_DATE, CURRENT_TIME and CURRENT_TIMESTAMP\par
functions during the execution of an SQL statement is\par
implementation-dependent.\par
\par
The start datetime used for converting intervals to scalars for subtraction\par
purposes is implementation-dependent.\par
\par
The names of the Columns of a <row value constructor> that specifies a <row\par
value constructor list> are implementation-dependent.\par
\par
When a Column is not named by an AS clause and is not derived from a single\par
Column reference, then the name of the Column is implementation-dependent.\par
\par
If a <simple Table> is neither a <query specification> nor an <explicit\par
Table>, then the name of each Column of the <simple Table> is\par
implementation-dependent.\par
\par
If a <non-join query term> is not a <non-join query primary> and the <Column\par
name> of the corresponding Columns of both Tables participating in the\par
<non-join query term> are not the same, then the result Column has an\par
implementation-dependent <Column name>.\par
\par
If a <non-join query expression> is not a <non-join query term> and the\par
<Column name> of the corresponding Columns of both Tables participating in the\par
<non-join query expression> are not the same, then the result Column has an\par
implementation-dependent <Column name>.\par
\par
When the operations MAX, MIN, DISTINCT, and references to a grouping Column\par
refer to a variable-length character string or a variable-length bit string,\par
the specific value selected from the set of equal values is\par
implementation-dependent.\par
\par
The specific Character set chosen for the result of an aggregation is\par
implementation-dependent, but must be the Character set of one of the <data\par
type>s being aggregated.\par
\par
The <Constraint name> of a Constraint that does not specify a <Constraint\par
name> is implementation-dependent.\par
\par
The specific value to use for cascading foreign keys among various values that\par
are not distinct is implementation-dependent.\par
\par
The Collation of characters for which a Collation is not otherwise specified\par
is implementation-dependent.\par
\par
If an error occurs during assignment of a value to a target during the\par
execution of a singleton SELECT, the values of targets other than status\par
parameters are implementation-dependent.\par
\par
If the cardinality of a singleton SELECT is greater than one, it is\par
implementation-dependent whether or not values are assigned to the SELECT's\par
targets.\par
\par
For Cursor operations, if an exception condition occurs during the assignment\par
of a value to a target, the values of all targets are implementation-dependent\par
and the Cursor remains positioned on the current row.\par
\par
It is implementation-dependent whether a Cursor remains positioned on the\par
current row when an exception condition is raised during the derivation of any\par
derived Column.\par
\par
If <number of conditions> for the diagnostics area is not specified in a SET\par
TRANSACTION statement, then an implementation-dependent value, not less than\par
one, is the default.\par
\par
The value of the diagnostic area's ROW_COUNT following the execution of an\par
SQL-statement that does not directly result in the execution of a <delete\par
statement: searched>, an <insert statement> or an <update statement: searched>\par
is implementation-dependent.\par
\page\par
APPENDIX D -- Incompatibilities with SQL-92\par
\par
SQL3 is compatible with the former version of the Standard (SQL-92) except in\par
the following cases.\par
\par
## In SQL-92, a <parameter declaration list> had a deprecated alternative\par
"<parameter declaration> . . . " (i.e.: a parameter list not surrounded by\par
parentheses and with the component parameter declarations not separated by\par
commas). SQL3 does not contain this option.\par
\par
## In SQL-92, if one or more rows deleted or updated through some Cursor are\par
later updated or deleted through some other Cursor by a <delete statement:\par
searched>, by an <update statement: searched> or by some <update rule> or\par
<delete rule> of some <referential constraint definition>, no exception\par
condition is raised and no completion condition (other than successful\par
completion) is raised. In SQL3, a completion condition is raised:\par
warning-cursor operation conflict.\par
\par
## In SQL-92, there were two <status parameter>s provided: the deprecated\par
SQLCODE and SQLSTATE. SQL3 does not support the SQLCODE <status parameter> and\par
"SQLCODE" is no longer a reserved <keyword>.\par
\par
## SQL-92 allowed you to omit the semicolon at the end of <module contents>;\par
listing this as a deprecated feature. In SQL3, the semicolon at the end of\par
<module contents> is mandatory.\par
\par
## In SQL-92, it was possible for applications to define new Character sets,\par
Collations and Translations. In SQL3, those capabilities are limited to\par
defining new Character sets, Collations and Translations that are identical to\par
existing Character sets, Collations and Translations, respectively, except for\par
their names and other minor details.\par
\par
## In SQL-92, it was possible for applications to specify the Character set\par
associated with an <identifier> using: "_<Character set specification>". SQL3\par
no longer supports that capability.\par
\par
## In SQL-92, it was possible to sort a Cursor by a Column's ordinal position\par
in the Cursor. SQL3 no longer supports that capability.\par
\par
## SQL3 contains more reserved <keyword>s than SQL-92. The new reserved\par
<keyword>s are:\par
ABS\par
ACTION\par
AFTER\par
AGGREGATE\par
ALIAS\par
ARRAY\par
BEFORE\par
BINARY\par
BLOB\par
BOOLEAN\par
BREADTH\par
CALL\par
CARDINALITY\par
CLOB\par
COMPLETION\par
CONCATENATE\par
CUBE\par
CURRENT_PATH\par
CYCLE\par
DATA\par
DEPTH\par
DEREF\par
DESTROY\par
DICTIONARY\par
EACH\par
EQUALS\par
EVERY\par
FACTOR\par
FREE\par
GENERAL\par
GROUPING\par
HOLD\par
HOST\par
IGNORE\par
INITIALIZE\par
ITERATE\par
LESS\par
LARGE\par
LIMIT\par
LOCATOR\par
MOD\par
MODIFIES\par
MODIFY\par
NCLOB\par
NEW\par
NO\par
NONE\par
OBJECT\par
OFF\par
OLD\par
OPERATION\par
OPERATOR\par
ORDINALITY\par
OVERLAY\par
PARAMETER\par
PARAMETERS\par
PATH\par
PREORDER\par
READS\par
RECURSIVE\par
REF\par
REFERENCING\par
REPLACE\par
RESULT\par
RETURN\par
RETURNS\par
ROLLUP\par
ROLE\par
ROUTINE\par
ROW\par
SAVEPOINT\par
SEARCH\par
SENSITIVE\par
SEQUENCE\par
SESSION\par
SETS\par
SIMILAR\par
SPACE\par
SPECIFIC\par
SPECIFICTYPE\par
SQLEXCEPTION\par
SQLWARNING\par
START\par
STATE\par
STRUCTURE\par
SUBLIST\par
SYMBOL\par
TERM\par
TERMINATE\par
THE\par
TREAT\par
TRIGGER\par
TYPE\par
UNDER\par
VARIABLE\par
WITHOUT\par
\page\par
APPENDIX E -- SQL Web Sites\par
\par
You will get millions of hits if you submit the keyword SQL to any Internet\par
search engine. You will get only 12 hits from this list. But they all have one\par
interesting common feature: FREE STUFF. Our list of SQL web sites includes:\par
     ## Private companies which produce SQL databases or SQL-related programs,\par
and which allow downloads of real working programs.\par
     ## Both government and private bodies which produce SQL-related\par
standards.\par
     ## Sites which offer timely and real SQL news.\par
\par
Our selection is primarily of English-speaking sites. As URLs change, and as\par
new sites match our criteria, we will update a copy of this list at our own\par
web site: \par
   {\field{\*\fldinst{HYPERLINK "http://ourworld.compuserve.com/homepages/OCELOTSQL/sites.htm"}}{\fldrslt{\ul\cf1 http://ourworld.compuserve.com/homepages/OCELOTSQL/sites.htm}}}\f1\fs21\par
\par
So probably your best way to keep up-to-date is to add our web site to your\par
favourite places, and click links from there.\par
\par
Here's the list:\par
\par
Beagle SQL\par
{\field{\*\fldinst{HYPERLINK "www.beaglesql.com"}}{\fldrslt{\ul\cf1 www.beaglesql.com}}}\f1\fs21\par
  Strictly a work in progress. Linux oriented.\par
\par
Gnu SQL\par
{\field{\*\fldinst{HYPERLINK "www.ispras.ru/~kml/gss"}}{\fldrslt{\ul\cf1 www.ispras.ru/~kml/gss}}}\f1\fs21\par
  Alpha. The usual gnu software license.\par
\par
Intelligent Enterprise Journal\par
{\field{\*\fldinst{HYPERLINK "www.intelligententerprise.com"}}{\fldrslt{\ul\cf1 www.intelligententerprise.com}}}\f1\fs21\par
  An online regular database magazine.\par
\par
ISO\par
{\field{\*\fldinst{HYPERLINK "ftp://jerry.ece.umassd.edu"}}{\fldrslt{\ul\cf1 ftp://jerry.ece.umassd.edu}}}\f1\fs21\par
  This is the archive site for ISO standards committee minutes and memoranda.\par
\par
Microsoft\par
{\field{\*\fldinst{HYPERLINK "www.microsoft.com/msdn"}}{\fldrslt{\ul\cf1 www.microsoft.com/msdn}}}\f1\fs21\par
  You can get the ODBC manual from here, as a .hlp file.\par
\par
miniSQL\par
{\field{\*\fldinst{HYPERLINK "www.hughes.com.au"}}{\fldrslt{\ul\cf1 www.hughes.com.au}}}\f1\fs21\par
  A Unix-oriented SQL-89 implementation.\par
\par
NIST\par
speckle.ncsl.nist.gov/~ftp/sql-testing\par
  A large group of SQL conformance tests (C source code). Somewhat dated.\par
\par
mySQL\par
{\field{\*\fldinst{HYPERLINK "www.tcx.se"}}{\fldrslt{\ul\cf1 www.tcx.se}}}\f1\fs21\par
  Another Unix-oriented SQL-89 implementation.\par
\par
Ocelot\par
ourworld.compuserve.com/homepages/OCELOTSQL\par
  Any errata for this book, plus updated copy of this list, plus downloads.\par
\par
Oracle\par
{\field{\*\fldinst{HYPERLINK "www.oracle.com"}}{\fldrslt{\ul\cf1 www.oracle.com}}}\f1\fs21\par
  Apparently you can download 30-day free trials (we didn't try).\par
\par
Postresql\par
{\field{\*\fldinst{HYPERLINK "www.postgresql.org/index.htm"}}{\fldrslt{\ul\cf1 www.postgresql.org/index.htm}}}\f1\fs21\par
  One of the few "free" SQL implementations that supports UDTs.\par
\par
Sun\par
{\field{\*\fldinst{HYPERLINK "www.sun.com/products/jdbc"}}{\fldrslt{\ul\cf1 www.sun.com/products/jdbc}}}\f1\fs21\par
  Get a copy of the test suite for the JDBC here.\par
\par
Unicode\par
{\field{\*\fldinst{HYPERLINK "www.unicode.org"}}{\fldrslt{\ul\cf1 www.unicode.org}}}\f1\fs21\par
  Look for "code charts".\par
\par
Yard\par
{\field{\*\fldinst{HYPERLINK "www.yard.de"}}{\fldrslt{\ul\cf1 www.yard.de}}}\f1\fs21\par
  "Yard SQL" is free for educational institutions.\par
\page\par
APPENDIX F -- Glossary\par
\par
The entries in this glossary include the computer-related words, names,\par
acronyms, abbreviations, SQL keywords and official terms used in this book, as\par
well as those that are common in the SQL/database industry. Each entry is\par
sorted in ascending ASCII order and may contain one or all of the following:\par
      ## a "see" reference to a preferred term;\par
      ## a "see also" reference to related or near-synonymous terms;\par
      ## a context indicator, e.g.: "ODBC term"; important because different\par
vocabularies are used in different circles.\par
\par
Glossary Entries\par
\par
  \par
SQL special character; used as a delimiter. Standard name: "space".\par
\par
!\par
Non-standard special character. Usual name: "exclamation mark".\par
\par
!=\par
Non-standard special character. This symbol means "not equal" in C and Oracle\par
programs, but has no meaning in Standard SQL. See also: <>.\par
\par
#\par
Non-standard special character. Usual name: "number sign". Also called:\par
octothorpe, hash sign.\par
\par
$\par
Non-standard special character. Usual name: "dollar sign".\par
\par
@\par
Non-standard special character. Usual name: "commercial at sign".\par
\par
"\par
SQL special character; used to surround a delimited identifier. Standard name:\par
"double quote mark". Also called (in Unicode): quotation mark.\par
\par
%\par
SQL special character; used to specify a LIKE pattern. Standard name: "percent\par
sign".\par
\par
&\par
SQL special character; used only in MUMPS programs. Standard name:\par
"ampersand".\par
\par
'\par
SQL special character; used to surround a character string literal. Standard\par
name: "quote mark". Also called (in Unicode): apostrophe, single quote.\par
\par
(\par
SQL special character; used to mark the start of a list. Standard name: "left\par
parenthesis".\par
\par
)\par
SQL special character; used to mark the end of a list. Standard name: "right\par
parenthesis".\par
\par
*\par
SQL special character. Standard name: "asterisk".\par
[1] In arithmetic, the multiply operator.\par
[2] After SELECT, a shorthand for: all columns.\par
\par
+\par
SQL special character; the arithmetic add operator or unary plus operator.\par
Standard name: "plus sign".\par
\par
,\par
SQL special character; used to separate items in a list. Standard name:\par
"comma".\par
\par
-\par
SQL special character; the arithmetic subtract operator or unary minus\par
operator. Standard name: "minus sign". Also called (in Unicode): hyphen-minus.\par
\par
.\par
SQL special character; used to separate parts of a name. Standard name:\par
"period". Also called (in Unicode): full stop.\par
\par
...\par
Non-standard special character. Usual name: "ellipsis".\par
[1] This symbol is not used in Standard SQL, but in BNF descriptions, an\par
ellipsis indicates a repeatable portion of syntax. See also: BNF.\par
[2] In the text of this book, we frequently use an ellipsis to indicate that\par
we have omitted some details in an example for the sake of brevity.\par
\par
/\par
SQL special character; the arithmetic divide operator. Standard name:\par
"solidus". Also called: division sign, slash.\par
\par
/*\par
SQL token; indicates a comment. The use of /* comments */ is new in SQL3. See\par
also: BRACKETED COMMENTS.\par
\par
:\par
SQL special character; prefaces a host variable or parameter. Standard name:\par
"colon".\par
\par
;\par
SQL special character; terminates an SQL statement. Standard name:\par
"semicolon".\par
\par
<\par
SQL special character; the "less than" operator.\par
\par
<=\par
SQL "less than or equals" operator.\par
\par
<>\par
SQL "not equals" operator.\par
\par
=\par
SQL special character; the "equals" operator.\par
\par
>\par
SQL special character; the "greater than" operator.\par
\par
>=\par
SQL "greater than or equals" operator.\par
\par
?\par
SQL special character; the parameter marker. Standard name: "question mark".\par
\par
A\par
\par
ABANDONED\par
An abandoned Privilege is derived from a Privilege that no longer exists. For\par
example: Sam grants to Joe; Joe grants to Sally; Sam revokes from Joe; now\par
Sally's Privilege is abandoned. For the same sort of reason (specifically loss\par
of SELECT Privilege) there may also be "abandoned Views".\par
\par
ABS\par
An SQL3 keyword. The ABS function returns the absolute value of a number or an\par
interval. Absolute values measure magnitude. Therefore they are always\par
positive.\par
\par
ABSOLUTE\par
[1] An SQL Standard term. An absolute number is a base-1 number, so "FETCH ...\par
ABSOLUTE 1" gets the first row in a result set. Compare: RELATIVE.\par
\par
ABSTRACT\par
Without reference to equivalents in the material world.\par
\par
ABSTRACT DATA TYPE\par
An Object/Relational term. Obsolete. Abbreviation: ADT. A type of UDT which is\par
not instantiable.\par
\par
ACCENTED LETTER\par
An alphabetic character with a mark above it (acute or macron or breve or\par
circumflex or grave or tilde or diaeresis) or below it (cedilla or ogonek) or\par
through it (stroke). An accented letter is not a simple Latin letter.\par
\par
ACCESS\par
[1] Retrieval of a value from a field.\par
[2] Opening a file.\par
[3] Connecting.\par
[4] Microsoft DBMS with some SQL-like features.\par
\par
ACCESS ERROR\par
Error ("exception condition") returned due to violation of an access rule,\par
usually because appropriate Privileges are missing.\par
\par
ACCESS MODE\par
(Of a transaction) One of: READ-ONLY or READ-WRITE.\par
\par
ACCESS PLAN\par
[1] The sequence of steps that a DBMS optimizer chooses for a selection. For\par
example: find rows of table#1 within index, then find rows of table#2 within\par
index, then sort/merge the matchlists. Sometimes the access plan is shown by\par
the non-standard EXPLAIN command. In usual practice, the access plan is not\par
executable code. Also known as "access path".\par
[2] An ODBC term. A plan for execution of any SQL statement, equivalent to a\par
compiler's output. We deprecate meaning [2].\par
\par
ACCESS PRIVILEGE\par
See: PRIVILEGE.\par
\par
ACCESS RULE\par
An SQL Standard term. An access rule declares what conditions -- such as user\par
Privileges -- must exist for execution to be legal. See also: GENERAL RULE,\par
SYNTAX RULE.\par
\par
ACCURATE\par
(Of a value) Closely reflecting the actual value in the real world. See also:\par
PRECISE.\par
\par
ACID\par
Abbreviation for the features of an ideal transaction: Atomic, Consistent,\par
Isolated, Durable.\par
\par
ACMO\par
Abbreviation for Accredited Standards Making Organization.\par
\par
ACTION\par
[1] An SQL Standard term. The activity which you grant or revoke Privilege on,\par
including one of these keywords: INSERT, UPDATE, DELETE, SELECT, REFERENCES,\par
USAGE, UNDER, TRIGGER, EXECUTE.\par
[2] See: REFERENTIAL ACTION.\par
[3] See: TRIGGER.\par
\par
ACTION QUERY\par
An MS-Access term. See: DATA CHANGE STATEMENT.\par
\par
ACTIVATED\par
(Of a Trigger) Executable due to fulfillment of the conditions for database\par
modification declared when the Trigger was defined.\par
\par
ACTIVE\par
[1] An SQL Standard term. A stmt is active if a Cursor is open, or if the stmt\par
is associated with a deferred parameter number.\par
[2] An ODBC term. A stmt is active if there are results pending from a query,\par
or if UPDATE|INSERT|DELETE has happened, or if there is a wait for data due to\par
a SQL_NEED_DATA parameter. Often it would be clearer to use the phrase\par
"transaction in progress".\par
\par
ACTIVE CONDITION\par
A PSM term. The condition whose status code is returned in SQLSTATE. There may\par
be several conditions in the diagnostics area, but only one is "active": the\par
one with the highest priority.\par
\par
ACTIVE RULE\par
See: TRIGGER.\par
\par
ADMIN\par
An ADMIN OPTION is the equivalent, for a Role, of a GRANT OPTION.\par
\par
ADT\par
See: ABSTRACT DATA TYPE.\par
\par
AFNOR\par
Abbreviation for Association fran\'87aise de normalisation.\par
\par
AGENT\par
Or SQL-agent. A job started by a user, which is bound to a client job, which\par
calls a server. So essentially an agent is an instance of the user's\par
application program. (In direct SQL the agent would be part of the\par
implementation, though.)\par
\par
AGGREGATE FUNCTION\par
See: SET FUNCTION.\par
\par
AGGREGATION\par
Looking at a set of values which will be used in combination or\par
interchangeably (due to a CASE expression, a set operator or an array\par
concatenation). The rules of aggregation determine what the result data type\par
is.\par
\par
AGGREGATION RULE\par
A rule affecting validity and implicit cast operations when multiple values\par
are squeezed into the same Column, as for example in the result Table of a set\par
operation.\par
\par
AGREE\par
An SQL Standard term, but unpopular. See the preferred term: DUPLICATE.\par
\par
ALGORITHM\par
The steps, rules or processes which define how inputs should be converted to\par
outputs. Originally algorithms were for people (e.g. the long division\par
algorithm), but the word is now almost exclusively applied to computer\par
routines.\par
\par
ALIAS\par
[1] (Obsolete) temporary name in the FROM clause. See: CORRELATION NAME.\par
[2] (referring to Triggers) an alternate name for an object whose "before" and\par
"after" states are distinguishable due to Trigger operation.\par
\par
ALL\par
A modifier placed after a comparison operator and before a subquery,\par
indicating that the comparison must be true "for all occurrences". Example: "a\par
>= ALL (SELECT b FROM c)". The fancy name for ALL is: the universal\par
quantifier. See also: ANY.\par
\par
ALL PRIVILEGES\par
SQL Standard term. The set of Privileges for which the grantor holds a grant\par
option; thus, may not be the same as all possible or legal Privileges.\par
\par
ALLOCATE\par
Obtain system resources. In the CLI the main allocation function is\par
SQLAllocHandle, which is used for new envs, dbcs, stmts and descs.\par
\par
ALLOCATED SQL-CONNECTION\par
See: dbc.\par
\par
ALLOCATED SQL-ENVIRONMENT\par
See: env.\par
\par
ALLOCATED SQL statement\par
See: stmt.\par
\par
ALPHABET\par
An ordered set of letters which may appear in a dictionary for a language. For\par
example the current Latin alphabet is ABCDEFGHIJKLMNOPQRSTUVWXYZ. The\par
characters - and . and _ are not alphabetic. The official definition of\par
alphabetic is: whatever the ISO 10646 standard document says is alphabetic.\par
\par
ALTER\par
An SQL verb: to change a definition. SQL Objects that may be altered include:\par
Tables, Domains.\par
\par
ALTERNATE KEY\par
A candidate key which is not a primary key.\par
\par
AMERICAN NATIONAL STANDARDS INSTITUTE\par
See: ANSI.\par
\par
AMERICAN STANDARD CODE FOR INFORMATION INTERCHANGE\par
See: ASCII.\par
\par
ANNEX\par
A part of the official SQL Standard which attempts to explain or inform,\par
rather than legislate. For example: in the SQL-89 standard, everything about\par
host-language embedding was put in Annexes.\par
\par
ANSI\par
American National Standards Institute. A quango umbrella. The NCITS (ANSI\par
X3H2) committee, which works on SQL Standards, works for an organization named\par
X3, which is overseen by ANSI. Their main documents are ANSI X3.135-1992 (the\par
SQL-92 Standard), plus later additions and corrigenda. Web site: {\field{\*\fldinst{HYPERLINK "www.ansi.org"}}{\fldrslt{\ul\cf1 www.ansi.org}}}\f1\fs21 .\par
\par
ANY\par
A modifier placed after a comparison operator and before a subquery,\par
indicating that the comparison must be true "for any occurrences". Example: "a\par
>= ANY (SELECT b FROM c)". The fancy name for ANY is: the existential\par
quantifier. See also: ALL.\par
\par
APD\par
See: APPLICATION PARAMETER DESCRIPTOR.\par
\par
API\par
Windows term. Application Programming Interface. The definition of the public\par
routines in a program library, including: names, parameter sizes, order in\par
which parameters are passed, whether the stack should be restored on return\par
and what the routine should return if it is a function call. ODBC is an\par
example of an API for SQL. See also: CLI.\par
\par
APPLICABLE PRIVILEGE\par
For a user or Role: the set of all Privileges for which the user or Role is\par
the grantee, or for which PUBLIC is the grantee. The word "applicable" is used\par
here in the sense of "can be applied", not in the sense of "relevant".\par
\par
APPLICATION\par
[1] A host-language program which connects with SQL.\par
[2] The software that a user sees. The application is what you write; the DBMS\par
is what you interface the application with.\par
[3] An SQL program written with the module language or the PSM (in this book\par
we never use "application" in this sense). See also: AGENT.\par
\par
APPLICATION DESC\par
One of: APD or ARD.\par
\par
APPLICATION PARAMETER DESCRIPTOR\par
A CLI term. Often abbreviated APD. The APD is the description of a statement's\par
parameters "as seen by the application". The APD is a desc, it is\par
automatically allocated when you call SQLAllocHandle(SQL_HANDLE_STMT,...). It\par
is one of four automatically-allocated descriptor areas. The others are: ARD,\par
IRD, IPD.\par
\par
APPLICATION ROW DESCRIPTOR\par
A CLI term. Often abbreviated ARD. This is a structure containing:\par
SQL_DESC_COUNT                maximum number of IDAs\par
...\par
  IDA OCCURS COUNT TIMES      "item descriptor area" multiple occurrence\par
    SQL_DESC_TYPE                 = data type\par
    SQL_DESC_OCTET_LENGTH         = number of bytes\par
    SQL_DESC_LENGTH               = number of characters or positions\par
    SQL_DESC_DATA_POINTER         = address of host variable\par
    SQL_DESC_OCTET_LENGTH_POINTER = address of size in octets\par
    ...\par
The ARD is the description of the host program application buffers which are\par
bound to result set's Columns; thus it's the row descriptor "as seen by the\par
application". It is one of four automatically-allocated descriptor areas. The\par
others are: APD, IRD, IPD.\par
\par
APPROXIMATE NUMERIC\par
One of the three numeric data types: REAL, FLOAT or DOUBLE PRECISION.\par
Approximate numeric literals are represented in exponential notation, e.g.\par
-1E-01. Conceivably internal storage is done according to IEEE floating-point\par
regulations.\par
\par
ARGUMENT\par
A scalar expression which appears between the parentheses for a scalar\par
function or a set function or a routine. The word "argument" properly refers\par
to a specific value of a variable, for example if you use "function(x)" and x\par
is 5, then x is the variable and 5 is the argument. See also: PARAMETER.\par
\par
ARITHMETIC\par
The study of numbers and the operations which apply to numbers. The main\par
arithmetic operators are represented by the symbols + / * -.\par
\par
ARRAY\par
[1] A multiple-occurrence sequence of scalars, all of the same data type, is a\par
one-dimensional array. An array of structures, with headings at the top, is a\par
Table.\par
[2] (SQL3) A data type constructed using the specification ARRAY. Arrays are\par
an example (in fact the only current example) of a collection type.\par
\par
ARD\par
See: APPLICATION ROW DESCRIPTOR.\par
\par
ASCENDING\par
Going up. In an ascending sort sequence, the number 5 comes after 4 in the\par
number sequence, and the letter 'K' comes after 'G' in the alphabet. Opposite\par
is descending. Short form (used in SQL) is ASC.\par
\par
ASCII\par
American Standard Code for Information Interchange. A seven-bit standard\par
encoding. ASCII values are equivalent to the first 128 values of the ISO\par
8859-1 character set.\par
\par
ASCII_FULL\par
Also called: ISO8BIT. In SQL3 and the FIPS specification: a predefined\par
character set containing the 256 graphic and non-graphic characters of the ISO\par
8859-1 standard -- except \\0.\par
\par
ASCII_GRAPHIC\par
Also called: GRAPHIC_IRV. In SQL3 and the FIPS specification: a predefined\par
character set containing the 95 graphic characters of the ISO 646 standard\par
(default values). ASCII_GRAPHIC is the same as SQL_CHARACTER with the addition\par
of these characters: !#$@[\\]^`\{\}~\par
\par
ASENSITIVE CURSOR\par
It is implementation-dependent whether changes to significant data are visible\par
if a Cursor is asensitive. See also: SENSITIVE CURSOR, INSENSITIVE CURSOR.\par
\par
ASSERTION\par
[1] An expression definition which causes an assembler or compiler to generate\par
an error if the result is not true.\par
[2] An SQL Object containing a CHECK clause, which is defined with CREATE\par
ASSERTION. Such Assertions are Constraints. The other kinds of Constraints are\par
Table Constraints and Domain Constraints.\par
\par
ASSIGN\par
Copy a value from a source to a target, as in a COBOL "MOVE".\par
\par
ASSIGNABLE\par
Can be assigned, because data types have relevant characteristics in common.\par
For example: a SMALLINT can be assigned to a DECIMAL (provided there is no\par
overflow), and a CHAR can be assigned to a CHAR (assuming the same\par
repertoires).\par
\par
ASSIGNMENT STATEMENT\par
A PSM term. See: SET STATEMENT.\par
\par
ASSOCIATE\par
Travel together with, have frequent dealings with, be part of the same\par
structure, participate in the same process, link exclusively. The term appears\par
frequently in the Standard but appears to have no technical meaning.\par
\par
ASSOCIATIVE\par
Unaffectable by order of execution, for example A+(B+C) yields the same result\par
as (A+B)+C. See also: COMMUTATIVE.\par
\par
ASYNCHRONOUS\par
Can be executed when the DBMS feels like getting around to it. Asynchronous\par
operations tend to be slow and non-critical.\par
\par
ATOMIC SUBQUERY\par
See: SCALAR SUBQUERY.\par
\par
ATOMIC TRANSACTION\par
A transaction which may perform operations on multiple rows or which may\par
contain multiple updating statements, but which is not splittable. SQL\par
transactions are all-or-nothing. Because they are not splittable, either all\par
operations go through, or none do. Atomicity is one of the ACID transaction\par
features.\par
\par
ATOMIC VALUE\par
A value whose degree and cardinality are both 1. A more common term is: scalar\par
value.\par
\par
ATTRIBUTE\par
[1] A relational term. An attribute is a characteristic of an entity, for\par
example a star's name and distance. This is a box into which we could put\par
scalar values: for example 'Vega' and '7 light years' could constitute an\par
occurrence of the attribute. See also: COLUMN, RELATION.\par
[2] A CLI term. A setting for an env, dbc or stmt. Formerly called an\par
"option".\par
[3] [Obsolete] a Domain Constraint.\par
[4] An SQL Standard term. A named component of an abstract data type\par
descriptor. Attributes have data types, default values and nullability\par
characteristics. Attribute values can only be accessed via observer functions\par
and can only be changed via mutator functions, i.e.: they are encapsulated.\par
\par
AUGMENTED\par
(Of a method) Having a first parameter named SELF.\par
\par
AUTHORIZATION\par
See: PRIVILEGE DESCRIPTOR.\par
\par
AUTHORIZATION_IDENTIFIER\par
Also AUTHORIZATION ID or AUTHORIZATIONID. An identifier of a person or group\par
who/which: (a) connected to a data source, and/or (b) owns one or more\par
Schemas; and/or (c) has been granted Privileges. All Modules have an\par
authorization_identifier. In SQL3, an authorization identifier is either a\par
user identifier or a Role name.\par
\par
AUTOMATIC COMMIT\par
Also AUTO-COMMIT. A mode, the opposite of MANUAL COMMIT. In auto-commit mode,\par
all UPDATE/DELETE/INSERT statements take effect immediately as if the\par
statement was immediately followed by a COMMIT. However, Cursors are not\par
closed. Auto-commit is the default in ODBC, but manual commit is the default\par
in standard SQL. In some DBMSs auto-commit is effectively the default before\par
and after all DDL statements (DDL statements are treated as transactions on\par
their own).\par
\par
AUTOMATIC DESC\par
One of the four automatically-allocated descs associated with a stmt. As\par
opposed to: USER DESC.\par
\par
AVG\par
An SQL set function, short for "average", which returns the arithmetic mean\par
for a columnar expression.\par
\par
B\par
\par
BACKUP\par
To make a copy of a Table's data or of an entire database, so that it can be\par
recovered if accident occurs.\par
\par
BACKUS-NAUR\par
See: BNF.\par
\par
BAG\par
An object oriented term, used for OQL. See: MULTISET.\par
\par
BASE\par
(Of a number) See: RADIX.\par
\par
BASE TABLE\par
A Table which is not a View of another Table. In a straightforward system,\par
there is some association of Base tables with files.\par
\par
BASIC PREDICATE\par
A predicate containing any comparison operator, or BETWEEN, or IN, or IS NULL\par
or MATCH.\par
\par
BASIC RESULT\par
An SQL Standard term. See: RETURN CODE.\par
\par
BATCH\par
An ODBC term. You can pass several SQL statements in one string to an\par
SQLExecDirect call. This is not standard behaviour and many DBMSs do not allow\par
it.\par
\par
BETWEEN\par
An SQL relational operator or predicate. A is between B and C if A>=B and\par
A<=C.\par
\par
BINARY\par
Based on 2 (compare: decimal which is based on 10, hexadecimal which is based\par
on 16). The "binary relationship model" is a conceptual database design\par
technique.\par
\par
BINARY LARGE OBJECT\par
The standard abbreviation is blob, but BLOB or BLOb are acceptable. Data type\par
in SQL3, implemented by several vendors already, sometimes under different\par
names. The vendor interpretations of the meaning of BLOBs differs. In some\par
implementations a BLOB is not retrieved at the same time as the rest of the\par
row; compare the dBASE "memo" type. The word LARGE only suggests typical use,\par
in some DBMSs the maximum BLOB size is the same as the maximum CHAR or BIT\par
size.\par
\par
BINARY STRING\par
A string which has an integral number of octets (this distinguishes BINARY\par
from BIT strings), and which has no associated Character set (this\par
distinguishes BINARY from CHAR strings). Since there is no Character set there\par
is no Collation, therefore the only legal comparison operators are = and LIKE.\par
All SQL binary strings are BLOBs.\par
\par
BIND\par
[1] To associate a host variable in a host-language application program with a\par
parameter marker or select list Column in an SQL statement. With embedded SQL\par
this may be part of the process of precompilation. With a CLI there will be\par
descs involved.\par
[2] To mix SQL statements with host language statements. This can be done in\par
several ways. See: BINDING STYLE.\par
[3] To associate an SQL statement's identifiers with the Objects of a Catalog\par
definition, so that an access plan can be formed. Often the last step of\par
precompilation. The SQLPrepare function binds a single SQL statement.\par
\par
BINDING OFFSET\par
An ODBC term. For those cases where a multiple-row fetch happens into an array\par
buffer, the binding offset is the offset within the buffer where the data for\par
the Column of row #n goes.\par
\par
BINDING STYLE\par
An SQL Standard term. The conventions used for interfacing an application with\par
a DBMS. The primary alternatives are: Module, embedded (SQL/Bindings), direct,\par
implementation-defined, call-level interface (CLI or SQL/CLI). The Persistent\par
Stored Modules feature is not a binding style but an alternative which employs\par
no binding.\par
\par
BINDINGS\par
Part 5 of the ISO 9075 SQL Standard, which sets out the standard for embedded\par
SQL.\par
\par
BIT\par
[1] Short for binary digit. A minimal computer storage unit which can have a\par
value of either 0 or 1. Four bits make a nibble. Eight bits make a byte (in\par
SQL terms: an octet).\par
[2] An SQL Standard term. The SQL-92 BIT data type is used to store bit data.\par
[3] An ODBC term. The ODBC BIT data type is not the same thing as the standard\par
BIT data type.\par
\par
BIT STRING\par
A sequence of bit values. All Columns defined as BIT have bit strings; all\par
literals of the form B'nnnn' or X'nnnn' are bit strings.\par
\par
BIT_LENGTH\par
The size of a string, expressed as a number of bits.\par
\par
BLOB\par
[1] Also spelled BLOb. See: BINARY LARGE OBJECT.\par
[2] Obsolete. An abbreviation for "basic large object".\par
\par
BLOCK\par
[1] Synonym for page.\par
[2] An Oracle term. A sequence of statements. See: COMPOUND STATEMENT.\par
\par
BLOCK CURSOR\par
An ODBC term. When multiple-row fetches are possible, with SQLExtendedFetch\par
for instance, the Cursor is said to be a block Cursor.\par
\par
BNF\par
Abbreviation for Backus-Naur Form. A formal syntax notation method. Basic\par
rules are: if a list is in braces you must choose one and only one of the\par
items in the list; anything within brackets is optional; and ::= means\par
"expands to some simpler token (closer to the Terminal)". For example:\par
<set function> ::= COUNT(*)\par
                   | \{ AVG | MAX | MIN | SUM | COUNT \}\par
                     ( [ALL | DISTINCT] <scalar expression> )\par
Meaning: either you can use COUNT(*), or you can use any one of AVG or MAX or\par
MIN or SUM or COUNT followed by "(" followed optionally by either ALL or\par
DISTINCT followed by <scalar expression> (which is presumably defined\par
elsewhere) followed by ")".\par
\par
BOOLEAN\par
[1] Having to do with George Boole, English mathematician, 1815 - 1864.\par
[2] (Of an operation) AND/OR/NOT.\par
[3] (Of a value) TRUE/FALSE. Mr Boole himself preferred two-valued logic, so\par
strictly speaking a three-valued logic is not Boolean.\par
[4] An SQL3 data type defined by the keyword BOOLEAN. There are three values\par
possible: TRUE, FALSE and UNKNOWN.\par
\par
BOUND COLUMN\par
A Column specified in a select list (or -- rarely -- in a VALUES statement),\par
and therefore a Column of a result set. This Column becomes "bound" when it is\par
associated with a host language variable's address. That happens when the\par
ARD's item descriptor area's SQL_DESC_DATA_POINTER is set to a non-zero value\par
(an address value) by a CLI function such as SQLSetDescField or SQLBindCol.\par
Thus, a bound Column's value is going to an "output parameter" as seen from\par
the DBMS, and when we fetch we are fetching bound Columns into bound targets.\par
\par
BRACKETED COMMENT\par
An SQL3 novelty. A comment within an SQL statement which begins with /* and\par
ends with */, as in C.\par
\par
BSI\par
Abbreviation for British Standards Institute.\par
\par
BUFFER\par
[1] (noun) An area allocated by the host language application program, which\par
it shares with the DBMS, especially for transfer of parameter data.\par
[2] (verb) what a DBMS does when it keeps internal copies of result sets or\par
temporary data without immediately returning it to the host language\par
application.\par
\par
BUILT-IN DATA TYPE\par
See: PREDEFINED DATA TYPE.\par
\par
BUILT-IN FUNCTION\par
A function whose description is part of the SQL language definition -- e.g.:\par
AVG (a set function) or LOWER (a scalar function). In SQL-92 all functions are\par
built-in. In C, and soon in SQL3, functions are usually part of a system- or\par
user-defined library.\par
\par
BYTE\par
Not an official term. The preferred word to refer to a group of 8 bits is\par
"octet". In some rather old contexts e.g. the DEC PDP-10, a "byte" could be 6\par
or 7 bits.\par
\par
C\par
\par
C\par
A host language, recognized by the SQL Standard. (The variant, C++, is\par
unofficial.)\par
\par
C DATA TYPE\par
A basic descriptor of a scalar variable used in a C host language program. In\par
SQL circles one would specifically say "C data type" to ensure there is no\par
confusion with an SQL data type of the same name (e.g.: the SQL data type\par
INTEGER is always 32-bit signed, the C data type integer (i.e.: int) may be\par
short or may be unsigned).\par
\par
CALCULATED FIELD\par
An MS-Access term. See: VIRTUAL COLUMN.\par
\par
CALL STATEMENT\par
An SQL3 statement of the form "CALL [name] [parameter list]" where [name]\par
refers to a routine, possibly a function, consisting of either more SQL\par
statements or a routine in a host language. The idea of SQL invoking non-SQL\par
is an SQL3 innovation.\par
\par
CANDIDATE KEY\par
A key which may be used to identify a single row. There may be several\par
candidate keys defined for a Base table, one of which may be the "preferred\par
candidate key". The preferred candidate key may be explicitly designated as\par
the "primary key". Thus, a candidate key is definable by any UNIQUE or PRIMARY\par
KEY Constraint. A candidate key which is not a primary key is an "alternate\par
key".\par
\par
CANDIDATE ROW\par
(Obsolete) an outer row, whose values are visible in the inner SELECT of a\par
correlated subquery.\par
\par
CAPITAL LETTER\par
See: UPPER CASE LETTER.\par
\par
CARDINAL NUMBER\par
The number of elements in a set: 0,1,2,3,... Represented by an unsigned\par
integer. (Technically: differs from a Natural Number since in some definitions\par
the natural numbers do not include zero, and may refer to anything.)\par
\par
CARDINALITY\par
The number of occurrences in any sort of repetition, for example the number of\par
elements of a set. Thus a C array defined as "x[4]" has a cardinality of 4.\par
Thus a Table with zero rows (an empty Table) has a cardinality of 0. Thus the\par
cardinality of any row is the number of Fields. Thus the cardinality of an\par
array is the number of elements.\par
\par
CARTESIAN\par
A Cartesian product of the sets A and B is the set of all ordered pairs (a,b)\par
where a is a member of A and b is a member of B. In database terms: a\par
Cartesian product joins all rows in Table A with all rows in Table B:\par
 A   B   Cartesian Product\par
 a1  b1  a1,b1\par
 a2  b2  a1,b2\par
         a2,b1\par
         a2,b2\par
Cartesian products are useful for explanation, but when we see an operation\par
which "goes Cartesian" we usually criticize the optimizer. Also known as a\par
cross join.\par
\par
CASCADE\par
Continue an UPDATE or DELETE on the next level due to foreign key clauses, or\par
continue a DROP due to a CASCADE clause. Domino effect. Cascading always goes\par
from top to underlying (just as a water cascade always goes downhill);\par
therefore it is the reverse of inheritance.\par
\par
CASE\par
[1] In SQL, an expression of the form "CASE ... END" which returns a scalar\par
value depending on the result of evaluation of one or more search conditions\par
within the expression.\par
[2] An abbreviation for Computer Aided Software Engineering.\par
[3] The form of a letter: upper case = capital letter, lower case = small\par
letter.\par
\par
CASE SENSITIVE\par
A comparison is "case sensitive" if lower case strings do not equal upper case\par
strings, e.g.: 'ABC' <> 'abc'. The opposite is "case insensitive". The\par
Standard defines case insensitivity only in the context of regular\par
identifiers, where it says that lower case letters should be converted to\par
upper case before comparison or storage. For other cases, the DBMS decides\par
whether a case-insensitive Collation should be used, in which case it should\par
define: (a) whether only simple Latin letters are affected, (b) whether the\par
conversion is from lower to upper or vice versa, (b) whether it is possible\par
for the default Collation to be case insensitive.\par
\par
CAST\par
To change a value's data type, if possible without altering its physical\par
representation. Thus, CAST ('1994-01-01' AS DATE) is equivalent to DATE\par
'1994-01-01'.\par
\par
CATALOG\par
[1] An SQL Standard term. The level in the SQL Object-qualifier hierarchy\par
between Cluster and Schema.\par
[2] A non-standard term. The metadata Tables which describe an entire\par
database. The simplest possible database structure has only one Cluster, one\par
Catalog and one Schema; when this is the case the terms "Catalog" and\par
"database" and "Schema" may be used interchangeably. A detailed form of a\par
Catalog is a DATA DICTIONARY.\par
\par
CATALOG FUNCTION\par
A CLI term. Any of the CLI functions which implicitly accesses metadata in an\par
implementation-dependent way (probably by selecting from INFORMATION_SCHEMA)\par
and returns a result set. Examples: SQLColumns, SQLTablePrivileges,\par
SQLForeignKeys.\par
\par
CBEMA\par
Abbreviation for Computer and Business Machine Manufacturers' Association,\par
which manages some of the affairs of the X3 database standards committee.\par
\par
CHAIN\par
[1] (Identifier chain) A sequence of identifiers linked by periods See also:\par
QUALIFIER.\par
[2] An SQL3 keyword. An indication, in a ROLLBACK or COMMIT statement, that\par
the next transaction should begin with some characteristics carried over from\par
the previous one.\par
\par
CHAR\par
Abbreviation for CHARACTER (data type).\par
\par
CHARACTER\par
[1] A Unicode term. Anything listed in the ISO 10646 standard document.\par
Examples of characters are: letters of the alphabet, digits, punctuation\par
marks, ideographs, control (non-graphic) characters.\par
[2] An SQL keyword. One of the basic data types. May be abbreviated: CHAR.\par
CHAR fields contain letters, digits, etc. An example of a CHAR literal is\par
'John Doe'.\par
\par
CHARACTER LARGE OBJECT\par
See: CLOB.\par
\par
CHARACTER REPERTOIRE\par
See: REPERTOIRE.\par
\par
CHARACTER SET\par
[1] An SQL Standard term. A repertoire plus a Form-of-use plus an encoding.\par
Example: take the Latin alphabet (that is the repertoire) ... decide that each\par
character will be represented by one octet (that is the Form-of-use) ...\par
specify 65 (hex 41) is the code for 'A', 66 is the code for 'B', etc. (that is\par
the encoding) ... you have a Character set. Character sets are Schema Objects,\par
they can be made with CREATE CHARACTER SET and destroyed with DROP CHARACTER\par
SET.\par
[2] = character repertoire. (Since Form-of-use and encoding don't matter\par
unless strings are being input or output, when discussing pure DBMS contexts\par
the terms "Character set" and "character repertoire" may be used\par
interchangeably.) We frown.\par
\par
CHARACTER STRING RETRIEVAL\par
A CLI term. Several CLI routines use this parameter trio: CHAR *target,\par
SMALLINT target_octet_length, SMALLINT *returned_octet_length (parameter names\par
may differ but if you see these parameter types in this sequence it means some\par
sort of character string retrieval is happening). Rules for the most common\par
case are:\par
If (target_octet_length<=0) error: invalid string or buffer length\par
If (returned_octet_length is not a null pointer)\par
  *returned_octet_length = strlen(character-string);\par
Copy character-string and null-terminator ("\\0") to target.\par
If target too short, truncate and add warning-string data, right\par
truncation.\par
There are some exceptions, see the first CLI chapter.\par
\par
CHECK CONSTRAINT\par
A Constraint which is based on a clause that begins with the word CHECK.\par
Example: ALTER TABLE Table_1 ADD CONSTRAINT ch CHECK (c1>7) adds a CHECK\par
Constraint for Table_1; all values in Column c1 must either be greater than 7,\par
or be NULL.\par
\par
CHECK OPTION\par
A flag setting caused by the WITH CHECK OPTION clause of a View definition.\par
When it is true, any updates made to the View must be compatible with any\par
search conditions in the View definition. For example: "CREATE VIEW v AS\par
SELECT * FROM Table_1 WHERE col_1 > 5 WITH CHECK OPTION ... INSERT INTO v\par
VALUES (4)" is a violation of the View's check option.\par
\par
CHECKPOINT\par
A moment during a transaction when the DBMS dumps all updates made so far, but\par
does not fully commit -- i.e.: Cursors are not closed. See also: SAVEPOINT.\par
\par
CLASS\par
[1] A mathematical term. A synonym for set, but one uses the word class only\par
when the members of the set have some close relation with each other.\par
[2] An object oriented term. See: UDT.\par
[3] An SQL Standard term. In the 5-octet status code (SQLSTATE) which the DBMS\par
returns as diagnostic information, the first 2 octets are the "class" (the\par
next 3 octets are the "subclass"). Commonly encountered classes are '00'\par
(successful completion), '01' (warning), '02' (no data), etc.\par
\par
CLASS ORIGIN\par
An SQL Standard term. The origin of the class is the documentary authority\par
which defines the meaning of the class. Example: class 'IM' has class origin =\par
'ODBC 3.0'; class '42' has class origin = 'ISO 9075'.\par
\par
CLAUSE\par
Part of an SQL statement, beginning with a word which in English is usually a\par
preposition or a relative conjunction. For example:  in the SQL statement\par
"DELETE FROM Table_1 WHERE S1 = 5", FROM Table_1 and WHERE S1 = 5 are clauses.\par
Also: where we would usually see a comma or break in English. For example:\par
"ALTER TABLE Table_1 ADD CONSTRAINT C CHECK (C1 > 5)", where one can feel the\par
break before the word CHECK, so CHECK (C1 > 5) is a clause.\par
\par
CLI\par
SQL Standard term. Call Level Interface. The SQL Standard ("ANSI/ISO/IEC\par
9075-3:1995 Database Language SQL - Call Level Interface") specifies a CLI\par
very similar to ODBC, which preceded it. A CLI is one way to interface SQL\par
with a host language and is called a "binding style" (the other important\par
binding style is embedded sql). See also: API, SAG/CLI.\par
\par
CLID\par
Abbreviation for: Common language-independent datatype. An inchoate ISO\par
standard. The idea is that inter-language data passing will be more reliable\par
if representations have commonly-agreed-upon descriptions.\par
\par
CLIENT/SERVER\par
A two-tier database system architecture, with (usually) one "server"\par
machine/program and (usually) multiple "client" machines/programs. Sometimes\par
client and server functionality is combined in the same database engine, with\par
no separation which is apparent to outside observers. The server is the\par
bartender, the clients are the waitresspersons/waiterpersons, the application\par
programs are the tavern patrons.\par
\par
CLOB\par
Character Large Object. A data type, much like CHAR, but also analogous to\par
BLOB. There are some restrictions on operations which can be performed with\par
CLOBs. The intent of the specification is that, to compensate, CLOBs can be\par
relatively large.\par
\par
CLOSE\par
[1] To release a result set when no further fetching is required, done in\par
embedded SQL with "CLOSE <Cursor>" and in the CLI with SQLCloseCursor.\par
[2] A non-standard term. To "close a file" is to declare to the operating\par
system that the program no longer requires the handles and buffers associated\par
with the file. By extension, "close a database" means to close all database\par
files.\par
\par
CLOSURE\par
A mathematical term. A set has the property of closure for an operation, if an\par
operation on any member of the set will produce a member of the same set.\par
Example: addition has closure for the set of integers because adding two\par
integers always results in an integer; however, division does not have closure\par
for integers because dividing 3 by 2 results in 1.5 which is not an integer.\par
\par
CLUSTER\par
[1] A standard but little-used term. The top level of the SQL Object hierarchy\par
(the next level is the Catalog level, then comes the Schema level, then\par
Objects such as Tables or Domains). Most DBMSs do not support multiple\par
Clusters, therefore there is usually no need to use [cluster.] as a Catalog\par
qualifier. As an analogy to the hierarchy, we suggest you think of a\par
personal-computer hierarchy:  the top [Cluster] level is the computer itself,\par
the next [Catalog] level is the drive or drives, the next [directory] level is\par
the Schema and then comes the [Table] level with individual files.\par
[2] A non-standard term. An area of physical storage. Some DBMSs can store\par
multiple Tables in the same file or disk volume, and it is part of the\par
database designer's job to specify which Tables should be thus collocated.\par
Careful clustering helps performance.\par
[3] A non-standard term. A "cluster key" is the key which a DBMS optionally\par
uses to order the rows within a Table, when storing in files.\par
\par
COALESCE\par
An SQL scalar operator. The expression COALESCE(a,b,c) returns a if a is not\par
NULL, else returns b if b is not NULL, else returns c if c is not NULL, else\par
returns NULL.\par
\par
COBOL\par
A computer language which the SQL Standard defines as a host language.\par
\par
CODE PAGE\par
A Windows term. A mapping between numbers (usually 8-bit octets unless the\par
code page is Unicode) and characters. See also: FORM-OF-USE.\par
\par
CODING\par
See: ENCODING.\par
\par
COERCIBILITY\par
An SQL Standard term, always used concerning Collations. If a character\par
string's Collation can be changed, it is coercible.\par
\par
COLLATION\par
[1] An operation which puts character strings in order.\par
[2] An object in a database which describes Collation.\par
[3] = collating sequence.\par
\par
COLLATING SEQUENCE\par
A specification of the character string comparison rules for sorting or\par
conditional-expression purposes. Typically a collating sequence will be based\par
on alphabetical order, and typically the alphabet will be Latin, but there are\par
many variants and special considerations. A default collating sequence exists\par
for every character repertoire.\par
\par
COLLECTION\par
An SQL3 data type. A collection contains multiple values of the same\par
underlying data type. In the SQL3 Standard, all collections are arrays.\par
\par
COLUMN\par
[1] An Object described within a CREATE TABLE statement, to represent the\par
vertical component of a Table (the horizontal component is a row).\par
[2] An instance of such an Object within a row, in which case it may also be\par
called a "Field" or "attribute". Note: this term does not come from set\par
theory, but is commonly used.\par
\par
COLUMN CONSTRAINT\par
A type of Table Constraint which is originally defined within the\par
Column-definition area, e.g.: "CREATE TABLE Table_1 (col_1 INTEGER NOT NULL)"\par
contains a NOT NULL Column Constraint.\par
\par
COLUMN FUNCTION\par
(Obsolete) See: SET FUNCTION.\par
\par
COLUMN INTEGRITY RULE\par
Derivation from the relational-theory phrase "attribute integrity rule", which\par
is (changing the word attribute to Column): there is an implicit Constraint on\par
every Column, that every Column value is a value which exists in the Column's\par
Domain.\par
\par
COLUMN REFERENCE\par
A reference -- using an identifier -- to a Column of a Table. The select list\par
"[SELECT] 5, CAST(:x AS INT), t_detail" contains a literal, then a parameter\par
in an expression, then a Column reference.\par
\par
COMMA LIST\par
Not an SQL Standard term. Used in some textbooks for the lists, usually of\par
indefinite size and enclosed within parentheses, most often of Columns --\par
e.g.: "CREATE VIEW V (v1,v2,v3,v4) ...". The BNF is (<item> [,item ...]) but\par
shorter forms exist.\par
\par
COMMAND\par
See: SQL STATEMENT IDENTIFIER.\par
\par
COMMENT\par
[1] A part of a statement which has no effect on execution, used usually for\par
program documentation. The standard SQL-92 comment is marked by -- and\par
continues until the end of the line:\par
  INSERT INTO T_1 SELECT column1 FROM T_2; -- simple comment\par
With SQL3 one can begin a comment with /* and end with */, the C style:\par
  INSERT INTO T_1 /* bracketed comment */ SELECT column1 FROM T_2;\par
See also: SIMPLE COMMENT, BRACKETED COMMENT.\par
[2] A non-standard SQL verb for putting remarks in INFORMATION_SCHEMA Views.\par
For instance, IBM's DB2 allows COMMENT ON TABLE x IS 'this is a table';.\par
\par
COMMIT\par
An SQL statement which makes changes permanent. In the CLI the same purpose is\par
usually accomplished with SQLEndTran (or the transaction can be in committed\par
automatically, see Automatic Commit). Sometimes the word "commit" (lower case)\par
refers to the act of flushing to the data files without closing the Cursors;\par
this is the operating-system meaning of "commit" rather than the SQL\par
definition, and a better word would be "save". Once you COMMIT, you cannot\par
ROLLBACK.\par
\par
COMMUTATIVE OPERATOR\par
An operator which doesn't care about the order of the operands, e.g.: A+B is\par
the same as B+A. Note that A-B is not the same as B-A, so - is not\par
commutative.\par
\par
COMP-OP\par
An SQL Standard term. An abbreviation for "comparison operator".\par
\par
COMPARISON\par
A comparison operator is one of: = > >= < <= <>. The combination <expression>\par
<comparison operator> <expression> constitutes a comparison predicate (the\par
standard term) or simply "comparison" (the popular term). An operation which\par
takes two scalar values -- or two row values if the DBMS is full SQL -- and\par
returns true or false or unknown. Example: the comparison predicate "5 > 2" is\par
true. See also: PREDICATE.\par
\par
COMPATIBLE\par
An SQL Standard term referring to data types. Two data types are compatible if\par
they are mutually assignable and their descriptors include the same data type\par
name. Example: a CHARACTER and CHARACTER VARYING are compatible, unless they\par
are of different repertoires (in which case they are not mutually assignable).\par
\par
COMPILATION UNIT\par
An SQL Standard term. A series of executable statements. These are associated\par
with the client Module while it is executing.\par
\par
COMPILE\par
To parse a series of statements in a host language, and produce object code\par
for the computer processor. Current DBMSs are not compilers; they only produce\par
tokens which must be interpreted by a runtime software module. However, some\par
sources (including Microsoft) will use the word "compile" as a synonym for\par
"prepare".\par
\par
COMPLETION CONDITION\par
Any SQL statement or CLI function will either fail due to some error or\par
problem ("exception"), or execute till "completion". In the latter case, a\par
"completion condition" will be in a function return and/or in a status code.\par
There are three classes of completion condition: success (class = 00), success\par
with information i.e.: warning (class = 01), no data (class = 02). Usually the\par
term "completion condition" is not used unless there is a warning involved.\par
\par
COMPLEXITY\par
(Kolmogorov's rule) The complexity of a sequence is the length of the shortest\par
computer program which can be used to print it out.\par
\par
COMPONENT\par
[1] (Of a UDT) Either an attribute or operation -- but loosely, "component"\par
may refer to attributes only.\par
[2] (In general) Anything which belongs to a larger structure, for example a\par
years value is a component of a datetime, Domains are components of Schemas,\par
operands are components of expressions and Constraint attributes are\par
components of Constraint descriptors.\par
\par
COMPONENT\par
[1] An Object/Relational term. (Of a UDT) Either an attribute or a method.\par
[2] A general term. A Table is a component of a Schema, a Schema is a\par
component of a Catalog, etc.\par
\par
COMPOSITE KEY\par
A key which contains more than one Column. Also known as a concatenated key,\par
or multi-value key. Opposite of: simple key.\par
\par
COMPOUND STATEMENT\par
A sequence of statements which can be treated as a unit -- what in Pascal\par
would be enclosed in "begin ... end", what in C would be enclosed in braces.\par
In SQL3 (PSM) a compound statement has a local scope and a degree of\par
atomicity.\par
\par
CONCATENATION\par
Catena is the Latin word for chain. When we concatenate, we are chaining\par
together. Or actually: stringing together, because the operands of a\par
concatenation operation must be strings. The concatenation operator is ||. For\par
arrays, there is a built-in function: CONCATENATE.\par
\par
CONCISE CODE\par
A CLI term. A representation of data types using single numbers: 1 = CHAR, 2 =\par
NUMERIC, 3 = DECIMAL, etc. Each variant of the datetime and interval data\par
types is represented by a different value (for example 103 = INTERVAL DAY and\par
104 = INTERVAL HOUR); in that respect a concise code value differs from an SQL\par
data type code value. See also: SQL DATA TYPE CODE.\par
\par
CONCISE FUNCTION\par
[1] A CLI term. A function which accesses a descriptor "implicitly"; the first\par
parameter is a statement handle rather than the descriptor handle. Examples:\par
SQLBindCol, SQLBindParameter.\par
[2] An ODBC term. A CLI function which acts on more than one descriptor field.\par
Examples: SQLGetDescRec, SQLSetDescRec.\par
\par
CONCURRENCY\par
From the Latin "concurrere" -- to run together. When two applications, or two\par
instances of the same application, are connected to the same database, they\par
are concurrent. Conflict is possible; it can be regulated with an optimistic\par
control (e.g.: timestamping) or a pessimistic control (e.g.: locking).\par
\par
CONDITION\par
[1] A logical term. Given two statements p,q: the formulations "p implies q"\par
or "p is necessary for q to be true" express conditional relations.\par
[2] The contents of the ON clause of a join. See also: SEARCH CONDITION.\par
[3] The result of an SQL operation which is returned to the application via\par
the Diagnostics Area. See also: EXCEPTION CONDITION, COMPLETION CONDITION,\par
STATUS RECORD.\par
\par
CONDITIONAL EXPRESSION\par
(In the writings of C.J.Date) a synonym for the standard term search\par
condition.\par
\par
CONDITIONAL VALUE EXPRESSION\par
One of: CASE, NULLIF, COALESCE.\par
\par
CONDITION HANDLING\par
A PSM term. A system whereby exception or completion conditions can be linked\par
with procedures for handling them. See: HANDLER.\par
\par
CONDITION INFORMATION ITEM\par
An SQL Standard term, but little used. A multiple-occurrence detail record in\par
a diagnostics area. We have preferred the term: status record.\par
\par
CONFORMANCE LEVEL\par
[1] An ODBC term. Describes how completely a driver conforms to the API\par
requirement (core, level 1, level 2).\par
[2] An SQL term. Describes how completely an implementation conforms to the\par
SQL Standard (entry, intermediate, full, core, enhanced).\par
\par
CONNECTION\par
[1] (data source connection) what you get when you execute the CONNECT\par
statement, or (with the CLI) call SQLConnect. Standardly a Connection is\par
between a client and a server, but it could be between an application program\par
and a DBMS.\par
[2] (database connection) an opening of a database; a binding between a\par
program and a database; the pipe of the linkage is the connection.\par
[3] (allocated connection) see dbc. See also: SESSION.\par
\par
CONNECTION BROWSING\par
An ODBC term. Looking for a data source, either by querying the ODBC data\par
manager or by making calls to the operating system.\par
\par
CONNECTION HANDLE\par
See: hdbc.\par
\par
CONNECTION STATEMENT\par
Also SQL-Connection statement. SQL Standard term. One of: CONNECT, DISCONNECT,\par
SET CONNECTION.\par
\par
CONSISTENCY\par
[1] If you do the same thing twice with the same original data, you get the\par
same result. Consistency is one of the ACID transaction features. See also:\par
DETERMINISTIC.\par
[2] Two fields in a desc are consistent if they don't imply contradictory\par
things. For example, for a NUMERIC data type, PRECISION=3 and SCALE=2 would be\par
"consistent" -- but SCALE=100 would not be consistent because NUMERIC(3,100)\par
is an illegal definition.\par
\par
CONSTANT\par
See: LITERAL.\par
\par
CONSTRAINT\par
[1] An SQL Standard term. An Object within a Schema, which contains a\par
description of a CHECK clause, or a foreign key or a unique key (especially a\par
primary key). If the Constraint condition is FALSE, that is an attempted\par
Constraint violation. Usually the SQL statement causing the violation\par
(UPDATE/INSERT/DELETE) fails; there are some other options for referential\par
Constraints.\par
[2] A non-standard term. Any rule which is seen by the DBMS programmer as a\par
description of the database, rather than a procedural definition.\par
\par
CONSTRAINT MODE\par
When the Constraint must be checked for violation. One of: IMMEDIATE or\par
DEFERRABLE.\par
\par
CONSTRUCTED TYPE\par
An SQL Standard term. One of the categories of data types (the others are\par
predefined data type and UDT). Constructed types' specifications include one\par
of the keywords: ARRAY, REF or ROW.\par
\par
CONSTRUCTOR FUNCTION\par
An Object/Relational term. A function associated with a structured\par
instantiable UDT, which returns a value equal to a new instance of type UDT.\par
The DBMS implicitly creates a constructor when the UDT is created, thus:\par
"CREATE FUNCTION <UDT name> () RETURNS <UDT name> ... RETURN V" -- where V is\par
a value of type UDT, containing the default value for every UDT attribute (as\par
gotten by the attributes' observer functions). So the constructor function for\par
a UDT named STUDENT would simply be STUDENT(), and its returned type would be\par
STUDENT.\par
\par
CONTAINMENT\par
The Standard uses the words "directly contains" for the special case where a\par
part of an SQL statement (such as a clause) includes another part (such as an\par
expression), at the same level. Thus, in "SELECT * FROM Table_1 WHERE col1 =\par
(SELECT col2 FROM Table_2);", the WHERE clause "directly contains" the Column\par
reference col1, but the Column reference col2 is in a subquery and is\par
therefore not directly contained in the WHERE clause.\par
\par
CONTROL DECLARATION\par
Also SQL-control declaration. A PSM term. One of: a condition declaration, a\par
handler declaration or a variable declaration, within an SQL Module.\par
\par
CONTROL STATEMENT\par
Also SQL-control statement.\par
[1] An SQL3 term. One of: CALL, RETURN.\par
[2] A PSM term. Since the point of PSM is the addition of control statements,\par
there are several statement types here: "compound", "case", "if", "iterate",\par
"leave", "loop", "while","repeat", "for", and "assignment" statements.\par
\par
CONVERT\par
[1] Change one data type to another, either implicitly or (via the CAST\par
operator) explicitly.\par
[2] An SQL scalar operator which changes the form of use of a char string.\par
\par
CORE ODBC\par
The ODBC 3.0 specification includes a description of "core ODBC", which is\par
reasonably close to what we know as "the standard CLI". Full ODBC would also\par
include many non-core extended features, none of which are standard.\par
\par
CORE SQL\par
The SQL3 Standard specification includes a description of "Core SQL", a subset\par
of SQL3 that (it is expected) will be adhered to by more DBMS vendors than can\par
support the whole thing.\par
\par
CORRELATED SUBQUERY\par
A subquery which contains a reference to a Column in an outer Table -- e.g.:\par
the statement "SELECT * FROM T_1 WHERE EXISTS (SELECT * FROM T_2 WHERE\par
T_1.Column=T_2.Column)" contains a correlated subquery, in which the Column\par
reference T_1.Column refers to a Column in T_1, and T_1 is in the FROM clause\par
of the outer query.\par
\par
CORRELATION NAME\par
[1] An alternate Table name, occurring in a FROM clause within a SELECT\par
statement, whose scope is the scope of the SELECT statement. One uses\par
correlation names as shorthand, and to prevent ambiguity in self joins.\par
[2] An alternate Table name, occurring in a Trigger definition.\par
\par
CORRESPONDING\par
Having the same name. The SQL clause [CORRESPONDING [BY (Column list)]\par
modifies the UNION, EXCEPT and INTERSECT operators.\par
\par
CORRIGENDUM\par
Also: Technical Corrigendum. From the Latin for "thing which must be\par
corrected". If errors or ambiguities are discovered in an ANSI document after\par
it has been published, a supplementary bulletin comes out. For SQL-92 there\par
were three Corrigenda, the latest (which supersedes the previous ones) is\par
known as Corrigendum #3.\par
\par
COUNT\par
One of the SQL set functions, used for tallying.\par
\par
CROSS JOIN\par
Cartesian join. The SQL expression "a CROSS JOIN b" is equivalent to "a\par
[INNER|LEFT|RIGHT|FULL] JOIN b ON <predicate>" where a and b are Tables and\par
the predicate is true.\par
\par
CURRENT\par
As of the time that an SQL statement is executing. CURRENT is used as a prefix\par
for SQL datetime niladic functions (CURRENT_DATE, CURRENT_TIME,\par
CURRENT_TIMESTAMP) and for the user who connected (CURRENT_USER) and for the\par
naming path for routines (CURRENT_PATH).\par
\par
CURRENT ROW\par
Where the Cursor is at, within a result set. For instance, when you FETCH\par
[NEXT] for the first time, the Cursor will be positioned on the next row,\par
which is 1. (Row numbering within result sets starts at 1.) The concept\par
matters when you use UPDATE|DELETE ... WHERE CURRENT OF <Cursor>.\par
\par
CURRENT_USER\par
An SQL niladic character string function, which returns the authorization\par
identifier of the Module. If the Module has no authorization identifier, then\par
CURRENT_USER = SESSION_USER i.e.: the authorization identifier of the user who\par
logged on during the CONNECT. See also: SYSTEM_USER.\par
\par
CURSOR\par
A named linkage to a result set, used by a host language program to navigate\par
row-by-row. Generally: one creates a result set with a query, which is\par
associated with a Cursor, then fetches through the Cursor one row at a time.\par
With a scroll Cursor one can fetch particular rows, using an absolute or\par
relative index to the result set.\par
\par
CYCLE\par
[1] An SQL Standard term. An instance of a recursion.\par
[2] See: REFERENTIAL CYCLE.\par
\par
D\par
\par
DARWEN, HUGH\par
Database expert. Co-author (with C.J.Date) of an SQL book. Member of SQL\par
committee.\par
\par
DATA\par
Also SQL-data. The plural of the Latin word datum ("a given"). Anything stored\par
in a database. All the data in a database's Tables, but not the metadata.\par
Effectively: same as Database.\par
\par
DATA BANK\par
Obsolete. See: DATABASE.\par
\par
DATA CHANGE STATEMENT\par
Also SQL-data change statement. One of: INSERT, UPDATE, DELETE. In this book\par
we have preferred the term "data change statement" to the somewhat ambiguous\par
looking "update statement".\par
\par
DATA CONTROL LANGUAGE\par
Also DCL. Non-standard term. The subset of the SQL language which consists of\par
those statements that affect Privileges. To wit: GRANT, REVOKE. Properly, the\par
phrase should be "access control" (to avoid confusion with SQL3's new control\par
statements).\par
\par
DATA DEFINITION LANGUAGE\par
Also DDL. Non-standard term. The subset of SQL syntax containing the SQL\par
statements which create or destroy Objects (other than Privileges) and\par
descriptions of Objects. That is: CREATE, DROP, ALTER.\par
\par
DATA DICTIONARY\par
[1] In SQL: The set of all descriptions of all Objects in a Cluster (users,\par
Catalogs, Schemas, Tables, Columns, Domains, Privileges, etc.). Some of the\par
information in the data dictionary is visible in INFORMATION_SCHEMA Views.\par
Until SQL-92 came and declared "Cluster" to be the top database-hierarchy\par
level, a "data dictionary" was the same thing as a "Catalog" -- this meaning\par
is still common.\par
[2] Outside SQL: a list of data-related names, policies and procedures needed\par
for administration. Some authorities distinguish between "metadata inside the\par
database" (the INFORMATION_SCHEMA) and "metadata in the environment as a\par
whole" (the data dictionary).\par
\par
DATA ELEMENT\par
Non-standard term. See: ATTRIBUTE.\par
\par
DATA ENVIRONMENT COMMANDS\par
Rarely-used non-standard term. The CONNECT and DISCONNECT statements. See\par
also: CONNECTION STATEMENT.\par
\par
DATA EXCEPTION\par
A class of exceptions which are raised as a result of a problem with the data,\par
for example "character not in repertoire" or division by zero".\par
\par
DATA MANIPULATION LANGUAGE\par
Also DML. Non-standard term. The subset of SQL syntax containing the SQL\par
statements which manipulate data -- e.g.: INSERT, UPDATE, DELETE, SELECT.\par
\par
DATA MANIPULATION STATEMENT\par
An SQL Standard term. An SQL statement which accesses or changes rows, to wit:\par
the data change statements (INSERT, UPDATE, DELETE); the query statements\par
(SELECT, TABLE, VALUES) and their Cursor overhead (OPEN, FETCH, CLOSE). In\par
SQL3, FREE LOCATOR and HOLD LOCATOR are also data manipulation statements.\par
\par
DATA REPOSITORY\par
See: REPOSITORY.\par
\par
DATA SOURCE\par
An ODBC term. The combination of location plus DBMS plus database -- the thing\par
one connects to. In many cases, the data source is simply the database.\par
\par
DATA TYPE\par
An SQL Standard term. A description of a set of values, which determines what\par
representations and operations (if any) are legal. For example: "TIME WITH\par
TIME ZONE", "CHAR(14) CHARACTER SET ASCII_FULL", "UDT_1". A full data type\par
description includes: data type name plus size plus (for character data types)\par
Character set and Collation. However, to many people the word "CHAR" alone\par
defines a data type; the rest of the description (size plus Character set plus\par
Collation) is regarded as distinct from the data type. See also: DECLARED\par
TYPE, PREDEFINED DATA TYPE, UDT.\par
\par
DATA TYPE CODE\par
Also SQL Data Type Code. A representation of data types using single numbers,\par
e.g.: 1 = CHAR, 2 = NUMERIC, 3 = DECIMAL, etc. Each variant of the datetime\par
and interval data types is represented by the same value, and a separate\par
"subtype" code would be required to differentiate the variants. For example\par
for INTERVAL DAY the SQL data type code value = 10 and the subtype = 3 while\par
for INTERVAL HOUR the SQL data type code value = 10 and the subtype = 4. In\par
that respect a SQL Data Type Code value differs from a concise code value. The\par
ODBC term for SQL Data Type Code is "verbose code". See also: CONCISE CODE.\par
\par
DATA TYPE SPECIFIER\par
A data type name preceding a literal or host variable in an SQL statement. For\par
example, the SQL statement "SELECT * FROM Table_1 WHERE DATE_Column = DATE\par
'1992-01-01'" contains a data type specifier: the word DATE. See also:\par
INTERVAL QUALIFIER.\par
\par
DATA-AT-EXECUTION\par
An ODBC term, adjectivally attached to either the word "Column" or the word\par
"parameter". Refers to values which cannot be determined at prepare time, but\par
which will be known at execution time.\par
\par
DATABASE\par
[1] The collection of Catalogs, Schemas, Tables, Constraints, Domains, rows,\par
etc. i.e.: the data plus the description of the data.\par
[2] A Cluster.\par
[3] An ODBC term. "a discrete collection of data in a DBMS. Also a DBMS".\par
[4] An MS-Access term. All objects related to a subject, including tables,\par
forms and modules.\par
\par
DATABASE ENGINE\par
All parts of the DBMS (parser, optimizer, file reader, etc.) which work on the\par
database -- usually excluding those parts of the DBMS (precompiler, installer)\par
which have a peripheral role. See also: DRIVER.\par
\par
DATABASE MANAGEMENT SYSTEM\par
See: DBMS.\par
\par
DATE\par
[1] C.J. (Chris) Date writes books on relational databases.\par
[2] An SQL data type for representing year+month+day.\par
\par
DATETIME\par
[1] One of the standard SQL data types: DATE, TIME, TIMESTAMP.\par
[2] A Microsoft SQL Server data type, see TIMESTAMP.\par
\par
DATETIME_INTERVAL_CODE\par
See: SUBTYPE.\par
\par
DAY-TIME INTERVAL\par
An interval which includes one, some, or all of these fields: DAY, HOUR,\par
MINUTE, SECOND. See also: YEAR-MONTH INTERVAL.\par
\par
DB2\par
See: IBM.\par
\par
DBA\par
Abbreviation for Database Administrator.\par
\par
DBASE\par
Official spelling is dBASE. Trademark of Inprise Corp. A non-SQL ISAM DBMS\par
which (according to the vendor) was "relational" and which was popular on\par
microcomputers in an age which (thank goodness) is now past.\par
\par
DBC\par
A CLI term. A structured area which is created by the\par
SQLAllocHandle(SQL_HANDLE_DBC,...) function. The dbc is contained in an env.\par
The dbc can contain several stmts. The dbc stores information about a\par
connection. The standard term is actually "SQL-connection" but in examples the\par
Standard uses the abbreviation dbc; throughout this book we have preferred to\par
use the term dbc because it appears less confusing to us. The CLI functions\par
which reference a dbc use a handle; we call a dbc handle a hdbc. Possibly  at\par
one time dbc stood for "database connection" or "DBMS connection", but that is\par
no longer the case.\par
\par
DBL\par
An abbreviation for a subgroup of ISO, as in "the Database Languages\par
Rapporteur Group of ISO/IEC JTC1/SC21/WG3". Informally: the international\par
equivalent of ANSI X3H2.\par
\par
DBMS\par
Not an SQL Standard term. Short for Database Management System. For this book\par
we use DBMS for "an SQL product from a known vendor" or merely "whatever your\par
application is connecting via and to" -- wherever the details don't matter.\par
Often we use the word DBMS where the formal word would be "implementation".\par
\par
DBMS-BASED DRIVER\par
An ODBC term. A driver that accesses data by calling a database engine. As\par
opposed to a File-Based Driver, which contains a database engine.\par
\par
DBSSG\par
Abbreviation for Database Systems Study Group.\par
\par
DCL\par
See: DATA CONTROL LANGUAGE.\par
\par
DDL\par
See: DATA DEFINITION LANGUAGE.\par
\par
DEADLOCK\par
A concurrency problem. When Job #1 is waiting for Job #2 to release a lock on\par
record X, but Job #2 is waiting for Job #1 to release a lock on record Y, each\par
job must in theory wait forever. \par
DEALLOCATE\par
[1] An embedded-SQL keyword. DEALLOCATE DESCRIPTOR is the reverse of ALLOCATE\par
DESCRIPTOR.\par
[2] An SQL Standard term. One can "deallocate" any resource. Simpler synonyms\par
are "free" or (our own preference) "destroy".\par
\par
DECIMAL\par
Having to do with tens or with tenths.\par
[1] A number with a number base (radix) = 10, what mathematicians call\par
"denary", as opposed to "binary" (based on the number 2) or "hexadecimal"\par
(based on the number 16).\par
[2] An exact numeric data type which has a user-specified decimal precision\par
and optional scale. An example of a decimal literal is: 15.77. See also:\par
NUMERIC.\par
\par
DECIMALDIGITS\par
A parameter in the CLI functions SQLBindParameter and SQLDescribeCol, where it\par
indicates the number of digits after the decimal point -- the scale if a\par
numeric data type, the fractional precision if a temporal data type.\par
\par
DECLARATION\par
[1] A Module definition may contain a "temporary Table declaration". It looks\par
like a CREATE TABLE statement, but the temporary Table declaration is\par
considered to be a data statement (like SELECT), not a data definition\par
statement.\par
[2] In the function call "a(b,c,d)", b and c and d are "parameter\par
declarations".\par
[3] An embedded SQL term, referring to any statements which the precompiler\par
should see but not execute, e.g.: DECLARE CURSOR, SET NAMES ARE (the Character\par
set declaration), or the variable definitions between BEGIN DECLARE SECTION\par
and END DECLARE SECTION.\par
\par
DECLARED TYPE\par
[1] (Of a Column, parameter or variable) The data type that is "declared" in\par
the definition, for example in CREATE TABLE Table_1 (x INTEGER) the declared\par
type of x is INTEGER.\par
[2] (Of an expression) The data type that is implied by SQL's syntax rules.\par
For example: in WHERE y = DATE '1994-04-04' + INTERVAL '1' DAY, the literal\par
has a declared type of DATE. For an example that shows the distinction between\par
declared type and most specific type, see: MOST SPECIFIC TYPE.\par
[3] (Common incorrect definition) "Of an expression denoting a value, the\par
unique data type that is common to every value that might result from\par
evaluation of that expression" -- usually no such data type exists.\par
\par
DECOMPOSE\par
To break up Tables as part of the normalization process. For example: if we\par
have a Table "Countries (country_name ... PRIMARY KEY, monarch ..., heir\par
...)", and we determine that one of the rules of normalization is violated\par
(specifically: see THIRD NORMAL FORM), then we would split into two Tables,\par
with one referencing the other. See also: NORMALIZATION.\par
\par
DEFAULT\par
[1] A system-defined mode or value which is in effect unless the user\par
explicitly requests otherwise.\par
[2] A clause in Column- or Domain-definition, with a scalar value. Example:\par
ALTER TABLE Table_1 ADD COLUMN c DEFAULT NULL;. (For the PSM specification,\par
there can be a default clause for variables too.)\par
[3] A clause which is taken to exist in a statement if no specification exists\par
to the contrary; usually the Standard puts this as "If <x> is not specified,\par
then <y> is implicit".\par
\par
DEFERRABLE\par
(Of a Constraint) Capable of being deferred. The opposite of "IMMEDIATE".\par
\par
DEFERRED\par
(Of a Constraint) For which checking is postponed until either a COMMIT\par
happens, or until SET CONSTRAINTS ... IMMEDIATE happens.\par
\par
DEFERRED PARAMETER\par
A "parameter" is a value which is input from the application to the DBMS. If\par
the parameter value is established before execution, it's an "immediate\par
parameter". If the parameter value is established during execution, it's a\par
"deferred parameter". Deferred parameters are signalled by SQL_NEED_DATA. The\par
SQLParamData function is usually needed.\par
\par
DEFINE\par
[1] (In a database) Add to the database structure using a CREATE or GRANT\par
statement. The standard term "Schema definition" reflects this meaning.\par
[2] (In relational theory) imply, as in "since we can derive the value of b\par
from the value of a, we say that a defines b". See also: FUNCTIONAL\par
DEPENDENCY.\par
\par
DEFINITION_SCHEMA\par
The INFORMATION_SCHEMA Tables are actually, in the official description, Views\par
which are derived from Base tables in DEFINITION_SCHEMA. But you never access\par
these Base tables, so this is an academic issue.\par
\par
DEGREE\par
[1] A relational term. A Table with 3 Columns has a degree of 3.\par
[2] An SQL3 term. The number of attributes in a user-defined type.\par
\par
DELETE\par
One of SQL's Database Manipulation Language verbs (the others are INSERT and\par
UPDATE). When a row is deleted, it is removed from a Table.\par
\par
DELETE RULE\par
The part of a Constraint clause that begins with the words "ON DELETE ...".\par
This specifies referential action on a foreign key if a primary key is\par
deleted.\par
\par
DELIMITED TEXT FILE\par
A disk file containing a representation of a Table, in which rows and Columns\par
are separated from each other with special character markers ("delimiters").\par
If the Columns are separated with commas, it is a "comma delimited [text]\par
file".\par
\par
DELIMITED IDENTIFIER\par
Also "quoted identifier". An identifier which is enclosed in double quotes ("\par
"). Unlike regular identifiers, delimited identifiers may match keywords or\par
may contain special characters. Case is significant: "A" and "a" are not the\par
same.\par
\par
DELIMITER TOKEN\par
Any of: 'character literal', the quoted string which is part of\par
date/time/timestamp/interval literals, "a delimited identifier", a special\par
character, or <> or >= or <= or || or .. or [ or ]. A delimiter is a token\par
which need not be surrounded by separators, thus "A <> B" and "A<>B" are the\par
same expression. The ANSI definition contains unclearnesses; it may be that\par
certain other characters are delimiters too. See also: SEPARATOR.\par
\par
DELPHI\par
A popular implementation of Pascal, vended by Inprise Corp.\par
\par
DENORMALIZE\par
Break the normalization rules deliberately, in an attempt to gain speed or\par
save space.\par
\par
DEPRECATED\par
[1] A term used in the Standard for syntax that was okay in an earlier\par
version, but which they wish you'd stop using -- and maybe in the next version\par
you won't be able to use it at all. An example is the use of ordinals in ORDER\par
BY clauses.\par
[2] (referring to an English word) Disapproved.\par
\par
DEREFERENCE\par
An SQL3 operation. To take a REF value and return the value which it refers\par
to.\par
\par
DERIVED COLUMN\par
An entry in a select list, other than "*". Thus, in "SELECT 1 + 1 AS\par
one_plus_one FROM INFORMATION_SCHEMA.LANGUAGES;", the sole expression in the\par
select list -- the value expression "1 + 1" with the AS clause -- is the\par
derived Column, and the derived Column name is one_plus_one.\par
\par
DERIVED TABLE\par
[1] A Table whose definition and contents come from another Table due to an\par
SQL query statement, such as SELECT. All result sets are in theory "derived\par
Tables", but we usually reserve the term "derived Table" for Views. A\par
persistent Base table is not a derived Table.\par
[2] Any virtual Table which is materialized. See also: VIRTUAL TABLE.\par
\par
DESC\par
[1] A CLI term. Abbreviation for CLI descriptor area. This is one of the four\par
types of resources (the others are env, dbc, stmt). A desc contains fields\par
that describe a result set's Columns, or a statement's parameters. See also:\par
APD, ARD, IPD, IRD.\par
[2] contraction for descending.\par
\par
DESCENDING\par
Going down. In a descending sort sequence, the number 4 comes after the number\par
5, and the letter 'G' comes after 'K'. Opposite is ascending. In SQL one must\par
use the short form: DESC.\par
\par
DESCRIBE\par
In embedded SQL, DESCRIBE is used to retrieve information (name, size, scale,\par
etc.) about parameters or result set Columns. The equivalent CLI functions are\par
SQLGetDescRec, SQLDescribeCol and their analogs.\par
\par
DESCRIPTOR\par
[1] See: DESCRIPTOR AREA.\par
[2] (In a database) a structure which is maintained by the DBMS for an Object,\par
values in which are changed by Schema Statements, and often selectable via the\par
Views of INFORMATION_SCHEMA. Examples: "Table descriptor", "Domain\par
descriptor".\par
\par
DESCRIPTOR AREA\par
[1] An embedded SQL term. A structure defined in a host language (the SQLDA),\par
or available to the host language via a handle, which contains information\par
about the Columns of a result set (data type, size, name, etc.).\par
[2] A CLI term. See: DESC.\par
\par
DESCRIPTOR INDEX\par
Within a descriptor area there is a multiple-occurrence structure (the item\par
descriptor area, which occurs once per Column). If we refer to the Nth\par
occurrence of the descriptor's item descriptor area, then N is the descriptor\par
index.\par
\par
DESCRIPTOR RECORD\par
An ODBC term. Within a descriptor area, there are n descriptor records (where\par
n = the value of the descriptor area's COUNT). The fields in a descriptor\par
record are name, length, scale, etc. One descriptor record describes either\par
one dynamic parameter specification or one select-list Column. In this book we\par
use the standard term "Item Descriptor Area" instead of "Descriptor Record",\par
but acknowledge that SQLGetDescRec obviously is short for Get Descriptor\par
Record.\par
\par
DESKTOP DATABASE\par
A database which is accessed from a personal computer, without recourse to a\par
server on a different machine. The term is sometimes used pejoratively.\par
\par
DETAIL\par
A report line containing information from a single row -- as opposed to a\par
"summary" or "group" line.\par
\par
DETERMINISTIC\par
(Of a query) Guaranteed to produce the same result every time, if the database\par
is the same. Factors which might break determinism, and thereby cause\par
"possibly non-deterministic" queries, include the implementation-dependent\par
behaviour that the Standard allows for time zones and padded character\par
strings. A difference in row order is not significant. Queries used in\par
integrity Constraints must be deterministic.\par
\par
DIAGNOSTIC RECORD\par
An ODBC term. See: STATUS RECORD.\par
\par
DIAGNOSTICS AREA\par
Structured information concerning the execution of the last SQL statement or\par
CLI function call. Fields in the diagnostics area are available to the\par
application via a GET DIAGNOSTICS statement (embedded SQL) or via a\par
SQLGetDiagField/SQLGetDiagRec function (CLI SQL). The diagnostics area\par
contains some header fields (e.g.: the count of conditions and the return\par
code) and zero or more status records. Information in the status records might\par
be useful if an exception or completion condition occurred.\par
\par
DIAGNOSTICS AREA LIMIT\par
The maximum number of status records which may exist within one diagnostics\par
area. It is possible to change the limit with a SET statement. The limit can\par
never be less than 1.\par
\par
DIAGNOSTICS STATEMENT\par
A general name for: GET DIAGNOSTICS.\par
\par
DICTIONARY\par
[1] An authoritative source for determining a Collation.\par
[2] See: DATA DICTIONARY.\par
\par
DIFFERENCE\par
A relational operation. See: EXCEPT.\par
\par
DIGIT\par
One of: 0123456789. The term "digit" may be used for non-decimal numbers, but\par
see also: BIT, HEXIT.\par
\par
DIN\par
Abbreviation for Deutsches Institut F\'81r Normung.\par
\par
DIRECT\par
Without stopovers. If we have a type hierarchy where t1 is a subtype of t2 and\par
t2 is a subtype of t3, then t1 is a subtype of t3 but it is not a direct\par
subtype of t3. Also, a "direct" subtype is always a "proper" subtype.\par
\par
DIRECT SQL\par
A binding style. If you type an SQL statement on your keyboard and results\par
come back on the screen, you are using direct SQL. There is some relaxation of\par
the formal SQL rules, which are generally meant to apply to SQL statements\par
interacting with a host language program. The Standard uses the term Direct\par
Invocation of SQL.\par
\par
DIRTY READ\par
A reading of data which another transaction has updated or inserted, but not\par
committed. Dirty read can occur if the transaction isolation level is "read\par
uncommitted".\par
\par
DISCONNECT\par
An SQL verb, the reverse of CONNECT. Terminates a session.\par
\par
DISJOINT\par
Two sets are disjoint if they have no elements in common. The mathematical\par
term "mutually exclusive" is sometimes used.\par
\par
DISPLACEMENT\par
The distance between a local time zone and UTC, expressed as a number of hours\par
and minutes, between -13:00 and +12:59.\par
\par
DISTINCT\par
[1] Adhering to Cantor's definition of a set, in that all members are\par
distinguishable from one another.\par
[2] An SQL keyword, which causes redundant duplicates (if there are any) to be\par
discarded or ignored. In the statement "SELECT DISTINCT Column1,Column2 FROM\par
Table_1;", the word DISTINCT is sometimes called the "distinct set\par
quantifier". See also: DUPLICATE, UNIQUE.\par
\par
DISTINCT PREDICATE\par
An SQL3 term. The predicate "x IS DISTINCT FROM y" is FALSE if x and y are\par
duplicates, otherwise it is TRUE.\par
\par
DISTINCT TYPE\par
An Object/Relational term. A UDT which is not a structured type. A distinct\par
type is made with "CREATE TYPE AS <predefined data type> ... FINAL"; it is\par
(perhaps) always instantiable; it (perhaps) has methods; it cannot be a\par
subtype or supertype of anything except itself. Distinct types are supposed to\par
be useful when "senseless" assignments/comparisons are avoidable through\par
strict type checking.\par
\par
DISTRIBUTIVE\par
An arithmetic term. What happens to one member of the class, happens to all\par
members. Since A*(B+C) is the same as A*B+A*C, multiplication is distributive\par
over addition. Addition is not distributive over multiplication, because\par
A+(B*C) <> A+B * A+C.\par
\par
DLL\par
A Windows term. A library which is loaded at runtime.\par
\par
DML\par
See: DATA MANIPULATION LANGUAGE.\par
\par
DOCUMENTATION_SCHEMA\par
An SQL3 term. A set of implementation-defined Base tables which any user can\par
SELECT from, containing information about the DBMS's workings (presumably --\par
this part of the Standard is unfinished).\par
\par
DOMAIN\par
[1] A set of values, all of which have the same data type. For instance the\par
Domain of cardinal numbers includes those integers which are >= 0. (Notice\par
that this would be an infinitely large set; if we are talking about database\par
contents, see: COLUMN). In standard SQL, we use Domains in the way we would\par
use simple macros in C, when we define Columns.\par
[2] (In set theory only) the set of values of the first coordinate (i.e.: the\par
first Column) of a binary relation.\par
\par
DORMANT\par
(Of a Connection or session) Not current. If you are already connected, and\par
you connect again, you end up with two Connections. The old one is dormant,\par
the new one is current. Nothing happens on a dormant Connection unless you\par
revive it: by disconnecting the current Connection, by using SET CONNECTION or\par
by performing an operation which causes an implicit SET CONNECTION.\par
\par
DOUBLE PRECISION\par
One of the three approximate numeric data types. The others are REAL and\par
FLOAT.\par
\par
DOUBLE QUOTE\par
A special character used to enclose delimited identifiers. Although the\par
Unicode name for " is "quotation mark", in SQL the word is double quote and is\par
not the same as quote. See also: QUOTE, ".\par
\par
DRIVER\par
[1] An ODBC term. A software component, generally a DLL, which mediates\par
between an application and a DBMS. The application is linked to Microsoft's\par
Driver Manager library. The application calls an ODBC function, the Driver\par
Manager receives it and passes it on to the driver, the driver calls the DBMS\par
engine. (In a multi-tier environment there would be yet another pass-on, from\par
the DBMS "client" to the "server".) The engine does the work, and results\par
meander back via the same components till they reach the application.\par
[2] An SQL Standard term. "A component of the client that is responsible for\par
communicating with one or more SQL-servers as a driver." Process details are\par
implementation-defined, the simplest scenario would be: the application calls\par
a single library that does all the DBMS work.\par
\par
DRIVER MANAGER\par
An ODBC term. A DLL supplied by Microsoft, and included in many host language\par
compiler packages from Microsoft and other vendors. An ODBC application\par
program calls the driver manager, which calls a driver. The "management" that\par
the program does is mainly: deciding what driver to call, buffering connection\par
data and performing some elementary translations so that drivers of different\par
versions will appear similar to the application.\par
\par
DRIVER SETUP DLL\par
An ODBC term. A DLL supplied by a DBMS vendor (it might be within the vendor's\par
driver), which is needed for installing a driver.\par
\par
DROP\par
Destroy. Remove an Object (a Table or Column or Constraint or Domain or\par
Trigger or Collation or Translation or Character set) from the Catalog. If the\par
Object is a Table, delete all rows in the Table too.\par
\par
DUPLICATE\par
An SQL Standard term. Two values are duplicates if they are equal or if they\par
are both NULL. See also: DISTINCT, EQUAL.\par
\par
DURABILITY\par
Resistance of a committed transaction's record to change or destruction after\par
the COMMIT. Enhanced by flushing disk buffers, and by logging. Durability is\par
one of the four ACID transaction features.\par
\par
DYADIC\par
An SQL Standard term. A dyadic operator has two operands, and so is\par
distinguished from niladic, monadic and triadic operators. Multiplication (*)\par
is dyadic.\par
\par
DYNAMIC CONSTRAINT\par
An Assertion or integrity Constraint, for which both before and after images\par
can be addressed, or temporary values. See also: TRIGGER.\par
\par
DYNAMIC CURSOR\par
ODBC term. Scrollable updatable Cursor. When a row is updated, the new data\par
will be accessible via the Cursor. With a static Cursor, the data would appear\par
to be unchanged.\par
\par
DYNAMIC PARAMETER\par
CLI term. In the SQL statement "SELECT * FROM Table_1 WHERE col_1 = ? AND\par
col_2 = ?;" there are two dynamic parameters, represented by question marks in\par
the input string. A dynamic parameter is an input to the DBMS. An output from\par
the DBMS is a target.\par
\par
DYNAMIC PARAMETER SPECIFICATION\par
[1] CLI term. The question mark ? which signifies that a dynamic parameter is\par
to be substituted for a literal at execute time.\par
[2] Embedded SQL term. The :<host-variable-name>.\par
A dynamic parameter is an input parameter.\par
\par
DYNAMIC PARAMETER VALUE\par
The application program's copy of a dynamic parameter.\par
\par
DYNAMIC SQL\par
With dynamic SQL, the application can find out at runtime what the description\par
of parameters and result set Columns is. In the CLI, this capability depends\par
on the application's capability of accessing "desc" resources (the descriptor\par
areas). The opposite is: static SQL.\par
\par
DYNAMIC STATEMENT\par
Also: dynamic SQL statement. An SQL statement (in a Module or embedded SQL)\par
which maintains resources for use in dynamic SQL. The dynamic statements are:\par
EXECUTE, EXECUTE IMMEDIATE, ALLOCATE DESCRIPTOR, DEALLOCATE DESCRIPTOR, GET\par
DESCRIPTOR, SET DESCRIPTOR, PREPARE, DEALLOCATE PREPARE, DESCRIBE INPUT,\par
DESCRIBE OUTPUT.\par
\par
DYNASET\par
An MS-Access term. A result set produced via an updatable query.\par
\par
E\par
\par
EBCDIC\par
Abbreviation for Extended Binary Coded Decimal Interchange Code.An 8-bit\par
Character set used on larger IBM computers. \par
\par
ELEMENT\par
An SQL Standard term. An occurrence in an array, addressed with\par
"array-name[N]".\par
\par
ELEVATOR SEEK\par
An operating system term. Travelling through a disk's physical locations in\par
the manner of an elevator, instead of jumping backward or forward for each\par
request.\par
\par
EMBEDDED SQL\par
SQL statements which are placed within host language programs in a way which\par
makes it appear that they are part of the language, and which require a\par
precompilation step to be converted to API calls. Described in ISO 9075-5\par
"SQL/Bindings".\par
\par
EMPTY SET\par
A set-theory term. A set which has no members. That is, a set whose\par
cardinality is zero.\par
\par
ENCAPSULATION\par
An object-orientation term. The placing of activities and data together in a\par
black box. Attributes in ADTs are encapsulated, so they are accessible only\par
via observer functions, if at all.\par
\par
ENCODING\par
Also (occasionally) coding. A convention for character machine representation.\par
For instance we may agree that the encoding for 'A' is one octet, with bits =\par
01000001. The set of encodings for the characters of a repertoire is the\par
Form-Of-Use. A map of encodings for a one-octet Character set is a Codepage.\par
\par
ENCOMPASSING TRANSACTION\par
It is possible that the DBMS environment is part of some wider environment\par
(for example a network, or an automated cash drawer). In such a case a\par
"COMMIT" by the DBMS alone could be premature (for example because the rest of\par
the network must also commit, or because the drawer is stuck). In that case\par
the COMMIT is the responsibility of the larger system. The activities carried\par
out by the larger system are the "encompassing transaction".\par
\par
ENTITY\par
The concept which we try to reflect with the database construct, "Table". For\par
instance, there are such things as "Customers" and "Sales". In a "Customers"\par
Table, each customer is an occurrence of the entity.\par
\par
ENTRY SQL\par
The lowest level of SQL-92 Standard conformance (below Intermediate SQL).\par
\par
ENV\par
Also Allocated SQL-Environment. A CLI term. A structured area created by the\par
SQLAllocHandle (SQL_HANDLE_ENV,...) function. An env can contain several dbcs,\par
which in turn can contain several stmts. The CLI functions which reference\par
envs always use a handle. We call the handle of an env a henv. The full\par
standard terms are "Allocated SQL-Environment" and "handle of allocated\par
SQL-Environment", but programs and constants -- including those programs and\par
constants which appear in the Standard -- are abbreviated: env and henv.\par
\par
ENVIRONMENT\par
[1] The global situation which applies for all database connections. For\par
example, the environment might be: the Windows95 operating system, with no\par
network.\par
[2] Whatever the DBMS allocates when a program calls SQLAllocEnv, presumably\par
an area of memory with session-specific information.\par
[3] The Cluster plus the Connections.\par
\par
ENVIRONMENT ATTRIBUTE\par
There is only one standard environment attribute: see NULL TERMINATION.\par
\par
ENVIRONMENT HANDLE\par
See: HENV.\par
\par
EQUAL\par
Two values are equal if they have the same measure. For numeric values:\par
subtracting one value from the other yields zero -- not necessarily with the\par
same representation e.g.: 5.0 = 5, and not necessarily exactly, e.g.: 1.0E+1\par
might equal 10.00000001. For character values: the Collation decides -- e.g.:\par
'ABC' might equal 'ABC '. A NULL is not equal to a NULL (the equality\par
comparison would return UNKNOWN), but see also: DUPLICATE.\par
\par
EQUIJOIN\par
Also spelled equi-join. A join which matches Columns using the = operator.\par
This is by far the most common type of join.\par
\par
EQUIVALENT\par
The Standard uses equivalent to mean "corresponding" (for example lower-case u\par
is equivalent to upper-case U), or "having the same meaning" (for example the\par
expression "A /* comment */ + B" is equivalent to the expression "A + B"), or\par
even "equal" -- but in that case we would prefer to use the exact word: equal.\par
"Equivalent" is the correct word to use when comparing identifiers.\par
\par
ERROR\par
Not a formally defined word, but as a general rule the word "error" refers to\par
mistakes detected by the DBMS in its input -- a syntax error in the SQL\par
statement, an array subscript out of range, an attempt to retrieve a NULL\par
without using an indicator, etc. See also: EXCEPTION CONDITION.\par
\par
ESCAPE\par
[1] An ODBC term, designating a gob of non-standard syntax which is placed\par
within an SQL statement inside \{braces\}.\par
[2] A replacement factor in a LIKE or SIMILAR pattern.\par
[3] An obsolete IBM term, referring to the double quote character which is\par
placed at the start or end of a delimited identifier.\par
\par
ESCAPE SEQUENCE\par
[1] (in standard C) A backslash followed by a code value or a mnemonic, used\par
for hard-to-read or extended characters. Examples: \\" \\0 \\t.\par
[2] (in a variable-encoding Character set) a state-change signal to the effect\par
that the meaning of following characters is to be interpreted according to\par
different rules than were used for preceding characters.\par
\par
ESTABLISH\par
[1] The SQLConnect function "establishes a connection". It is possible for a\par
dbc (standard term: SQL-connection) to be unestablished if it has been\par
allocated with the SQLAllocHandle(SQL_HANDLE_CONNECT,...) function but no\par
SQLConnect has been done, or SQLDisconnect has been done.\par
[2] The SQLFetch or SQLFetchScroll function "establishes a current row" by\par
positioning the Cursor over a particular row in the result set.\par
\par
EVENT\par
A general term. An action which may be detected by some system which then\par
generates a further action. For example: in Windows, a mouse click is an\par
event. For example: a Trigger event.\par
\par
EXACT NUMERIC\par
One of: SMALLINT, INTEGER, DECIMAL, NUMERIC -- the numeric data types which\par
are not "approximate numeric".\par
\par
EXCEPT\par
Merge two Tables, excluding rows which have values in common. See also:\par
INTERSECT, UNION.\par
\par
EXCEPTION CONDITION\par
[1] An SQL Standard term. An exception is a syntax error, attempted access\par
violation, data incompatibility or environmental problem -- usually we'd just\par
call it an "error". SQL statements or CLI functions which fail to execute will\par
return an "exception condition" as part of the diagnostics. A mere warning or\par
no-data situation is not an exception -- see: COMPLETION CONDITION. Usually an\par
operation which returns an exception condition has no effect -- it merely\par
fails, but that's not in the definition.\par
[2] In non-SQL contexts an "exception condition" is either an error or a\par
warning.\par
\par
EXCEPTION STATEMENT\par
The declarative statement in embedded SQL that begins with the words EXEC SQL\par
WHENEVER.\par
\par
EXCLUSIVE\par
A type of lock. If Job #1 has an exclusive lock on row X, then Job #2 can\par
neither read nor write row X. Compare: SHARED LOCK.\par
\par
EXECUTE\par
[1] Run. Do. Go. Execution is the activity of an SQL statement, or statement\par
within a host language, which is distinct from preparation i.e.: from\par
precompilation / preparation / binding.\par
[2] A CLI term. Call the SQLExecute function.\par
\par
EXISTS\par
One of the SQL predicates, almost always associated with a correlated\par
subquery, as in "SELECT * FROM T_1 WHERE EXISTS (SELECT * FROM T_2 WHERE\par
T_2.col = T_1.col);" where the predicate means "such that there is a row of\par
Table T_2 whose col Column equals a col Column in any row of T_1".\par
\par
EXPLAIN\par
Describe an access plan. This is a non-standard optional command in some\par
DBMSs. For example, EXPLAIN might deliver the information that a query will be\par
executed using an index.\par
\par
EXPLICIT\par
Right there in black and white. Specified. The reverse is implicit.\par
\par
EXPLICITLY-ALLOCATED DESC\par
An ODBC term. See: USER DESC.\par
\par
EXPONENT\par
A number within an approximate numeric literal, possibly signed, preceded by\par
the letter E. The number indicates what power to raise 10 to. For example,\par
15E+00 is "15 times 10 to the zeroth power (i.e.: 1)". See also: MANTISSA.\par
\par
EXPONENTIAL NOTATION\par
Also known as scientific notation or floating-point notation. In its standard\par
form, exponential notation represents approximate numeric literals using: an\par
optional sign, a decimal mantissa (usually between 1 and 10), the letter E, an\par
optional sign and a decimal exponent. For example, the number 123 is\par
represented in exponential notation as 1.230000E+02.\par
\par
EXPORT\par
To ship data out of the database. Usually this involves taking an entire\par
Table's contents and converting it into a file format that can be read by\par
non-DBMS programs.\par
\par
EXPRESSION\par
Any combination of operators and operands, yielding a value that can in turn\par
be used as an operand. Sometimes expressions are classified by what they\par
return ("value expressions" "Table expressions"), in non-standard texts\par
expressions are classified by what they contain ("conditional expressions"\par
"group expressions").\par
\par
EXTENSION\par
A feature which is not in the SQL Standard, generally requiring additional\par
language. For example, indexes.\par
\par
EXTERNAL ROUTINE\par
[1] External here means "outside the (SQL) environment". A routine written in\par
a host language which is called from SQL.\par
[2] In any non-SQL context, an "external routine" is simply a routine in a\par
different program.\par
\par
EXTRACT\par
An SQL integer function, which returns a component of a datetime. For example,\par
EXTRACT (YEAR FROM DATE '1994-01-12') is equivalent to the integer 1994.\par
\par
EXTREME FUNCTION\par
Infrequent term. The aggregate functions MIN() and MAX() are collectively\par
referred to as the "extreme" functions.\par
\par
F\par
\par
FALSE\par
[1] In two-valued logic, a logical value which is not TRUE.\par
[2] In SQL (which often uses three-valued logic), a logical value which is\par
neither TRUE nor UNKNOWN. See also: LOGIC.\par
\par
FAMILY\par
An Object/Relational term.\par
[1] Just as a human family may be thought of as the set of people who have (or\par
are) a common ancestor, a "type family" is the set of all types with a common\par
supertype. Since predefined data types or distinct types cannot have proper\par
supertypes, the only type families which can have more than one member are\par
structured types. For an illustration of a type family, see: MINIMAL COMMON\par
SUPERTYPE. See also: HIERARCHY, STRUCTURED TYPE, MAXIMAL SUPERTYPE.\par
[2] Similarly to [1], a "Table family" is the set of all Tables with a common\par
supertable.\par
\par
FEATURE\par
A capability of a particular DBMS, to handle a certain data type or operation.\par
With the CLI, one can find out about some DBMS features by calling the\par
SQLGetInfo function. With SQL3, the features are in the SQL_FEATURES\par
INFORMATION_SCHEMA View. For example, feature E091-5 is: can this DBMS do the\par
SUM set function?\par
\par
FETCH\par
The act of taking a row, or a set of rows, out of a result set. The data and\par
status indicators generally are transferred to buffers allocated by the host\par
language program.\par
\par
FETCH ORIENTATION\par
One of: NEXT, FIRST, LAST, PRIOR, ABSOLUTE, RELATIVE. A modifier that tells\par
the DBMS which direction to go in the result set, before fetching a row.\par
Embedded SQL example: "EXEC SQL FETCH ABSOLUTE 55 Cursor_name INTO\par
:host_variable :indicator_parameter;".\par
\par
FETCH TARGET\par
The host variable and indicator variable which will receive the value of a\par
Column in a result, when FETCH happens. Fetch target addresses are specified\par
in the ARD.\par
\par
FIELD\par
[1] An instance of a Column in a row of a Table. Thus, a scalar value which is\par
taken from a row and Column intersection.\par
[2] Loosely: a Column.\par
[3] An SQL3 term. A (Field name, data type) pair within a row type. The Field\par
value is the data type value.\par
\par
FILE\par
A persistent-storage object which often is physical (on disk), and often has a\par
one-to-one relationship with an SQL persistent Base table. We reject the C\par
standard definition: a sequence of bytes including disk files, pipelines and\par
console input.\par
\par
FILE-BASED DRIVER\par
An ODBC term. A driver that contains a database engine instead of calling a\par
database engine (as a "DBMS-based driver" does). Do not be misled by the word\par
"file-based"; all ODBC drivers must ultimately perform file input/output at\par
some level.\par
\par
FILE SERVER\par
An architecture, having to do with computers in a network. A file server does\par
file operations (open/read/write/close etc.) but does not do higher-level\par
database management operations (SELECT/UPDATE/etc.). Thus it differs from a\par
client/server architecture. Because some people believe that file servers are\par
relatively inefficient, they are becoming less common.\par
\par
FINAL\par
Part of a UDT definition. If a UDT is "final", it may not be a proper\par
supertype -- that is, it may not be the object of an UNDER clause in a CREATE\par
TYPE statement.\par
\par
FIPS\par
Abbreviation for [United States] Federal Information Processing Standard. The\par
main document is FIPS PUB 127-2, Database Language SQL (30 pages), which\par
helpfully specifies what the US government wants for some feature that the\par
SQL-92 Standard says are "implementor-defined". The document is also issued as\par
a package along with the SQL-92 Standard (ANSI X3.135-1992).\par
\par
FIRE\par
Execute (the SQL statements in a Trigger). The phrase "fire a Trigger" is\par
popular but we do not use it in this book because the standard phrase is\par
"activate a Trigger".\par
\par
FIRST NORMAL FORM\par
A relational term. A Table is in first normal form if there are no\par
multiple-occurrence Columns. Since standard SQL-92 does not allow array\par
definitions, this is fairly easy to achieve. See also: NORMALIZATION.\par
\par
FIXED-LENGTH ENCODING\par
An encoding for a Character set, in which all characters require the same\par
amount of computer storage space -- generally one octet for the 8-bit sets for\par
European languages, but two octets (16 bits) for the most popular\par
manifestation of Unicode. See also: CODE PAGE, FORM-OF-USE, ISO 8859-X,\par
VARIABLE-LENGTH ENCODING.\par
\par
FIXED-LENGTH STRING TYPE\par
CHAR and BIT Columns are "fixed-length" if they are not explicitly defined as\par
VARYING. Insertions into such Columns are always padded on the right, so that\par
every Column value has the same length. All character string literals and bit\par
string literals are fixed-length.\par
\par
FLAGGER\par
A feature or utility provided by the DBMS vendor, which helps application\par
programmers identify SQL language which is not standard, or which depends on\par
implementation-specific language extensions. One way of doing this is to\par
direct the precompiler to put marks in the embedded SQL source code program.\par
\par
FLOAT\par
One of the three approximate-numeric data types (the others are REAL and\par
DOUBLE PRECISION).\par
\par
FOLD\par
A scalar function used on character strings to change case. The two fold\par
functions in SQL are UPPER and LOWER. The two fold functions in ODBC are UCASE\par
and LCASE.\par
\par
FOR\par
A PSM term. A keyword which introduces a "for statement", which takes the\par
form: [<label> :] FOR <loop variable name> AS [Cursor details] <Cursor\par
specification> DO <SQL statement list> END FOR [<ending label>]. See also:\par
REPEAT, LOOP, WHILE.\par
\par
FOREIGN KEY\par
A set of Columns in a Base table, corresponding to some unique key. The\par
foreign key is said to "reference" the unique key. Values in foreign key\par
Columns must match values in referenced Columns. Usually the foreign key and\par
unique key are in different Tables, and usually the unique key is a primary\par
key.\par
\par
FORM-OF-USE\par
An encoding for a string of characters. In the western world most Forms-Of-Use\par
are eight-bit or sixteen-bit fixed-length encodings. In Asia some Forms-Of-Use\par
are variable-length encodings. An example of a Form-Of-Use is: the Windows\par
code page. See also: ENCODING, CODE PAGE, ISO 8859-X, UNICODE, FIXED-LENGTH\par
ENCODING, VARIABLE-LENGTH ENCODING, REPERTOIRE. Technical Note: Because a\par
variable-length encoding may include escape characters which in effect cause\par
the encoding method to change within a string, we define Form-Of-Use as an\par
encoding for a string.\par
\par
FORMAT RULE\par
A rule about the structure and composition of tokens in an SQL statement. For\par
example: "CREAT TABL Table_1 (x CHAR(5)" violates format rules. On the other\par
hand: "CREATE TABLE Table_1 (x CHAR(0))" is cleanly formatted; however, it\par
breaks a syntax rule. See also: SYNTAX RULE.\par
\par
FORTRAN\par
A language which can be used as a host language for SQL.\par
\par
FORWARD-ONLY CURSOR\par
A Cursor that can only go forward, i.e.: that supports "FETCH NEXT" operations\par
but not "FETCH LAST", "FETCH ABSOLUTE", etc., as a scroll Cursor does.\par
\par
FRACTIONAL PRECISION\par
In a TIME or a TIMESTAMP or an INTERVAL which includes a SECOND field, the\par
number of positions after the decimal point which indicate the fraction of a\par
second. See also: SCALE, DECIMALDIGITS.\par
\par
FREE\par
[1] A CLI term. Tell the DBMS that a resource (env or dbc or stmt or desc) is\par
no longer needed, usually via a call to SQLFreeHandle.\par
[2] An SQL3 keyword. With FREE LOCATOR, for a BLOB, CLOB, NCLOB, ARRAY or UDT,\par
we can cancel the association between a locator variable and its value.\par
\par
FROM CLAUSE\par
The word FROM followed by one or more Table references. For example this\par
SELECT statement contains a FROM clause: "SELECT * FROM Table_1;". In the\par
Standard, the term "FROM clause" is used only in the context of SELECT (not\par
DELETE) statements.\par
\par
FULL OUTER JOIN\par
An outer join which fills in for non-matching values on both the left and the\par
right. For example: if Table A has \{1,3,5\} and Table B has \{1,2,3\} then the\par
full outer join of A and B has \{ 1 1, NULL 2, 3 3, 5 NULL\}. See also: OUTER\par
JOIN.\par
\par
FULL SQL\par
One of the levels of conformance of standard SQL-92, above Entry and\par
Intermediate. An implementation which claims "full SQL conformance" is making\par
a big claim.\par
\par
FULL-TABLE SCAN\par
If the DBMS must read every row in the Table and check whether the individual\par
row matches a search condition, it's doing a full-Table scan. With big Tables\par
this may be less efficient than alternatives such as indexed or hashed lookup.\par
If the reading is from beginning to end (as it usually is) then a full-Table\par
scan is synonymous with sequential search.\par
\par
FUNCTION\par
[1] A CLI term. A procedure, callable from a host language program, which\par
returns a value. For example, all CLI functions return a 16-bit integer in\par
return code.\par
[2] An SQL-92 term. An operator which returns a single value, classified\par
according to the number of operands (or parameters) following it: niladic\par
function (no operands, e.g.: CURRENT_TIME), scalar function (one or more\par
operands but from a single row, e.g.: UPPER), set function (one operand\par
possibly from more than one row, e.g.: SUM). For the latter types, the word\par
"function" may apply to both the operator keyword, and to the combination of\par
the keyword and its (parenthesized) operands. See also: ROUTINE.\par
\par
FUNCTIONAL DEPENDENCY\par
A relational term.\par
(Of a Column) Whose value can be derived (determined) via examination, by a\par
human, of a value in another Column. Example #1: "If it's Tuesday this must be\par
Belgium" (title of a movie about tourists, where one attribute -- location --\par
is uniquely defined by another -- day-of-week). Example #2: "Since name =\par
'Pinocchio', nose_size = 'large'". See also: NORMALIZE.\par
\par
G\par
\par
GATEWAY\par
An ODBC term. A program which is called according to the CLI protocol for\par
database X, and calls according to the protocol for database Y. Thus a gateway\par
is middleware. An example is Micro Decisionware's "DB2 Gateway" which makes\par
IBM's DB2 look accessible to SQL Server calls.\par
\par
GENERAL CONSTRAINT\par
Non-standard term. See: ASSERTION.\par
\par
GENERAL RULE\par
An SQL Standard term. A general rule specifies what is supposed to happen when\par
an SQL statement executes. See also: ACCESS RULE, SYNTAX RULE.\par
\par
GET DESCRIPTOR\par
An embedded SQL term. A non-preparable statement which retrieves one or more\par
fields from a descriptor area. Does the same job as the CLI's SQLGetDesc...\par
functions. Example: "EXEC SQL GET DESCRIPTOR desc1 VALUE 1 :simple_target_spec\par
= TYPE;".\par
\par
GET DIAGNOSTIC\par
An embedded SQL term. A non-preparable statement which retrieves one or more\par
fields from a diagnostics area. Does the same job as the CLI's SQLGetDiag...\par
functions. Example: "EXEC SQL GET DIAGNOSTICS :simple_target_spec =\par
ROW_COUNT;".\par
\par
GLOBAL\par
Accessible from any Module: the scope is the SQL-session, rather than the\par
Module. The term is most commonly encountered in embedded SQL and in the\par
phrase "global temporary Table".\par
\par
GLYPH\par
A Unicode term. From the Greek "glupho": carve, write on a tablet. What a\par
character looks like to a human after it is drawn or printed. As opposed to\par
encoding -- what the bits are which are used to represent the character to a\par
computer.\par
\par
GMT\par
See: GREENWICH MEAN TIME.\par
\par
GRANT\par
[1] An SQL verb. To give a Privilege (to a user).\par
[2] Sometimes used as a synonym for the noun "Privilege"; the usage is\par
somewhat inexact since not all Privileges can be explicitly granted.\par
\par
GRANT OPTION\par
A characteristic of a Privilege: can it be passed on to other users? If user a\par
says "GRANT <Privilege> TO b WITH GRANT OPTION", then user b has the right to\par
grant the Privilege to other users.\par
\par
GRANTEE\par
The object of a GRANT statement; the user who should receive the Privilege(s).\par
Example: in the statement "GRANT SELECT ON Table_1 TO Sam;" Sam is the\par
grantee.\par
\par
GRANTOR\par
The current user when a GRANT statement happens; the user who is granting the\par
Privilege(s). Example: CONNECT ... (authorization-ID = Sally) then "GRANT\par
SELECT ON Table_1 TO Sam;". Sally is the grantor.\par
\par
GRANULARITY\par
[1] (Of a lock) Bigness of locked area. From coarse to fine, the hierarchy\par
usually is something like: "Table locking", "page locking", "row locking",\par
"Column locking".\par
[2] (Of a Trigger) Whether execution happens once per statement (FOR EACH\par
STATEMENT), or happens once per row-change (FOR EACH ROW).\par
\par
GRAPHIC\par
(Of a character) Visible. Displayable. As opposed to a control character, but\par
space is also a graphic character.\par
\par
GRAPHIC_IRV\par
See: ASCII_GRAPHIC.\par
\par
GREENWICH MEAN TIME\par
An obsolete standard for determining time displacement values, named after the\par
Greenwich Observatory in England, longitude zero. See also: UTC.\par
\par
GROUP\par
A mathematical term. To combine elements of a set using a binary operator. For\par
SQL the relevant operator is "duplicate", so an SQL group is formed by\par
combining duplicate values.\par
\par
GROUP BY CLAUSE\par
A clause beginning with the words GROUP BY, used for lumping together\par
duplicate values from detail rows, often for the purpose of summarizing.\par
\par
GROUP FUNCTION\par
Or Group-Value Function. See: SET FUNCTION.\par
\par
GROUPED TABLE\par
A set of rows produced by a GROUP BY clause or a HAVING clause. Each row is\par
distinct, due to the definition of "group". Rows in grouped Tables may contain\par
values from set functions.\par
\par
GROUPED VIEW\par
A View which contains an aggregate function, a GROUP BY clause or a HAVING\par
clause in its definition.\par
\par
GROUPING COLUMN\par
A Column in a GROUP BY clause. The grouping Column is "what we group by". For\par
example: if Table Table_1 has a Column c and "SELECT c FROM Table_1;" would\par
produce \{'A','B','A ','C',NULL,NULL\} then "SELECT c,COUNT(c) FROM Table_1\par
GROUP BY c;" would produce \{'A' 2,'B' 1,'C' 1,NULL 2\} and the grouping Column\par
is c.\par
\par
H\par
\par
HANDLE\par
A value, usually a 32-bit integer, which is used to refer to a resource. For\par
example: ODBC has handles for environment, connection and statement. For\par
example: DBMSs often store a BLOB's handle, rather than the BLOB itself, in\par
the physical row of a Table file.\par
\par
HANDLER\par
[1] A routine which deals with exceptions. A handler is called when the SQL\par
statement fails.\par
[2] A PSM term. A handler is that which is declared by:\par
<handler declaration> ::=\par
  DECLARE \{CONTINUE|EXIT|UNDO\} HANDLER\par
  FOR <condition value list>\par
  <handler action = SQL procedure statement>\par
... where a condition values is one of: a SQLSTATE value, a condition name,\par
SQLEXCEPTION, SQLWARNING or NOT FOUND.\par
\par
HASH\par
A number (Often a 32-bit integer) which is derived from Column values (fields)\par
employing a lossy compression algorithm. DBMSs occasionally use hashing to\par
speed up access, but "indexes" are a more common mechanism.\par
\par
HAVING CLAUSE\par
A clause which begins with the word HAVING and contains a search condition.\par
The HAVING clause is always associated with GROUP BY (although the GROUP BY\par
may be implicit). The counterpart of a WHERE clause for grouped Tables.\par
\par
HDBC\par
A CLI term. The handle of a dbc (a connection resource). We use hdbc as an\par
abbreviation for what the SQL Standard calls "handle of the SQL-connection".\par
The sqlcli.h header file contains the line: "typedef SQLINTEGER SQLHDBC /*\par
connection handle */". See: DBC.\par
\par
HDESC\par
A CLI term. The handle of a desc.\par
\par
HENV\par
A CLI term. The handle of an env. We use henv as an abbreviated substitute for\par
the cumbersome SQL Standard term "handle of the allocated SQL-environment".\par
The sqlcli.h header file contains the line: "typedef SQLINTEGER SQLHENV /*\par
environment handle */". See: ENV.\par
\par
HEXADECIMAL\par
(Of a number) Using radix = 16 (or: number base 16). SQL numeric values are\par
always decimal, but one can use hexadecimal numbers in bit or binary literals\par
-- for example X'A74B'.\par
\par
HEXIT\par
One of: 0123456789ABCDEF. In the bit string literal X'0A', 0 and A are hexits.\par
Although used by the standard, "hexit" is a rare word. Prefer "hexadecimal\par
digit".\par
\par
HIERARCHICAL DATABASE\par
A database where all relationships between Tables are one-to-one or\par
one-to-many, never many-to-many: "a servant cannot have two masters". For\par
example: SALESREPS --> SALESREPS_SALES is one hierarchy and CLIENTS -->\par
CLIENTS_SALES is another hierarchy, and it would be difficulty to "join"\par
SALESREPS_SALES to CLIENTS_SALES. See also: RELATIONAL DATABASE.\par
\par
HIERARCHY\par
[1] The SQL Object hierarchy is: Cluster --> Catalog --> Schema --> Schema\par
Object (Table, Domain, Constraint, etc.). See also: CLUSTER.\par
[2] A "type hierarchy" or "UDT hierarchy" is a line of descent from supertypes\par
to subtypes. For example, Animals to Mammals to Primates to Chimps -- Animals\par
is the top of the hierarchy (the "maximal supertype"), Chimps is the bottom of\par
the hierarchy (the "leaf type").\par
[3] A "hierarchy option" is part of a Privilege descriptor, indicating that\par
what is granted for a supertable is also granted for all subtables. See also:\par
FAMILY.\par
\par
HOLDABLE CURSOR\par
A Cursor which remains open when the transaction is committed. This is\par
abnormal; only in SQL3 may Cursors be declared as holdable.\par
\par
HOST LANGUAGE\par
A computer language used to write programs that interface with SQL. The\par
standard host languages are: Ada, C, COBOL, Fortran, MUMPS, Pascal, PL/I.\par
Other languages, such as Java and BASIC, are seen with some frequency in\par
microcomputer circles. A program written in a host language is a "host\par
language program". It will contain embedded SQL statements, or it will call\par
SQL via a CLI.\par
\par
HOST VARIABLE\par
A variable defined in a host language program, which is passed (usually by\par
address) to SQL. Usually the term "host variable" is used for embedded SQL\par
only (for a CLI see: PARAMETER). The host variable is always preceded by a\par
colon (:). An indicator may follow; the indicator is not considered part of\par
the host variable. Embedded SQL snippet: "... EXEC SQL BEGIN DECLARE SECTION;\par
x char[5]; EXEC SQL END DECLARE SECTION; ... EXEC SQL UPDATE Table_1 SET col =\par
:x; ..." -- x is an input host variable.\par
\par
HSTMT\par
An unofficial abbreviation, used mostly within programs. In CLI applications\par
we have a convention that h stands for handle and so hstmt is a handle of a\par
stmt. So hstmt is what the SQL Standard calls "handle of the SQL statement".\par
The sqlcli.h header file contains the line: "typedef SQLINTEGER SQLHSTMT /*\par
statement handle */". See also: STMT, HDBC, HENV.\par
\par
I\par
\par
IBM\par
A vendor. Makes "DB2" (short for: IBM Database 2) Universal Database, which in\par
the past has had a great influence on the SQL Standard. {\field{\*\fldinst{HYPERLINK "www.ibm.com"}}{\fldrslt{\ul\cf1 www.ibm.com}}}\f1\fs21 .\par
\par
IDA\par
See: ITEM DESCRIPTOR AREA.\par
\par
IDEMPOTENT LAW\par
A set theory term. "A UNION A" returns A, "A INTERSECT A" returns A.\par
\par
IDENTIFIER\par
An alphanumeric string by which one references an Object in SQL. Identifiers\par
are subject to some restrictions -- must not be the same as a keyword, may\par
contain only certain characters in certain places etc. -- so that the parser's\par
job will be easier. An identifier is part of a name; no qualification is\par
necessary if an identifier uniquely identifies an Object. An analogy: the name\par
"Ralph Klein" refers to a person who may be referred to simply as "Ralph", but\par
if there are two Ralphs in the room we would have to use the fully-qualified\par
name "Ralph Klein". Here is an example of a qualified Table name which\par
contains three identifiers: Catalog1.Schema1.Table1. See also: REGULAR\par
IDENTIFIER, DELIMITED IDENTIFIER.\par
\par
IDENTIFIER CHAIN\par
A sequence of identifiers separated by periods. Usually the chain reflects\par
part of the hierarchy of Objects: [Cluster.] [Catalog.] [Schema.] Schema\par
Object. For Columns, the typical chain is [Table name.] Column name, or\par
[Correlation name.] Column name. See also: QUALIFIER.\par
\par
IDENTIFIER LENGTH\par
The number of characters in an identifier. The SQL-89 standard says the\par
maximum is 18. The SQL-92 and SQL3 standards say the maximum is 128. You can\par
check by passing SQL_MAXIMUM_IDENTIFIER_LENGTH to the SQLGetInfo function. If\par
you use non-Latin characters in identifiers, allow more than 128 octets in\par
your application program buffers because characters might be 16-bit.\par
\par
IDENTITY\par
An operation which returns the same value as was in the input -- thus an\par
identity operation on A is "A*1" or "A+0". In set theory, if you union S with\par
the empty set you end up with S.\par
\par
IEC\par
Abbreviation for International Electrotechnical Commission.\par
\par
IEF\par
See: INTEGRITY ENHANCEMENT FEATURE.\par
\par
IF STATEMENT\par
A PSM term. An SQL conditional statement analogous to the "if" statements of C\par
and Pascal. The usual format is "IF <search condition> THEN <statement list>\par
END IF", or "IF <search condition> THEN <statement list> ELSE <statement list>\par
END IF"; there is also provision for ELSEIF. If the search condition is TRUE,\par
the THEN statement list is executed. If the search condition is FALSE or\par
UNKNOWN, the ELSE statement list is executed (if any).\par
\par
IMMEDIATE\par
An SQL keyword. Without waiting. An EXECUTE IMMEDIATE statement both prepares\par
and executes. A SET CONSTRAINTS ... IMMEDIATE statement activates all deferred\par
Constraints.\par
\par
IMPEDANCE MISMATCH\par
A difficulty that arises when we bind SQL and host language programs, arising\par
from the different rules (e.g.: SQL's use of three-valued logic) or slight\par
incompatibilities in data types (e.g.: SQL's use of multiple Character sets).\par
\par
IMPLEMENTATION\par
[1] An SQL Standard term. A particular SQL DBMS, usually associated with a\par
manufacturer and brand name and major version, in a context. For example "IBM\par
DB2 as implemented on the OS/2 operating system". The Standard avoids using\par
the words "DBMS", so one sometimes finds that for an official phrase -- such\par
as "implementation row descriptor" -- one could substitute "DBMS row\par
descriptor" and thus emphasize that we are talking about the DBMS's side of\par
things, rather than the application's.\par
[2] A client-server term. The implementation is both the client and the\par
server, but not the application.\par
\par
IMPLEMENTATION-DEFINED\par
An SQL Standard term. A characteristic of an SQL DBMS left open by the\par
Standard, which must be defined by the vendor, presumably in the manual. For\par
example, the SQL-92 Standard says it is "implementation-defined" whether an\par
SQL-Schema statement must form a separate transaction on its own. Distinguish:\par
IMPLEMENTATION-DEPENDENT.\par
\par
IMPLEMENTATION-DEPENDENT\par
An SQL Standard term. A characteristic of an SQL DBMS left open by the\par
Standard, which need not be, indeed perhaps should not be, defined by the\par
vendor. For example, the SQL-92 Standard says it is "implementation-dependent"\par
what the physical representation of data should look like, so you should\par
regard the file format as ephemeral. Distinguish: IMPLEMENTATION-DEFINED.\par
Because implementation-dependent is eight syllables, we sometimes avoid it and\par
say "not specified" or "up to the vendor".\par
\par
IMPLEMENTATION PARAMETER DESCRIPTOR\par
Also IPD. A parameter descriptor whose information fields are set by the DBMS.\par
As opposed to: APPLICATION PARAMETER DESCRIPTOR.\par
\par
IMPLEMENTATION ROW DESCRIPTOR\par
Also IRD. A resource, containing information about the Columns in a result\par
set, as set up by the DBMS. It can be confused with the Application Row\par
Descriptor which has corresponding fields; think of the distinction this way:\par
the IRD describes the "bound Columns", while the ARD describes the "bound\par
targets". See also: ARD.\par
\par
IMPLEMENTOR\par
The person or company who creates an implementation. See also: VENDOR.\par
\par
IMPLICIT\par
Unstated; tacit; taken as read. In the SQL statement "SELECT COUNT(*) FROM\par
Table_1 HAVING COUNT(*) > 0;" there is an implicit GROUP BY. The reverse is\par
EXPLICIT.\par
\par
IMPORT\par
To ship data into the database. Usually this involves the DBMS reading a file\par
which has been produced by a non-DBMS program, and inserting in one of the\par
database Tables.\par
\par
IN\par
An SQL keyword. An example of an IN predicate: "IN (a,b,c)" or "IN (SELECT\par
Column1 FROM Table_1)".\par
\par
INCLUDE\par
A set-theory term. Set A is included in set B if all members of A are also\par
members of B.\par
\par
INDEX\par
[1] A sorted set of keys and pointers, usually associated with one Column in a\par
Base table, or with several Columns in the same Base table (in which case it\par
may be called a "multi-Column index" or "concatenated index"). DBMSs often use\par
indexes to speed up searches, but indexes are not mentioned in the official\par
Standard. Alternatives are "full Table scans" and "hashes". Nowadays the usual\par
plural seems to be "indexes" rather than "indices".\par
[2] A CLI term. An integer which identifies an occurrence of an array For\par
example, the RecordNumber parameter in the SQLGetDiagField function is\par
sometimes called an index.\par
\par
INDICATOR\par
An integer variable defined in a host language program, whose value\par
"indicates" whether the main ("data") variable is NULL, on both input and\par
input. For example: the embedded SQL statement "EXEC SQL FETCH Cursor1 INTO :a\par
:b;" puts a value into a (a is the data parameter) and a value in b (b is the\par
indicator parameter); if the fetched value is 'x' then a gets 'x' and b gets\par
0; if the fetched value is NULL then a is irrelevant and b gets -1\par
(SQL_NULL_DATA). Also, in some situations, a positive indicator value is\par
returned for a truncated string.\par
\par
INFORMATION_SCHEMA\par
The Schema that contains the Views that describe the database -- the metadata.\par
For example, to find out what Domains exist, one would select from the DOMAINS\par
View in INFORMATION_SCHEMA.\par
\par
INFORMIX\par
A vendor. Makes "Informix Universal Server". {\field{\*\fldinst{HYPERLINK "www.informix.com"}}{\fldrslt{\ul\cf1 www.informix.com}}}\f1\fs21 .\par
\par
INGRES\par
A vendor.\par
\par
INHERIT\par
Take the characteristics of what underlies. For example, a View Column\par
"inherits" the data type of the underlying Base table Column. Inheritance goes\par
from underlying to top, and so is the reverse of cascading.\par
\par
INHERITANCE\par
An Object/Relational term. A subtype inherits every component of a supertype.\par
For example: if type t1 has two attributes -- t1_a and t1_b -- and we define a\par
new type t2 UNDER t1, then t2 automatically has the attributes t1_a and t1_b;\par
it may additionally have its own attributes (called its "non-inherited" or\par
"originally-defined" attributes). SQL allows "single inheritance": although a\par
type hierarchy can have indefinite length, and although a supertype may have\par
many direct subtypes, a subtype may have only one direct supertype.\par
\par
INITIALLY\par
An SQL keyword, used in the definition of Constraints. An INITIALLY IMMEDIATE\par
Constraint starts off as "a Constraint which must be checked when the SQL\par
statement ends"; it may be INITIALLY DEFERRED (deferral is until COMMIT time\par
or until SET CONSTRAINTS ... IMMEDIATE).\par
\par
INLINE CONSTRAINT\par
An Oracle term. A Constraint which is defined within parentheses.\par
\par
INNER JOIN\par
A type of Join which returns only values from existing rows. Inner joins are\par
the normal garden variety join. See also: OUTER JOIN.\par
\par
INNER TABLE\par
For "a LEFT JOIN b" the inner Table is b. For "a RIGHT JOIN b" the inner Table\par
is a.\par
\par
INPRISE\par
A vendor. Former name: Borland. Associated with Delphi and Interbase.\par
\par
INPUT\par
Directional adjective, thinking of the DBMS is the centre. Thus, an "input\par
parameter" is a parameter for data going from the host language to the DBMS.\par
\par
INSENSITIVE CURSOR\par
If a Cursor is insensitive, then changes made outside the Cursor are not\par
visible to the Cursor. By "changes made outside the Cursor" we mean any\par
updates, other than UPDATE|DELETE ... WHERE CURRENT OF <Cursor>, which would\par
affect rows currently in the Cursor or their definition. By "visible" we mean\par
"seeable if we FETCH using the Cursor". If you open an insensitive Cursor,\par
then FETCH with it and see X, then DELETE every row in the Table with some\par
other Cursor, then FETCH with the insensitive Cursor again, you will still see\par
X -- the DELETE happened but is not visible via the Cursor. See also:\par
SENSITIVE, ASENSITIVE.\par
\par
INSERT\par
An SQL verb. We use INSERT to add a new row to a Table.\par
\par
INSTALLER DLL\par
An ODBC term. The ODBC administrator calls the installer DLL, which is often\par
supplied by a driver vendor, in order to find out what the components are of a\par
data source.\par
\par
INSTANCE\par
[1] A Windows term. Say you load WordPerfect twice in different windows.\par
They're not the same program -- they're two copies of the same program, with\par
different resource allocations, perhaps (but not necessarily) with different\par
data. The two instances are "jobs", but we might reserve the word job for a\par
running of WordPerfect on another computer.\par
[2] An SQL Standard term. A "physical representation of a value" at a\par
particular place in storage. For example, each row in a Table is one\par
"instance" of a row type. An instance of a value occurs at a site.\par
\par
INSTANTIABLE\par
An Object/Relational term.\par
(Of a structure-type UDT) Capable of being represented; not merely abstract;\par
perhaps having instances. An instantiable UDT has a constructor function, may\par
be used with "new" routines, and may be the UDT associated with a typed Table.\par
\par
INTEGER\par
[1] Exact numeric with scale zero.\par
[2] An SQL predefined data type, signed, exact numeric, scale zero, precision\par
implementation-defined. In most implementations precision is 31 bits and\par
INTEGER values range from -2,147,483,647 (not -2,147,483,648) to\par
+2,147,483,647. See also: SMALLINT, EXACT NUMERIC.\par
\par
INTEGRITY\par
[1] The maintenance of a consistent state despite transaction failure or\par
crash.\par
[2] Adherence to Constraints, especially Constraints which have to do with\par
primary and foreign keys. The two general integrity rules are entity integrity\par
(no primary key Column may be null) and referential integrity (no foreign key\par
may reference a nonexistent key). The word "integrity" alone never means\par
attribute integrity (the requirement that every Column value must be in the\par
Column's Domain). See also: REFERENTIAL INTEGRITY.\par
\par
INTEGRITY CONSTRAINT\par
See: CONSTRAINT.\par
\par
INTEGRITY ENHANCEMENT FEATURE\par
Sometimes incorrectly called: integrity enhancement facility. An addition to\par
the SQL-89 Standard, involving primary and foreign keys ("referential\par
integrity"). Simpler integrity features, such as unique Constraints and NOT\par
NULL modifiers, were already present in the SQL-86 Standard.\par
\par
INTERACTIVE SQL\par
See: DIRECT SQL.\par
\par
INTERFACE\par
[1] The routines, protocols and specifications which are needed to cross a\par
boundary between subsystems, for example the CLI is the "Call Level\par
Interface".\par
[2] A descriptor area. The Standard refers to the APD, IPD, ARD and IRD as\par
being four "types of interfaces".\par
[3] An Object/Relational term. (Of a structured UDT) The set of all functions\par
which include the UDT, either in the parameter declarations or as a return\par
type. Example: suppose there are 50 functions (including methods). Of these,\par
20 return type "UDT1", and ten others have an input parameter of type "UDT1".\par
Those 30 functions together are the "interface of UDT1".\par
\par
INTERMEDIATE SQL\par
A level of SQL-92 conformance. An Intermediate SQL implementation can handle\par
more of the SQL specification than Entry SQL, but less than Full SQL. All the\par
well-known SQL-92 implementations today are Intermediate SQL.\par
\par
INTERNATIONAL ORGANIZATION FOR STANDARDIZATION\par
See: ISO.\par
\par
INTERNATIONALIZATION\par
Sometimes spelled i18n. The rules and processes which allow for different\par
customs, languages or practices. SQL takes internationalization into account\par
with its various Character set features; however, in standard SQL the datetime\par
formats and decimal-point notations are always the same.\par
\par
INTEROPERABILITY\par
The likelihood that a host language program will run using two different\par
DBMSs, without requiring changes to the SQL statements in it. In theory,\par
interoperability should increase with adherence to standards. See also:\par
PORTABLE.\par
\par
INTERSECT\par
Merge two Tables, accepting only rows which have values in common. See also:\par
UNION, EXCEPT.\par
\par
INTERVAL\par
An SQL data type for representing the difference between two dates, between\par
two times or between two timestamps.\par
\par
INTERVAL LEADING FIELD PRECISION\par
The components of an interval are called datetime "fields". The first field is\par
the "leading field". The number of positions in this field is the "interval\par
leading field precision". For example, in a year-to-month interval, year is\par
the leading field and we would expect it to have 4 positions.\par
\par
INTERVAL QUALIFIER\par
One or three words, trailing an interval literal or part of an interval Column\par
definition, indicating the start and end fields of the interval. One of: YEAR,\par
MONTH, DAY, MINUTE, SECOND, YEAR TO MONTH, DAY TO HOUR, DAY TO MINUTE, DAY TO\par
SECOND, HOUR TO MINUTE or HOUR TO SECOND. For example, in "INTERVAL '5-5' YEAR\par
TO MONTH", the words "YEAR TO MONTH" are the interval qualifier.\par
\par
INTRODUCER\par
[1] In the Standard: an underscore preceding a Character set name.\par
[2] By extension: the combination of the underscore and the Character set\par
name. For example: _ASCII_FULL 'abcd' is a CHAR literal which contains an\par
introducer -- that is, the literal is explicitly marked as being in the\par
ASCII_FULL Character set. In SQL-92 introducers can precede either literals or\par
identifiers; in SQL3 introducers may only precede literals.\par
[3] The characters that signal a comment is starting, such as -- for simple\par
comments or /* for bracketed comments.\par
\par
INVALID\par
(Of an SQL statement) Containing incorrect syntax.\par
(Of a literal) Containing an illegal combination of characters.\par
(Of a locator) Not referring to anything.\par
\par
INVOCATION\par
See: CALL STATEMENT.\par
\par
IPD\par
See: IMPLEMENTATION PARAMETER DESCRIPTOR.\par
\par
IRD\par
See: IMPLEMENTATION ROW DESCRIPTOR.\par
\par
IS\par
[1] An SQL operator used in predicates which test for NULL values: IS NULL or\par
IS NOT NULL.\par
[2] An SQL operator which permutes the result of a logical (such as a search\par
condition): IS [NOT] TRUE, IS [NOT] FALSE, IS [NOT] UNKNOWN.\par
\par
ISO\par
Abbreviation for International Organization for Standardization. A large\par
multi-function multi-country group which publishes standards. A branch of ISO\par
is IEC, International Electrotechnical Commission, the group responsible for\par
computer standards. Often ISO collaborates with ANSI so if there is an ANSI\par
standard there is often an ISO standard which is nearly the same.\par
\par
ISO 8859-X\par
One of the standard 8-bit character sets. See also: ISO STANDARD CHARACTER\par
SET.\par
\par
ISO 9075, ISO 92, etc\par
See: ISO STANDARD SQL.\par
\par
ISO COMMITTEE\par
Originally, the ISO group responsible for information technology was TC97\par
("technical committee 97"). After some reorganization and a merging with IEC\par
this became JTC1 (presumably "joint technical committee 1"). Then Open Systems\par
Interconnect (OSI) got involved, and the liaison job "Information Processing\par
Transfer and Retrieval for OSI" went to SC21 ("subcommittee 21"). This in turn\par
divided into subgroups, of which one was WG3 ("working group 3"). Full title:\par
ISO/IEC JTC1/SC21/WG3 ("International Organization for Standardization /\par
International Electrotechnical Commission / Joint Technical Committee #1 /\par
Subcommittee #21 / Working Group #3".\par
\par
ISO STANDARD CHARACTER SET\par
There are many ISO standards relating to character sets. What we consider the\par
most important ones are: ISO/IEC 646:1991. 7-bit coded Character set for\par
information interchange -- see also ASCII; ISO/IEC 10646-1:1993, Information\par
technology - Universal Multi-Octet Coded Character set (UCS) - Part 1:\par
Architecture and Multilingual Plane -- corresponds closely to the Unicode\par
Consortium's The Unicode Standard Version 2.0 (1996) -- the Standards for\par
Unicode 2.0 16-bit character names and encodings; ISO 8859-x. Some matters\par
having to do with collating are mentioned in ISO/IEC CD 14651, Information\par
technology - International String Ordering - Method for comparing Character\par
Strings.\par
\par
ISO STANDARD DATE\par
The relevant document is ISO 8601:1988, Data elements and interchange formats\par
- Information interchange - Representation of dates and times. Summary: use\par
the Gregorian calendar, represent dates and times as yyyy-mm-dd and\par
hh:mm:ss.ffffff.\par
\par
ISO STANDARD SQL\par
Publication by ISO as an official standard. Often nearly the same as ANSI\par
standard SQL, for example ISO/IEC 9075:1992 = ANSI X3.135-1992 except for a\par
different foreword and normative reference.\par
      ## SQL-89 STANDARD: (the digits '1989' are the publication year):\par
ISO/IEC 9075:1989 Database Language SQL.\par
      ## SQL-92 AND SQL3 STANDARDS: ISO/IEC 9075:199x, Information technology\par
- Database languages comes in five parts which are actually separate\par
documents: Part 1: Framework (introductory); Part 2: Foundation (this is the\par
big one); Part 3: Call-Level Interface (CLI); Part 4: Persistent Stored\par
Modules (PSM); Part 5: Host language bindings (for embedded SQL).\par
      ## RDA DOCUMENTS: ISO/IEC 9579-1:1993(E), Information Technology-Open\par
Systems Interconnection-Remote Database Access, Part 1: Generic Model,\par
Service, and Protocol ISO/IEC 9579-2:1993(E), Information technology-Open\par
Systems Interconnection-Remote Database Access, Part 2: SQL specialization.\par
\par
ISO/IEC JTC1/SC22 WG15\par
The "fifteenth working group" (WG15) the "twenty-second subcommittee" (SC22)\par
of the "first Joint Technical Committee" (JTC1) of ISO/IEC. JTC1 deals with\par
information technology; SC is the JTC1 subcommittee which deals with\par
programming languages. Member countries include Australia, Brazil, Canada,\par
France, Germany, Japan, Korea, The Netherlands, the UK and the US. ISO 9579-2\par
was prepared by a different subcommittee (ISO/IEC JTC1 SC21 "Open Systems\par
Interconnection, Data Management and Open Distributed Processing"). ISO's web\par
page is: {\field{\*\fldinst{HYPERLINK "www.iso.ch"}}{\fldrslt{\ul\cf1 www.iso.ch}}}\f1\fs21 .\par
\par
ISOLATION\par
Two transactions work in total isolation if they have no effect on each other\par
until COMMIT; but in the real world no transaction is an island. For\par
concurrency purposes, SQL acknowledges four ascending levels of isolation:\par
READ UNCOMMITTED, READ COMMITTED, REPEATABLE READ, SERIALIZABLE. ODBC adds:\par
VERSIONING. Isolation is one of the four ACID transaction features.\par
\par
ITEM\par
Not a formal term, but often one uses "item" for anything that might have a\par
value, such as a field, attribute, variable, Column or parameter.\par
\par
ITEM DESCRIPTOR AREA\par
An SQL Standard term. Often abbreviated IDA. A record used by the DBMS for\par
storage of information about one parameter or about one Column in a result\par
set. An IDA occurs zero or more times within a desc, that is, it is a\par
multiple-occurrence structure (the other component of a desc is a header,\par
which is single-occurrence). Important fields in the IDA include: type,\par
octet_length, length, data_pointer, octet_length_pointer. See also: DESCRIPTOR\par
RECORD.\par
\par
ITEM FIELD\par
A field in an Item Descriptor Area.\par
\par
ITEM QUALIFIER\par
A Table or Correlation name, plus a period, preceding an asterisk in a select\par
list.\par
\par
ITEM REFERENCE\par
A PSM term. A reference to a Column, SQL parameter or SQL variable.\par
\par
ITERATE\par
[1] We can repeat the code within a loop multiple times. Each time we go\par
through is called one iteration of the loop\par
[2] A PSM term. The "iterated SQL statements" are: LOOP, WHILE, REPEAT and FOR\par
statements.\par
[3] A PSM keyword. The statement format is: ITERATE <statement label>.\par
\par
J\par
\par
JAVA\par
A computer language, used as an SQL host language but not in the SQL3 Standard\par
definition.\par
\par
JDBC\par
The Java equivalent of ODBC.\par
\par
JOB\par
See: INSTANCE.\par
\par
JOIN\par
[1] A relational term. Combine two Tables and preserve the original Columns.\par
(Thus a join in relational theory differs from a union, which ends up with the\par
same number of Columns.) Generally joins are done with matching Column values\par
(see equijoins).\par
[2] A set-theory term. Any operation which combines two sets. (Thus unions and\par
joins are the same thing in set theory.)\par
\par
JOURNAL\par
A file containing before/after copies, which can be used to recover if the\par
main file becomes corrupt. We have preferred to use the word "log" to describe\par
both this activity and the writing of files to record accesses or data\par
changes. See: LOG.\par
\par
JSQL\par
A specification for embedded SQL within Java.\par
\par
JULIAN\par
[1] A calendar proposed by Julius Caesar, superseded by the Gregorian\par
Calendar.\par
[2] A date-numbering system proposed by Julius Scaliger, where each date is\par
represented as a number = number of days elapsed since January 1, 4713 BC.\par
\par
K\par
\par
KB\par
Short for kilobyte. 1024 bytes.\par
\par
KEY\par
[1] In standard SQL terminology: a set of Columns in a Tablelpar
ASCII_FULL, SQL_TEXT.\par
\par
LEADING\par
Appearing at tqe beginning of a string. Opposite of trailing. In the character\'15\par
strqng ' ABC' there is one leading space. Use "leading" instead of "leftmost"\par
because (e.g.:) Arabs write from right to left. In a string of digits, tqe\par
leading digit is the most significant digit. In the numeric string 01234 there\par
is one leading zero.\par
\par
LEAF\'15\par
(Of a Table) Having no proper subtables.\par
(Of a type) Having no proper subtypes. \par
The opposite is: maximal. See also: FINAL.\par
\par
LEAVE\par
A PSU term. The statement format is: LEAVE <statement label>.\par
\par
LEFT JOIN\par
An outer join, for which the Table which is specified is the inner Table. For\'15\par
example: if Table A has \{'A','B','C'\} and Table B has \{'B',WC','D'\} then A\par
LEFT JOIN B produces: \{'A' NULL, 'B' 'B', 'C' C'\}.\par
\par
LENGTH\par
A measure which depends on units. For a BIT variable the length is in bits\par
(see: BIT_LENGTH). For a CHAR variable the len\par
th is in characters or in bytes\par
(see: OCTET_LENGTH). For most numbers, when we say "length" we really mean\par
"precision" (see: PRECISION).\par
\par
LETTER\par
A character which is accepted as part of an alphabet (or, in exotic cases, as\par
part of a syllabary). Thus the set of letters includes both Latin letters and\par
accented letters, but not digits or special characters.\par
\par
LEVEL\par
[1] A level of conformance, such as Entry SQL or Intermediate SQL.\par
[2] A level of isolation, such as READ UNCOMMITTED.\par
[3] An occurrence in a series of Views.\par
\par
LIKE\par
An operator used for wildcarded character string comparisons. The predicate\par
"'abcde' LIKE '%c%'" is TRUE.\par
\par
LIST\par
Not a formally defined word. In an SQL statement, a list is a series of items\par
which all have the same type and are separated by commas: "select list",\par
"parameter list", "Column list".\par
\par
LITERAL\par
A scalar value which is embedded within an SQL statement. Thus, in the\par
statement "INSERT INTO Table_1 VALUES (5,'N')", we have a numeric literal (5)\par
and a character literal ('N'). Literals are sometimes called "constants", but\par
in the formal defininreturns the lower-case equivalent of a character\par
string. Thus LOWER('A. Smith') returns 'a. smith'. In SQL-92 the LOWER\par
function only works for simple Latin letters. In SQL3 the LOWER function\par
should work for any letter.\par
\par
LOWER CASE\par
A form of a letter in a Latin, Greek, Cyrillic, Georgian or Armenian alphabet.\par
In English text, lower case is used inside words, not at the beginning of a\par
sentence or proper name. The official (Unicode) name of a lower case letter\par
always contains the word "small", e.g.: LATIN SMALL LETTER M.\par
\par
M\par
\par
MACHINE DATA SOURCE\par
An ODBC term. The specification of a database and its associated DBMS which is\par
accepted by an ODBC administrator program and stored in odbc.ini or in the MS-\par
Windows95 registry.\par
\par
MACRO\par
An assembler term. An identifier which during the parsing process is\par
translated to an expression. SQL example: (a) if "CREATE DOMAIN d CHAR(5);",\par
then "CREATE TABLE Table_1 (Column1 d);" expands to "CREATE TABLE Table_1\par
(Column1 CHAR(5));". The DBMS may treat a non-materialized View as a macro.\par
\par
MANIPULATE\par
(In a database) Access or change either the Schema or the data. Usually refers\par
to data change statements.\par
\par
MANTISSA\par
[1] A mathematical term. The fractional part of a logarithm.\par
[2] All approximate numbers have two parts: an exponent and a mantissa. For\par
example, -1.234567E-02 has an exponent of -02 and a mantissa of -1.234567. In\par
the IEEE floating-point standard, the mantissa size is a fixed number of bits.\par
\par
MANUAL COMMIT\par
An ODBC term. A mode, the opposite of AUTOMATIC COMMIT. In manual commit mode,\par
the execution of statements has no permanent effect on the database -- nothing\par
happens until you COMMIT and thus end the transaction. Manual commit mode is\par
the default in SQL, but automatic commit mode is the default in ODBC. Note:\par
the English meaning of the word "manual", i.e.: "by hand", is not implied.\par
\par
MATCH\par
[1] A SQL Standard term. Two keys match if all their components have the same\par
values. A "partial match" can occur if some values are the same, others are\par
NULL. See also: DUPLICATE.\par
[2] A SQL Standard term. A character string matches a pattern if the <string>\par
LIKE <pattern> returns TRUE or (in SQL3) if <string> SIMILAR TO pattern>\par
returns TRUE.\par
\par
MATCHLIST\par
A list of the rows which match the criteria of a query. Usually the list\par
consists of only the row's identifiers (as ROWIDs or as physical addresses)\par
and so a matchlist is only visible internally in the DBMS. The external\par
representation of a matchlist is a result set. See also: KEYSET.\par
\par
MATERIALIZED VIEW\par
A View whose rows take up space. When we select from a View, the DBMS can\par
elect to do one of two things: (1) it can get the rows from the original\par
Table, convert any derived Columns and pass the results to the application;\par
(2) it can create a temporary Table and put the rows from the original\par
Table(s) into that, then select from the temporary copy. The latter case is\par
the materialized View case. Materialization is often necessary when there is\par
no one-to-one correspondence between the original Table's rows and the View's\par
rows (because there is a grouping) or when many Tables are affected and\par
concurrency would be harmed (because there is a join).\par
\par
MATRIX\par
A mathematical term. An ordered array of values which are arranged in rows and\par
Columns.\par
\par
MAX\par
An SQL keyword. MAX is one of the set functions. It is used to get the value\par
in a Column which is greater than or equal to all other values.\par
\par
MAXIMAL\par
(Of a Table) Having no proper supertables.\par
(Of a type) Having no proper supertypes.\par
The maximal supertype is at the top of a UDT's type hierarchy and is sometimes\par
called (mixed-metaphorically) the "root type". The opposite is: LEAF.\par
\par
MB\par
Abbreviation for megabyte. 1,048,576 bytes.\par
\par
MEMBER\par
Something which belongs to a set. Often, anything which meets the criteria for\par
membership is automatically considered a member of a set.\par
\par
MERGED COLUMN\par
Also: derived Column. A Column in a Table which has been created with a set\par
operator.\par
\par
MESSAGE\par
[1] A character string in the diagnostics area, with an\par
implementation-dependent explanation of an exception or completion condition.\par
[2] Information which is passed to or from a client or a server.\par
\par
METADATA\par
Data about data.\par
[1] the data type, octet length, name, Collation etc. of a Column in a result\par
set.\par
[2] ditto for a parameter.\par
[3] anything in INFORMATION_SCHEMA.\par
[4] the data dictionary.\par
\par
METHOD\par
An object oriented term. In SQL3, a method is a function which is explicitly\par
stated to be a component of a UDT (the other type of UDT component is an\par
attribute). Some methods are defined automatically. See also OBSERVER\par
FUNCTION, MUTATOR FUNCTION.\par
\par
MIDDLEWARE\par
An ODBC term. A piece of software that interposes between the application and\par
the DBMS or between the components of a DBMS. For example, a routine that\par
accepts English text as input, translates it to SQL, calls the DBMS, gets the\par
results, converts them to English and outputs English text.\par
\par
MIN\par
An SQL keyword. MIN is one of the set functions. It is used to get the value\par
in a Column which is less than or equal to all other values.\par
\par
MINIMAL COMMON SUPERTYPE\par
An Object/Relational term. For a set of UDTs \{UDT1, UDT2\}, the first type\par
which is a supertype of both UDT1 and UDT2, traversing upward. Consider the\par
family:\par
             Languages\par
                  |\par
            --------------------\par
            |                  |\par
            Database           Conventional\par
            |                  |\par
            ------------       ----------\par
            |          |       |        |\par
            SQL        dBASE   Ada      Pascal\par
\par
The minimal common supertype for \{SQL,dBASE\} is Database. The minimal common\par
supertype for \{SQL,Ada\} is Languages. For \{Conventional,Pascal\} the minimal\par
common supertype is Conventional. If two types possess a common supertype,\par
then by definition they are in the same "family".\par
\par
MOD\par
An SQL keyword. Short for modulus; however, in SQL MOD is used to get a\par
remainder for two exact numeric arguments. Example: MOD(70,20) returns 10. \par
\par
MODIFY\par
Change either database or structure. Thus this term encompasses both "data\par
change" and "Schema manipulation" and can refer to actions taken by either the\par
application or the DBMS.\par
\par
MODULE\par
[1] An SQL Standard term. A group of SQL statements which are loaded together.\par
[2] A file containing a program written in a host language.\par
\par
MODULE LANGUAGE\par
A specification for putting together SQL statements into programs which can be\par
"executed" via the DBMS. Either there is no host language or the details of\par
any host language translation are hidden from the programmer. The SQL Standard\par
describes Modules at some length, but in the real world preference is given to\par
one of the other binding styles: embedded SQL or CLI.\par
\par
MODULO\par
Ablative of "modulus". See: MOD.\par
\par
MOST SPECIFIC TYPE\par
[1] (Of a non-UDT value) The data type.\par
[2] (Of a UDT value) The minimal subtype within a UDT hierarchy that can be\par
used for the value. This will require a somewhat long example. ... Bonzo is a\par
chimp. Chimps are primates. Primates are mammals. Mammals are animals.\par
Therefore, Bonzo has four data types: chimp, primate, mammal or animal. But\par
only one of those data types is the most specific type: CHIMP. ... However,\par
suppose that we have a function with a primate parameter: CREATE FUNCTION ...\par
(input PRIMATE) ... We can pass Bonzo to this function -- that's okay, he's a\par
primate. But in that case, the "declared type" -- PRIMATE -- is not the same\par
as the "most specific type" -- CHIMP. See also: DECLARED TYPE.\par
\par
MONADIC\par
Having only one operand and so distinguishable from niladic (having zero\par
operands), dyadic (having two operands) and triadic (having three operands).\par
Unary minus is a monadic operator. LOWER is a monadic function.\par
\par
MULTI-VALUE KEY\par
See: COMPOSITE KEY.\par
\par
MULTIBYTE\par
(Of a Character set) Having a variable number of octets in the encoding.\par
Logically one should include as multibyte those fixed-width Character sets\par
which require more than one byte, but it seems that doesn't happen in\par
practice. See also: WIDE CHAR, VARIABLE-LENGTH ENCODING.\par
\par
MULTICOLUMN\par
(Of an index) See: COMPOSITE KEY.\par
\par
MULTIMEDIA\par
A set of extensions to the SQL Standard which ease the storage and access of\par
sound, film, etc. Also known as SQL/MM.\par
\par
MULTIPLE-TIER DRIVER\par
A driver which is split into at least two parts (client and server) and\par
usually into a third part as well (middleware).\par
\par
MULTISET\par
A set which may contain duplicates. In mathematics an ordinary set contains no\par
duplicates, but SQL Tables often do, so perhaps we should have referred to\par
things like result sets as result multisets. (The fact that SQL Tables are\par
multisets rather than sets is also the reason that purists do not refer to SQL\par
Tables as "relations".) The use of the word "bag" rather than "multiset" is\par
rare.\par
\par
MUMPS\par
A host language which can be used with standard SQL (but frankly, SQL\par
implementations which support MUMPS interfacing seem to be uncommon).\par
\par
MUTATOR FUNCTION\par
An Object/Relational term. A method for changing a single attribute in a UDT\par
instance. Suppose you make a UDT thus: CREATE TYPE UDT1 (attribute1 BOOLEAN)\par
... The DBMS implicitly creates a mutator with this original method\par
specification: "METHOD attribute1 (attr BOOLEAN) RETURNS UDT1 SELF AS RESULT\par
LANGUAGE SQL DETERMINISTIC CONTAINS SQL RETURN NULL ON NULL INPUT". To change\par
the value of attribute1, invoke the mutator method and pass the new value, for\par
example: "u.attribute1(TRUE)" works (assuming u is an instance of UDT1). See\par
also: OBSERVER FUNCTION.\par
\par
MUTUALLY ASSIGNABLE\par
An item of data type a and an item of data type b are mutually assignable if a\par
can be assigned to b and b can be assigned to a. For example: we can assign\par
the value 5 (which is an integer) to a FLOAT Column, because all numeric data\par
types are mutually assignable.\par
\par
MUTUALLY COMPARABLE\par
An item of data type a and an item of data type b are mutually comparable if\par
"a = b" is a legal expression. A counter-example: if x is a CHAR Column, then\par
"... WHERE x = 5 ..." is a syntax error (because 5 is an INTEGER, rather thahpar
The declarative statement in embedded SQL that begins with the words EXEC SQL\par
WHENEVER.\par
\par
EXCLUSIVE\par
A type of lock. If Job #1 has an exclusive lock on row X, then Job #2 can\par
neither read nor write row X. Compare: SHARED LOCK.\par
\par
EXECUTE\par
[1] Run. Do. Go. Execution is the activity of an SQL statement, or statement\par
within a host language, which is distinct from preparation i.e.: from\par
precompilation / preparation / binding.\par
[2] A CLI term. Call the SQLExecute function.\par
\par
EXISTS\par
One of the SQL predicates, almost always associated with a correlated\par
subquery, as in "SELECT * FROM T_1 WHERE EXISTS (SELECT * FROM T_2 WHERE\par
T_2.col = T_1.col);" where the predicate means "such that there is a row of\par
Table T_2 whose col Column equals a col Column in any row of T_1".\par
\par
EXPLAIN\par
Describe an access plan. This is a non-standard optional command in some\par
DBMSs. For example, EXPLAIN might deliver the information that a query will be\par
executed using an index.\par
\par
EXPLICIT\par
Right there in black and white. Specified. The reverse is implicit.\par
\par
EXPLICITLY-ALLOCATED DESC\par
An ODBC term. See: USER DESC.\par
\par
EXPONENT\par
A number within an approximate numeric literal, possibly signed, preceded by\par
the letter E. The number indicates what power to raise 10 to. For example,\par
15E+00 is "15 times 10 to the zeroth power (i.e.: 1)". See also: MANTISSA.\par
\par
EXPONENTIAL NOTATION\par
Also known as scientific notation or floating-point notation. In its standard\par
form, exponential notation represents approximate numeric literals using: an\par
optional sign, a decimal mantissa (usually between 1 and 10), the letter E, an\par
optional sign and a decimal exponent. For example, the number 123 is\par
represented in exponential notation as 1.230000E+02.\par
\par
EXPORT\par
To ship data out of the database. Usually this involves taking an entire\par
Table's contents and converting it into a file format that can be read by\par
non-DBMS programs.\par
\par
EXPRESSION\par
Any combination of operators and operands, yielding a value that can in turn\par
be used as an operand. Sometimes expressions are classified by what they\par
return ("value expressions" "Table expressions"), in non-standard texts\par
expressions are classified by what they contain ("conditional expressions"\par
"group expressions").\par
\par
EXTENSION\par
A feature which is not in the SQL Standard, generally requiring additional\par
language. For example, indexes.\par
\par
EXTERNAL ROUTINE\par
[1] External here means "outside the (SQL) environment". A routine written in\par
a host language which is called from SQL.\par
[2] In any non-SQL context, an "external routine" is simply a routine in a\par
different program.\par
\par
EXTRACT\par
An SQL integer function, which returns a component of a datetime. For example,\par
EXTRACT (YEAR FROM DATE '1994-01-12') is equivalent to the integer 1994.\par
\par
EXTREME FUNCTION\par
Infrequent term. The aggregate functions MIN() and MAX() are collectively\par
referred to as the "extreme" functions.\par
\par
F\par
\par
FALSE\par
[1] In two-valued logic, a logical value which is not TRUE.\par
[2] In SQL (which often uses three-valued logic), a logical value which is\par
neither TRUE nor UNKNOWN. See also: LOGIC.\par
\par
FAMILY\par
An Object/Relational term.\par
[1] Just as a human family may be thought of as the set of people who have (or\par
are) a common ancestor, a "type family" is the set of all types with a common\par
supertype. Since predefined data types or distinct types cannot have proper\par
supertypes, the only type families which can have more than one member are\par
structured types. For an illustration of a type family, see: MINIMAL COMMON\par
SUPERTYPE. See also: HIERARCHY, STRUCTURED TYPE, MAXIMAL SUPERTYPE.\par
[2] Similarly to [1], a "Table family" is the set of all Tables with a common\par
supertable.\par
\par
FEATURE\par
A capability of a particular DBMS, to handle a certain data type or operation.\par
With the CLI, one can find out about some DBMS features by calling the\par
SQLGetInfo function. With SQL3, the features are in the SQL_FEATURES\par
INFORMATION_SCHEMA View. For example, feature E091-5 is: can this DBMS do the\par
SUM set function?\par
\par
FETCH\par
The act of taking a row, or a set of rows, out of a result set. The data and\par
status indicators generally are transferred to buffers allocated by the host\par
language program.\par
\par
FETCH ORIENTATION\par
One of: NEXT, FIRST, LAST, PRIOR, ABSOLUTE, RELATIVE. A modifier that tells\par
the DBMS which direction to go in the result set, before fetching a row.\par
Embedded SQL example: "EXEC SQL FETCH ABSOLUTE 55 Cursor_name INTO\par
:host_variable :indicator_parameter;".\par
\par
FETCH TARGET\par
The host variable and indicator variable which will receive the value of a\par
Column in a result, when FETCH happens. Fetch target addresses are specified\par
in the ARD.\par
\par
FIELD\par
[1] An instance of a Column in a row of a Table. Thus, a scalar value which is\par
taken from a row and Column intersection.\par
[2] Loosely: a Column.\par
[3] An SQL3 term. A (Field name, data type) pair within a row type. The Field\par
value is the data type value.\par
\par
FILE\par
A persistent-storage object which often is physical (on disk), and often has a\par
one-to-one relationship with an SQL persistent Base table. We reject the C\par
standard definition: a sequence of bytes including disk files, pipelines and\par
console input.\par
\par
FILE-BASED DRIVER\par
An ODBC term. A driver that contains a database engine instead of calling a\par
database engine (as a "DBMS-based driver" does). Do not be misled by the word\par
"file-based"; all ODBC drivers must ultimately perform file input/output at\par
some level.\par
\par
FILE SERVER\par
An architecture, having to do with computers in a network. A file server does\par
file operations (open/read/write/close etc.) but does not do higher-level\par
database management operations (SELECT/UPDATE/etc.). Thus it differs from a\par
client/server architecture. Because some people believe that file servers are\par
relatively inefficient, they are becoming less common.\par
\par
FINAL\par
Part of a UDT definition. If a UDT is "final", it may not be a proper\par
supertype -- that is, it may not be the object of an UNDER clause in a CREATE\par
TYPE statement.\par
\par
FIPS\par
Abbreviation for [United States] Federal Information Processing Standard. The\par
main document is FIPS PUB 127-2, Database Language SQL (30 pages), which\par
helpfully specifies what the US government wants for some feature that the\par
SQL-92 Standard says are "implementor-defined". The document is also issued as\par
a package along with the SQL-92 Standard (ANSI X3.135-1992).\par
\par
FIRE\par
Execute (the SQL statements in a Trigger). The phrase "fire a Trigger" is\par
popular but we do not use it in this book because the standard phrase is\par
"activate a Trigger".\par
\par
FIRST NORMAL FORM\par
A relational term. A Table is in first normal form if there are no\par
multiple-occurrence Columns. Since standard SQL-92 does not allow array\par
definitions, this is fairly easy to achieve. See also: NORMALIZATION.\par
\par
FIXED-LENGTH ENCODING\par
An encoding for a Character set, in which all characters require the same\par
amount of computer storage space -- generally one octet for the 8-bit sets for\par
European languages, but two octets (16 bits) for the most popular\par
manifestation of Unicode. See also: CODE PAGE, FORM-OF-USE, ISO 8859-X,\par
VARIABLE-LENGTH ENCODING.\par
\par
FIXED-LENGTH STRING TYPE\par
CHAR and BIT Columns are "fixed-length" if they are not explicitly defined as\par
VARYING. Insertions into such Columns are always padded on the right, so that\par
every Column value has the same length. All character string literals and bit\par
string literals are fixed-length.\par
\par
FLAGGER\par
A feature or utility provided by the DBMS vendor, which helps application\par
programmers identify SQL language which is not standard, or which depends on\par
implementation-specific language extensions. One way of doing this is to\par
direct the precompiler to put marks in the embedded SQL source code program.\par
\par
FLOAT\par
One of the three approximate-numeric data types (the others are REAL and\par
DOUBLE PRECISION).\par
\par
FOLD\par
A scalar function used on character strings to change case. The two fold\par
functions in SQL are UPPER and LOWER. The two fold functions in ODBC are UCASE\par
and LCASE.\par
\par
FOR\par
A PSM term. A keyword which introduces a "for statement", which takes the\par
form: [<label> :] FOR <loop variable name> AS [Cursor details] <Cursor\par
specification> DO <SQL statement list> END FOR [<ending label>]. See also:\par
REPEAT, LOOP, WHILE.\par
\par
FOREIGN KEY\par
A set of Columns in a Base table, corresponding to some unique key. The\par
foreign key is said to "reference" the unique key. Values in foreign key\par
Columns must match values in referenced Columns. Usually the foreign key and\par
unique key are in different Tables, and usually the unique key is a primary\par
key.\par
\par
FORM-OF-USE\par
An encoding for a string of characters. In the western world most Forms-Of-Use\par
are eight-bit or sixteen-bit fixed-length encodings. In Asia some Forms-Of-Use\par
are variable-length encodings. An example of a Form-Of-Use is: the Windows\par
code page. See also: ENCODING, CODE PAGE, ISO 8859-X, UNICODE, FIXED-LENGTH\par
ENCODING, VARIABLE-LENGTH ENCODING, REPERTOIRE. Technical Note: Because a\par
variable-length encoding may include escape characters which in effect cause\par
the encoding method to change within a string, we define Form-Of-Use as an\par
encoding for a string.\par
\par
FORMAT RULE\par
A rule about the structure and composition of tokens in an SQL statement. For\par
example: "CREAT TABL Table_1 (x CHAR(5)" violates format rules. On the other\par
hand: "CREATE TABLE Table_1 (x CHAR(0))" is cleanly formatted; however, it\par
breaks a syntax rule. See also: SYNTAX RULE.\par
\par
FORTRAN\par
A language which can be used as a host language for SQL.\par
\par
FORWARD-ONLY CURSOR\par
A Cursor that can only go forward, i.e.: that supports "FETCH NEXT" operations\par
but not "FETCH LAST", "FETCH ABSOLUTE", etc., as a scroll Cursor does.\par
\par
FRACTIONAL PRECISION\par
In a TIME or a TIMESTAMP or an INTERVAL which includes a SECOND field, the\par
number of positions after the decimal point which indicate the fraction of a\par
second. See also: SCALE, DECIMALDIGITS.\par
\par
FREE\par
[1] A CLI term. Tell the DBMS that a resource (env or dbc or stmt or desc) is\par
no longer needed, usually via a call to SQLFreeHandle.\par
[2] An SQL3 keyword. With FREE LOCATOR, for a BLOB, CLOB, NCLOB, ARRAY or UDT,\par
we can cancel the association between a locator variable and its value.\par
\par
FROM CLAUSE\par
The word FROM followed by one or more Table references. For example this\par
SELECT statement contains a FROM clause: "SELECT * FROM Table_1;". In the\par
Standard, the term "FROM clause" is used only in the context of SELECT (not\par
DELETE) statements.\par
\par
FULL OUTER JOIN\par
An outer join which fills in for non-matching values on both the left and the\par
right. For example: if Table A has \{1,3,5\} and Table B has \{1,2,3\} then the\par
full outer join of A and B has \{ 1 1, NULL 2, 3 3, 5 NULL\}. See also: OUTER\par
JOIN.\par
\par
FULL SQL\par
One of the levels of conformance of standard SQL-92, above Entry and\par
Intermediate. An implementation which claims "full SQL conformance" is making\par
a big claim.\par
\par
FULL-TABLE SCAN\par
If the DBMS must read every row in the Table and check whether the individual\par
row matches a search condition, it's doing a full-Table scan. With big Tables\par
this may be less efficient than alternatives such as indexed or hashed lookup.\par
If the reading is from beginning to end (as it usually is) then a full-Table\par
scan is synonymous with sequential search.\par
\par
FUNCTION\par
[1] A CLI term. A procedure, callable from a host language program, which\par
returns a value. For example, all CLI functions return a 16-bit integer in\par
return code.\par
[2] An SQL-92 term. An operator which returns a single value, classified\par
according to the number of operands (or parameters) following it: niladic\par
function (no operands, e.g.: CURRENT_TIME), scalar function (one or more\par
operands but from a single row, e.g.: UPPER), set function (one operand\par
possibly from more than one row, e.g.: SUM). For the latter types, the word\par
"function" may apply to both the operator keyword, and to the combination of\par
the keyword and its (parenthesized) operands. See also: ROUTINE.\par
\par
FUNCTIONAL DEPENDENCY\par
A relational term.\par
(Of a Column) Whose value can be derived (determined) via examination, by a\par
human, of a value in another Column. Example #1: "If it's Tuesday this must be\par
Belgium" (title of a movie about tourists, where one attribute -- location --\par
is uniquely defined by another -- day-of-week). Example #2: "Since name =\par
'Pinocchio', nose_size = 'large'". See also: NORMALIZE.\par
\par
G\par
\par
GATEWAY\par
An ODBC term. A program which is called according to the CLI protocol for\par
database X, and calls according to the protocol for database Y. Thus a gateway\par
is middleware. An example is Micro Decisionware's "DB2 Gateway" which makes\par
IBM's DB2 look accessible to SQL Server calls.\par
\par
GENERAL CONSTRAINT\par
Non-standard term. See: ASSERTION.\par
\par
GENERAL RULE\par
An SQL Standard term. A general rule specifies what is supposed to happen when\par
an SQL statement executes. See also: ACCESS RULE, SYNTAX RULE.\par
\par
GET DESCRIPTOR\par
An embedded SQL term. A non-preparable statement which retrieves one or more\par
fields from a descriptor area. Does the same job as the CLI's SQLGetDesc...\par
functions. Example: "EXEC SQL GET DESCRIPTOR desc1 VALUE 1 :simple_target_spec\par
= TYPE;".\par
\par
GET DIAGNOSTIC\par
An embedded SQL term. A non-preparable statement which retrieves one or more\par
fields from a diagnostics area. Does the same job as the CLI's SQLGetDiag...\par
functions. Example: "EXEC SQL GET DIAGNOSTICS :simple_target_spec =\par
ROW_COUNT;".\par
\par
GLOBAL\par
Accessible from any Module: the scope is the SQL-session, rather than the\par
Module. The term is most commonly encountered in embedded SQL and in the\par
phrase "global temporary Table".\par
\par
GLYPH\par
A Unicode term. From the Greek "glupho": carve, write on a tablet. What a\par
character looks like to a human after it is drawn or printed. As opposed to\par
encoding -- what the bits are which are used to represent the character to a\par
computer.\par
\par
GMT\par
See: GREENWICH MEAN TIME.\par
\par
GRANT\par
[1] An SQL verb. To give a Privilege (to a user).\par
[2] Sometimes used as a synonym for the noun "Privilege"; the usage is\par
somewhat inexact since not all Privileges can be explicitly granted.\par
\par
GRANT OPTION\par
A characteristic of a Privilege: can it be passed on to other users? If user a\par
says "GRANT <Privilege> TO b WITH GRANT OPTION", then user b has the right to\par
grant the Privilege to other users.\par
\par
GRANTEE\par
The object of a GRANT statement; the user who should receive the Privilege(s).\par
Example: in the statement "GRANT SELECT ON Table_1 TO Sam;" Sam is the\par
grantee.\par
\par
GRANTOR\par
The current user when a GRANT statement happens; the user who is granting the\par
Privilege(s). Example: CONNECT ... (authorization-ID = Sally) then "GRANT\par
SELECT ON Table_1 TO Sam;". Sally is the grantor.\par
\par
GRANULARITY\par
[1] (Of a lock) Bigness of locked area. From coarse to fine, the hierarchy\par
usually is something like: "Table locking", "page locking", "row locking",\par
"Column locking".\par
[2] (Of a Trigger) Whether execution happens once per statement (FOR EACH\par
STATEMENT), or happens once per row-change (FOR EACH ROW).\par
\par
GRAPHIC\par
(Of a character) Visible. Displayable. As opposed to a control character, but\par
space is also a graphic character.\par
\par
GRAPHIC_IRV\par
See: ASCII_GRAPHIC.\par
\par
GREENWICH MEAN TIME\par
An obsolete standard for determining time displacement values, named after the\par
Greenwich Observatory in England, longitude zero. See also: UTC.\par
\par
GROUP\par
A mathematical term. To combine elements of a set using a binary operator. For\par
SQL the relevant operator is "duplicate", so an SQL group is formed by\par
combining duplicate values.\par
\par
GROUP BY CLAUSE\par
A clause beginning with the words GROUP BY, used for lumping together\par
duplicate values from detail rows, often for the purpose of summarizing.\par
\par
GROUP FUNCTION\par
Or Group-Value Function. See: SET FUNCTION.\par
\par
GROUPED TABLE\par
A set of rows produced by a GROUP BY clause or a HAVING clause. Each row is\par
distinct, due to the definition of "group". Rows in grouped Tables may contain\par
values from set functions.\par
\par
GROUPED VIEW\par
A View which contains an aggregate function, a GROUP BY clause or a HAVING\par
clause in its definition.\par
\par
GROUPING COLUMN\par
A Column in a GROUP BY clause. The grouping Column is "what we group by". For\par
example: if Table Table_1 has a Column c and "SELECT c FROM Table_1;" would\par
produce \{'A','B','A ','C',NULL,NULL\} then "SELECT c,COUNT(c) FROM Table_1\par
GROUP BY c;" would produce \{'A' 2,'B' 1,'C' 1,NULL 2\} and the grouping Column\par
is c.\par
\par
H\par
\par
HANDLE\par
A value, usually a 32-bit integer, which is used to refer to a resource. For\par
example: ODBC has handles for environment, connection and statement. For\par
example: DBMSs often store a BLOB's handle, rather than the BLOB itself, in\par
the physical row of a Table file.\par
\par
HANDLER\par
[1] A routine which deals with exceptions. A handler is called when the SQL\par
statement fails.\par
[2] A PSM term. A handler is that which is declared by:\par
<handler declaration> ::=\par
  DECLARE \{CONTINUE|EXIT|UNDO\} HANDLER\par
  FOR <condition value list>\par
  <handler action = SQL procedure statement>\par
... where a condition values is one of: a SQLSTATE value, a condition name,\par
SQLEXCEPTION, SQLWARNING or NOT FOUND.\par
\par
HASH\par
A number (Often a 32-bit integer) which is derived from Column values (fields)\par
employing a lossy compression algorithm. DBMSs occasionally use hashing to\par
speed up access, but "indexes" are a more common mechanism.\par
\par
HAVING CLAUSE\par
A clause which begins with the word HAVING and contains a search condition.\par
The HAVING clause is always associated with GROUP BY (although the GROUP BY\par
may be implicit). The counterpart of a WHERE clause for grouped Tables.\par
\par
HDBC\par
A CLI term. The handle of a dbc (a connection resource). We use hdbc as an\par
abbreviation for what the SQL Standard calls "handle of the SQL-connection".\par
The sqlcli.h header file contains the line: "typedef SQLINTEGER SQLHDBC /*\par
connection handle */". See: DBC.\par
\par
HDESC\par
A CLI term. The handle of a desc.\par
\par
HENV\par
A CLI term. The handle of an env. We use henv as an abbreviated substitute for\par
the cumbersome SQL Standard term "handle of the allocated SQL-environment".\par
The sqlcli.h header file contains the line: "typedef SQLINTEGER SQLHENV /*\par
environment handle */". See: ENV.\par
\par
HEXADECIMAL\par
(Of a number) Using radix = 16 (or: number base 16). SQL numeric values are\par
always decimal, but one can use hexadecimal numbers in bit or binary literals\par
-- for example X'A74B'.\par
\par
HEXIT\par
One of: 0123456789ABCDEF. In the bit string literal X'0A', 0 and A are hexits.\par
Although used by the standard, "hexit" is a rare word. Prefer "hexadecimal\par
digit".\par
\par
HIERARCHICAL DATABASE\par
A database where all relationships between Tables are one-to-one or\par
one-to-many, never many-to-many: "a servant cannot have two masters". For\par
example: SALESREPS --> SALESREPS_SALES is one hierarchy and CLIENTS -->\par
CLIENTS_SALES is another hierarchy, and it would be difficulty to "join"\par
SALESREPS_SALES to CLIENTS_SALES. See also: RELATIONAL DATABASE.\par
\par
HIERARCHY\par
[1] The SQL Object hierarchy is: Cluster --> Catalog --> Schema --> Schema\par
Object (Table, Domain, Constraint, etc.). See also: CLUSTER.\par
[2] A "type hierarchy" or "UDT hierarchy" is a line of descent from supertypes\par
to subtypes. For example, Animals to Mammals to Primates to Chimps -- Animals\par
is the top of the hierarchy (the "maximal supertype"), Chimps is the bottom of\par
the hierarchy (the "leaf type").\par
[3] A "hierarchy option" is part of a Privilege descriptor, indicating that\par
what is granted for a supertable is also granted for all subtables. See also:\par
FAMILY.\par
\par
HOLDABLE CURSOR\par
A Cursor which remains open when the transaction is committed. This is\par
abnormal; only in SQL3 may Cursors be declared as holdable.\par
\par
HOST LANGUAGE\par
A computer language used to write programs that interface with SQL. The\par
standard host languages are: Ada, C, COBOL, Fortran, MUMPS, Pascal, PL/I.\par
Other languages, such as Java and BASIC, are seen with some frequency in\par
microcomputer circles. A program written in a host language is a "host\par
language program". It will contain embedded SQL statements, or it will call\par
SQL via a CLI.\par
\par
HOST VARIABLE\par
A variable defined in a host language program, which is passed (usually by\par
address) to SQL. Usually the term "host variable" is used for embedded SQL\par
only (for a CLI see: PARAMETER). The host variable is always preceded by a\par
colon (:). An indicator may follow; the indicator is not considered part of\par
the host variable. Embedded SQL snippet: "... EXEC SQL BEGIN DECLARE SECTION;\par
x char[5]; EXEC SQL END DECLARE SECTION; ... EXEC SQL UPDATE Table_1 SET col =\par
:x; ..." -- x is an input host variable.\par
\par
HSTMT\par
An unofficial abbreviation, used mostly within programs. In CLI applications\par
we have a convention that h stands for handle and so hstmt is a handle of a\par
stmt. So hstmt is what the SQL Standard calls "handle of the SQL statement".\par
The sqlcli.h header file contains the line: "typedef SQLINTEGER SQLHSTMT /*\par
statement handle */". See also: STMT, HDBC, HENV.\par
\par
I\par
\par
IBM\par
A vendor. Makes "DB2" (short for: IBM Database 2) Universal Database, which in\par
the past has had a great influence on the SQL Standard. {\field{\*\fldinst{HYPERLINK "www.ibm.com"}}{\fldrslt{\ul\cf1 www.ibm.com}}}\f1\fs21 .\par
\par
IDA\par
See: ITEM DESCRIPTOR AREA.\par
\par
IDEMPOTENT LAW\par
A set theory term. "A UNION A" returns A, "A INTERSECT A" returns A.\par
\par
IDENTIFIER\par
An alphanumeric string by which one references an Object in SQL. Identifiers\par
are subject to some restrictions -- must not be the same as a keyword, may\par
contain only certain characters in certain places etc. -- so that the parser's\par
job will be easier. An identifier is part of a name; no qualification is\par
necessary if an identifier uniquely identifies an Object. An analogy: the name\par
"Ralph Klein" refers to a person who may be referred to simply as "Ralph", but\par
if there are two Ralphs in the room we would have to use the fully-qualified\par
name "Ralph Klein". Here is an example of a qualified Table name which\par
contains three identifiers: Catalog1.Schema1.Table1. See also: REGULAR\par
IDENTIFIER, DELIMITED IDENTIFIER.\par
\par
IDENTIFIER CHAIN\par
A sequence of identifiers separated by periods. Usually the chain reflects\par
part of the hierarchy of Objects: [Cluster.] [Catalog.] [Schema.] Schema\par
Object. For Columns, the typical chain is [Table name.] Column name, or\par
[Correlation name.] Column name. See also: QUALIFIER.\par
\par
IDENTIFIER LENGTH\par
The number of characters in an identifier. The SQL-89 standard says the\par
maximum is 18. The SQL-92 and SQL3 standards say the maximum is 128. You can\par
check by passing SQL_MAXIMUM_IDENTIFIER_LENGTH to the SQLGetInfo function. If\par
you use non-Latin characters in identifiers, allow more than 128 octets in\par
your application program buffers because characters might be 16-bit.\par
\par
IDENTITY\par
An operation which returns the same value as was in the input -- thus an\par
identity operation on A is "A*1" or "A+0". In set theory, if you union S with\par
the empty set you end up with S.\par
\par
IEC\par
Abbreviation for International Electrotechnical Commission.\par
\par
IEF\par
See: INTEGRITY ENHANCEMENT FEATURE.\par
\par
IF STATEMENT\par
A PSM term. An SQL conditional statement analogous to the "if" statements of C\par
and Pascal. The usual format is "IF <search condition> THEN <statement list>\par
END IF", or "IF <search condition> THEN <statement list> ELSE <statement list>\par
END IF"; there is also provision for ELSEIF. If the search condition is TRUE,\par
the THEN statement list is executed. If the search condition is FALSE or\par
UNKNOWN, the ELSE statement list is executed (if any).\par
\par
IMMEDIATE\par
An SQL keyword. Without waiting. An EXECUTE IMMEDIATE statement both prepares\par
and executes. A SET CONSTRAINTS ... IMMEDIATE statement activates all deferred\par
Constraints.\par
\par
IMPEDANCE MISMATCH\par
A difficulty that arises when we bind SQL and host language programs, arising\par
from the different rules (e.g.: SQL's use of three-valued logic) or slight\par
incompatibilities in data types (e.g.: SQL's use of multiple Character sets).\par
\par
IMPLEMENTATION\par
[1] An SQL Standard term. A particular SQL DBMS, usually associated with a\par
manufacturer and brand name and major version, in a context. For example "IBM\par
DB2 as implemented on the OS/2 operating system". The Standard avoids using\par
the words "DBMS", so one sometimes finds that for an official phrase -- such\par
as "implementation row descriptor" -- one could substitute "DBMS row\par
descriptor" and thus emphasize that we are talking about the DBMS's side of\par
things, rather than the application's.\par
[2] A client-server term. The implementation is both the client and the\par
server, but not the application.\par
\par
IMPLEMENTATION-DEFINED\par
An SQL Standard term. A characteristic of an SQL DBMS left open by the\par
Standard, which must be defined by the vendor, presumably in the manual. For\par
example, the SQL-92 Standard says it is "implementation-defined" whether an\par
SQL-Schema statement must form a separate transaction on its own. Distinguish:\par
IMPLEMENTATION-DEPENDENT.\par
\par
IMPLEMENTATION-DEPENDENT\par
An SQL Standard term. A characteristic of an SQL DBMS left open by the\par
Standard, which need not be, indeed perhaps should not be, defined by the\par
vendor. For example, the SQL-92 Standard says it is "implementation-dependent"\par
what the physical representation of data should look like, so you should\par
regard the file format as ephemeral. Distinguish: IMPLEMENTATION-DEFINED.\par
Because implementation-dependent is eight syllables, we sometimes avoid it and\par
say "not specified" or "up to the vendor".\par
\par
IMPLEMENTATION PARAMETER DESCRIPTOR\par
Also IPD. A parameter descriptor whose information fields are set by the DBMS.\par
As opposed to: APPLICATION PARAMETER DESCRIPTOR.\par
\par
IMPLEMENTATION ROW DESCRIPTOR\par
Also IRD. A resource, containing information about the Columns in a result\par
set, as set up by the DBMS. It can be confused with the Application Row\par
Descriptor which has corresponding fields; think of the distinction this way:\par
the IRD describes the "bound Columns", while the ARD describes the "bound\par
targets". See also: ARD.\par
\par
IMPLEMENTOR\par
The person or company who creates an implementation. See also: VENDOR.\par
\par
IMPLICIT\par
Unstated; tacit; taken as read. In the SQL statement "SELECT COUNT(*) FROM\par
Table_1 HAVING COUNT(*) > 0;" there is an implicit GROUP BY. The reverse is\par
EXPLICIT.\par
\par
IMPORT\par
To ship data into the database. Usually this involves the DBMS reading a file\par
which has been produced by a non-DBMS program, and inserting in one of the\par
database Tables.\par
\par
IN\par
An SQL keyword. An example of an IN predicate: "IN (a,b,c)" or "IN (SELECT\par
Column1 FROM Table_1)".\par
\par
INCLUDE\par
A set-theory term. Set A is included in set B if all members of A are also\par
members of B.\par
\par
INDEX\par
[1] A sorted set of keys and pointers, usually associated with one Column in a\par
Base table, or with several Columns in the same Base table (in which case it\par
may be called a "multi-Column index" or "concatenated index"). DBMSs often use\par
indexes to speed up searches, but indexes are not mentioned in the official\par
Standard. Alternatives are "full Table scans" and "hashes". Nowadays the usual\par
plural seems to be "indexes" rather than "indices".\par
[2] A CLI term. An integer which identifies an occurrence of an array For\par
example, the RecordNumber parameter in the SQLGetDiagField function is\par
sometimes called an index.\par
\par
INDICATOR\par
An integer variable defined in a host language program, whose value\par
"indicates" whether the main ("data") variable is NULL, on both input and\par
input. For example: the embedded SQL statement "EXEC SQL FETCH Cursor1 INTO :a\par
:b;" puts a value into a (a is the data parameter) and a value in b (b is the\par
indicator parameter); if the fetched value is 'x' then a gets 'x' and b gets\par
0; if the fetched value is NULL then a is irrelevant and b gets -1\par
(SQL_NULL_DATA). Also, in some situations, a positive indicator value is\par
returned for a truncated string.\par
\par
INFORMATION_SCHEMA\par
The Schema that contains the Views that describe the database -- the metadata.\par
For example, to find out what Domains exist, one would select from the DOMAINS\par
View in INFORMATION_SCHEMA.\par
\par
INFORMIX\par
A vendor. Makes "Informix Universal Server". {\field{\*\fldinst{HYPERLINK "www.informix.com"}}{\fldrslt{\ul\cf1 www.informix.com}}}\f1\fs21 .\par
\par
INGRES\par
A vendor.\par
\par
INHERIT\par
Take the characteristics of what underlies. For example, a View Column\par
"inherits" the data type of the underlying Base table Column. Inheritance goes\par
from underlying to top, and so is the reverse of cascading.\par
\par
INHERITANCE\par
An Object/Relational term. A subtype inherits every component of a supertype.\par
For example: if type t1 has two attributes -- t1_a and t1_b -- and we define a\par
new type t2 UNDER t1, then t2 automatically has the attributes t1_a and t1_b;\par
it may additionally have its own attributes (called its "non-inherited" or\par
"originally-defined" attributes). SQL allows "single inheritance": although a\par
type hierarchy can have indefinite length, and although a supertype may have\par
many direct subtypes, a subtype may have only one direct supertype.\par
\par
INITIALLY\par
An SQL keyword, used in the definition of Constraints. An INITIALLY IMMEDIATE\par
Constraint starts off as "a Constraint which must be checked when the SQL\par
statement ends"; it may be INITIALLY DEFERRED (deferral is until COMMIT time\par
or until SET CONSTRAINTS ... IMMEDIATE).\par
\par
INLINE CONSTRAINT\par
An Oracle term. A Constraint which is defined within parentheses.\par
\par
INNER JOIN\par
A type of Join which returns only values from existing rows. Inner joins are\par
the normal garden variety join. See also: OUTER JOIN.\par
\par
INNER TABLE\par
For "a LEFT JOIN b" the inner Table is b. For "a RIGHT JOIN b" the inner Table\par
is a.\par
\par
INPRISE\par
A vendor. Former name: Borland. Associated with Delphi and Interbase.\par
\par
INPUT\par
Directional adjective, thinking of the DBMS is the centre. Thus, an "input\par
parameter" is a parameter for data going from the host language to the DBMS.\par
\par
INSENSITIVE CURSOR\par
If a Cursor is insensitive, then changes made outside the Cursor are not\par
visible to the Cursor. By "changes made outside the Cursor" we mean any\par
updates, other than UPDATE|DELETE ... WHERE CURRENT OF <Cursor>, which would\par
affect rows currently in the Cursor or their definition. By "visible" we mean\par
"seeable if we FETCH using the Cursor". If you open an insensitive Cursor,\par
then FETCH with it and see X, then DELETE every row in the Table with some\par
other Cursor, then FETCH with the insensitive Cursor again, you will still see\par
X -- the DELETE happened but is not visible via the Cursor. See also:\par
SENSITIVE, ASENSITIVE.\par
\par
INSERT\par
An SQL verb. We use INSERT to add a new row to a Table.\par
\par
INSTALLER DLL\par
An ODBC term. The ODBC administrator calls the installer DLL, which is often\par
supplied by a driver vendor, in order to find out what the components are of a\par
data source.\par
\par
INSTANCE\par
[1] A Windows term. Say you load WordPerfect twice in different windows.\par
They're not the same program -- they're two copies of the same program, with\par
different resource allocations, perhaps (but not necessarily) with different\par
data. The two instances are "jobs", but we might reserve the word job for a\par
running of WordPerfect on another computer.\par
[2] An SQL Standard term. A "physical representation of a value" at a\par
particular place in storage. For example, each row in a Table is one\par
"instance" of a row type. An instance of a value occurs at a site.\par
\par
INSTANTIABLE\par
An Object/Relational term.\par
(Of a structure-type UDT) Capable of being represented; not merely abstract;\par
perhaps having instances. An instantiable UDT has a constructor function, may\par
be used with "new" routines, and may be the UDT associated with a typed Table.\par
\par
INTEGER\par
[1] Exact numeric with scale zero.\par
[2] An SQL predefined data type, signed, exact numeric, scale zero, precision\par
implementation-defined. In most implementations precision is 31 bits and\par
INTEGER values range from -2,147,483,647 (not -2,147,483,648) to\par
+2,147,483,647. See also: SMALLINT, EXACT NUMERIC.\par
\par
INTEGRITY\par
[1] The maintenance of a consistent state despite transaction failure or\par
crash.\par
[2] Adherence to Constraints, especially Constraints which have to do with\par
primary and foreign keys. The two general integrity rules are entity integrity\par
(no primary key Column may be null) and referential integrity (no foreign key\par
may reference a nonexistent key). The word "integrity" alone never means\par
attribute integrity (the requirement that every Column value must be in the\par
Column's Domain). See also: REFERENTIAL INTEGRITY.\par
\par
INTEGRITY CONSTRAINT\par
See: CONSTRAINT.\par
\par
INTEGRITY ENHANCEMENT FEATURE\par
Sometimes incorrectly called: integrity enhancement facility. An addition to\par
the SQL-89 Standard, involving primary and foreign keys ("referential\par
integrity"). Simpler integrity features, such as unique Constraints and NOT\par
NULL modifiers, were already present in the SQL-86 Standard.\par
\par
INTERACTIVE SQL\par
See: DIRECT SQL.\par
\par
INTERFACE\par
[1] The routines, protocols and specifications which are needed to cross a\par
boundary between subsystems, for example the CLI is the "Call Level\par
Interface".\par
[2] A descriptor area. The Standard refers to the APD, IPD, ARD and IRD as\par
being four "types of interfaces".\par
[3] An Object/Relational term. (Of a structured UDT) The set of all functions\par
which include the UDT, either in the parameter declarations or as a return\par
type. Example: suppose there are 50 functions (including methods). Of these,\par
20 return type "UDT1", and ten others have an input parameter of type "UDT1".\par
Those 30 functions together are the "interface of UDT1".\par
\par
INTERMEDIATE SQL\par
A level of SQL-92 conformance. An Intermediate SQL implementation can handle\par
more of the SQL specification than Entry SQL, but less than Full SQL. All the\par
well-known SQL-92 implementations today are Intermediate SQL.\par
\par
INTERNATIONAL ORGANIZATION FOR STANDARDIZATION\par
See: ISO.\par
\par
INTERNATIONALIZATION\par
Sometimes spelled i18n. The rules and processes which allow for different\par
customs, languages or practices. SQL takes internationalization into account\par
with its various Character set features; however, in standard SQL the datetime\par
formats and decimal-point notations are always the same.\par
\par
INTEROPERABILITY\par
The likelihood that a host language program will run using two different\par
DBMSs, without requiring changes to the SQL statements in it. In theory,\par
interoperability should increase with adherence to standards. See also:\par
PORTABLE.\par
\par
INTERSECT\par
Merge two Tables, accepting only rows which have values in common. See also:\par
UNION, EXCEPT.\par
\par
INTERVAL\par
An SQL data type for representing the difference between two dates, between\par
two times or between two timestamps.\par
\par
INTERVAL LEADING FIELD PRECISION\par
The components of an interval are called datetime "fields". The first field is\par
the "leading field". The number of positions in this field is the "interval\par
leading field precision". For example, in a year-to-month interval, year is\par
the leading field and we would expect it to have 4 positions.\par
\par
INTERVAL QUALIFIER\par
One or three words, trailing an interval literal or part of an interval Column\par
definition, indicating the start and end fields of the interval. One of: YEAR,\par
MONTH, DAY, MINUTE, SECOND, YEAR TO MONTH, DAY TO HOUR, DAY TO MINUTE, DAY TO\par
SECOND, HOUR TO MINUTE or HOUR TO SECOND. For example, in "INTERVAL '5-5' YEAR\par
TO MONTH", the words "YEAR TO MONTH" are the interval qualifier.\par
\par
INTRODUCER\par
[1] In the Standard: an underscore preceding a Character set name.\par
[2] By extension: the combination of the underscore and the Character set\par
name. For example: _ASCII_FULL 'abcd' is a CHAR literal which contains an\par
introducer -- that is, the literal is explicitly marked as being in the\par
ASCII_FULL Character set. In SQL-92 introducers can precede either literals or\par
identifiers; in SQL3 introducers may only precede literals.\par
[3] The characters that signal a comment is starting, such as -- for simple\par
comments or /* for bracketed comments.\par
\par
INVALID\par
(Of an SQL statement) Containing incorrect syntax.\par
(Of a literal) Containing an illegal combination of characters.\par
(Of a locator) Not referring to anything.\par
\par
INVOCATION\par
See: CALL STATEMENT.\par
\par
IPD\par
See: IMPLEMENTATION PARAMETER DESCRIPTOR.\par
\par
IRD\par
See: IMPLEMENTATION ROW DESCRIPTOR.\par
\par
IS\par
[1] An SQL operator used in predicates which test for NULL values: IS NULL or\par
IS NOT NULL.\par
[2] An SQL operator which permutes the result of a logical (such as a search\par
condition): IS [NOT] TRUE, IS [NOT] FALSE, IS [NOT] UNKNOWN.\par
\par
ISO\par
Abbreviation for International Organization for Standardization. A large\par
multi-function multi-country group which publishes standards. A branch of ISO\par
is IEC, International Electrotechnical Commission, the group responsible for\par
computer standards. Often ISO collaborates with ANSI so if there is an ANSI\par
standard there is often an ISO standard which is nearly the same.\par
\par
ISO 8859-X\par
One of theerfluous. The DISTINCT operation removes all redundant\par
duplicates, for example if there are two duplicate values 1 and 1 it removes\par
the second duplicate, so that only one value remains.\par
\par
REFERENCE\par
[1] An SQL3 predefined data type. A reference value "points to" a row in a\par
Base table which has the REF property.\par
[2] See: REFERENCES.\par
\par
REFERENCEABLE TABLE\par
See: TYPED TABLE.\par
\par
REFERENCED TABLE\par
The Table that contains the primary or unique key which is the object of a\par
foreign key REFERENCES clause. For example, for "CREATE TABLE Table_1 (...\par
REFERENCES Table_2);", Table_1 is the referencing Table and Table_2 is the\par
referenced Table. The Columns of the referenced Table's primary or unique key\par
are the "referenced Columns".\par
\par
REFERENCES\par
(Of a foreign to a primary key Constraint) Is obliged to contain values which\par
match.\par
\par
REFERENCING TABLE\par
The Table that contains a foreign key. For example, for "CREATE TABLE Table_1\par
(... REFERENCES Table_2);", Table_1 is the referencing Table and Table_2 is\par
the referenced Table. The Columns of the referencing Table's foreign key are\par
the "referencing Columns".\par
\par
REFERENTIAL ACTION\par
What happens to a foreign key row if a corresponding row in a referenced Table\par
is updated or deleted: CASCADE, SET NULL, DELETE or NO ACTION.\par
\par
REFERENTIAL CYCLE\par
A given Table may be both "referencing" (have a foreign key) and "referenced"\par
(have a primary key), just as a son may also be a father. Any linked series of\par
foreign keys which eventually leads back to the original Table is a\par
referential cycle. See also: RECURSIVE.\par
\par
REFERENTIAL INTEGRITY\par
A database has referential integrity if all foreign key values are present in\par
the corresponding referenced Tables. It is assumed in advance that the\par
referenced Tables have primary keys and unique keys with unique values.\par
\par
REGULAR IDENTIFIER\par
Also "unquoted identifier". An identifier which is not enclosed in quotes.\par
Used when assigning names to SQL Objects. In SQL-92, regular identifiers begin\par
with \{_ or letter\}, contain only \{_ or letter or digit\} and have a maximum\par
size of 128 characters. Unlike delimited identifiers, regular identifiers may\par
not match reserved words and may not contain special characters. Case is not\par
significant. See also: IDENTIFIER, DELIMITED IDENTIFIER.\par
\par
RELATION\par
A term from relational theory. A relation consists of a heading (the names of\par
attributes) and a body (the attributes' values, multiple-occurrence). Since\par
SQL is relational, some people use relational terms as synonyms for SQL terms:\par
"Table" = "relation", "Column" = "attribute", "row" = "tuple". Doing so is\par
dangerous if you don't keep in mind that there are slight distinctions: (a) a\par
relation is a mathematical set while a Table is only a mathematical set if all\par
rows are distinct; (b) a relation's attributes are considered unordered while\par
a Table's Columns are ordered.\par
\par
RELATIONAL DATABASE\par
[1] Correct Definition: A database which should appear to consist solely of\par
Tables. For the derivation of the word relational, see RELATION (previous\par
entry).\par
[2] Incorrect Definition: A database which contains Tables that are related to\par
each other. Example (from an Oracle text): ** DRIVEL ** "The city name in one\par
table is related to the city name in the other. This relationship is the basis\par
for the name relational database."\par
\par
RELATIONAL DATABASE MANAGEMENT SYSTEM\par
Also RDBMS. A software package which supports all the relational operators and\par
works only with relational databases.\par
\par
RELATIONAL OPERATOR\par
[1] A relational-theory term. One of: selection, projection, join. (There are\par
others, but these are the terminals.)\par
[2] (Not a recommended usage) A synonym for comparison operator.\par
\par
RELATIONAL THEORY\par
Not an SQL Standard term. We use it when referring to the writings of those\par
who have proposed that set theory (including the concept of a "relation") can\par
be applied in developing DBMSs.\par
\par
RELATIVE\par
An SQL Standard term. If we "FETCH ... RELATIVE +1" we get the next row --\par
that is, going forward one compared to the current position. Compare:\par
ABSOLUTE.\par
\par
REMOTE DATABASE ACCESS\par
Often abbreviated: RDA. A standard defining the low-level protocol for\par
computers communicating SQL commands/results in a client/server environment.\par
Standards: ANSI/IEC 9579-1 (generic model service and protocol), ANSI/IEC\par
9579-2 (SQL specification). Mostly, these documents concentrate on the\par
management of SQL databases via an OSI (Open Systems Interconnect) network.\par
\par
REPEAT\par
A PSM term. A keyword introducing a "repeat statement", which takes the form:\par
[<label> :] REPEAT <SQL statement list> UNTIL <search condition> END REPEAT\par
[<ending label>. See also: FOR, LOOP, WHILE.\par
\par
REPEATABLE READ\par
Suppose Sam reads row X from Table Y. Now Joe deletes that row. If Sam now\par
reads again, will he see the same row as before? If the DBMS guarantees that\par
he will, it supports repeatable reads. As an isolation level, REPEATABLE READ\par
is below SERIALIZABLE but above READ COMMITTED. Note: the word "repeatable" is\par
for concurrency contexts; for the case where the same DBMS can return\par
different data regardless of concurrency, there is a different term: see\par
DETERMINISTIC.\par
\par
REPEATING SUBQUERY\par
An obsolete term. See: CORRELATED SUBQUERY.\par
\par
REPERTOIRE\par
A Unicode term. Also: character repertoire. The distinct characters which are\par
available in a Character set. Notice that we only say "characters" here, not\par
"characters and their encodings". For example, the alphabet is a repertoire.\par
See also: FORM-OF-USE.\par
\par
REPLICATE\par
Extract rows from a main database, which (after possible changes) can be\par
merged back in much later. Replication is useful when there are mobile\par
computers that are not permanently linked to the "server".\par
\par
REPOSITORY\par
[1] See: DATA DICTIONARY.\par
[2] (external repository) A data collection which is directly managed by a\par
non-SQL software package, which acts as a server to an SQL3 client, via UDT\par
descriptions. Such, at least, is the dream of SQL/ERI (the SQL external\par
repository interface), which may become a standard in a few years.\par
\par
REPRESENTATION\par
[1] To "represent" is to "stand for". If we say, as in ASCII, that the value\par
65 stands for A, then the 65 is the representation of A in the ASCII encoding.\par
[2] A general term. The way that a value is actually stored, for example (hex)\par
0A is a representation of <newline>.\par
[3] An Object/Relational term. The basis for a UDT definition. A distinct\par
UDT's representation is a predefined data type; a structured-type UDT's\par
representation is a list of attributes and methods.\par
\par
REQUEST\par
Any SQL statement or CLI function call -- seen as a "request" on the part of\par
the application or user, that the DBMS please do something. The less polite\par
word "Command" is usually used to denote a different concept.\par
\par
REQUIREMENT\par
A syntactical condition that must be satisfied for an SQL statement to work.\par
For example, "DROP VIEW V CASCADE;" will fail (return a syntax error) if there\par
is no View named V.\par
\par
RESERVED WORD\par
Also: Reserved Key Word. A word which cannot be used as an identifier because\par
it is significant to the SQL parser. Not all keywords are reserved words.\par
\par
RESET\par
Obsolete term. When we unbind all parameters in an APD by setting the\par
SQL_DATA_POINTER fields to zero, we use SQL_RESET_PARAMS. See also: UNBIND.\par
\par
RESIGNAL\par
A PSM term. An SQL keyword, starting a "resignal statement", which resignals\par
an exception condition.\par
\par
RESOURCE\par
[1] A CLI term. There are four types of resources: env, dbc, stmt, desc.\par
Resources are located by their handles: henv, hdbc, hstmt, hdesc. Resources\par
and their handles are made by SQLAllocHandle functions and destroyed by\par
SQLFreeHandle functions. Also called "CLI resource" or "allocated resource".\par
[2] A general, non-standard term. Anything useable by a program, such as\par
memory or disk space. Often seen in the phrases "lock a resource" or "allocate\par
a resource".\par
\par
RESTRICT\par
[1] Also filter. A relational-theory term. Decide which rows will be operated\par
on (using a predicate). The restrict operation picks the rows, the project\par
operation picks the Columns.\par
[2] An SQL keyword indicating that the DBMS should return an error if the\par
conditions would require cascading; for example, if View V is based on Table\par
T, then "DROP Table T RESTRICT;" should fail.\par
\par
RESULT\par
An ODBC term. Either a result set or a row count.\par
\par
RESULT CODE\par
See: RETURN CODE\par
\par
RESULT SET\par
A set of rows which is produced by a query (such as a SELECT statement). Since\par
the correct application of a relational operation on a Table always results in\par
another Table, a result set is a (derived) Table and the term "result Table"\par
is occasionally used. But a result set is not a named Table which is\par
permanently defined in the database. See also: MATCHLIST.\par
\par
RESULT-GENERATING STATEMENT\par
An ODBC term. An SQL statement that causes production of a result set. See:\par
QUERY.\par
\par
RETRIEVAL ASSIGNMENT\par
An assignment to a target which cannot accept NULL or uses an indicator\par
parameter to signify NULL. For example: a FETCH into a host variable.\par
\par
RETRIEVE\par
To take (a value) outside the DBMS's scope. Opposite of store.\par
\par
RETURN CODE\par
[1] A CLI term. The SMALLINT value returned by a CLI function, equivalent to\par
SQL_SUCCESS, SQL_ERROR, SQL_INVALID_HANDLE, SQL_NO_DATA,\par
SQL_SUCCESS_WITH_INFO, SQL_NEED_DATA, SQL_STILL_EXECUTING. Application program\par
examples in this book frequently contain a line "SQLRETURN sqlreturn;" where\par
SQLRETURN is a synonym for SMALLINT.\par
[2] (Rare) The SMALLINT output parameter passed by reference to a CLI routine.\par
[3] (Obsolete) SQLCODE. See also: NATIVE ERROR.\par
[4] (Obsolete) SQLSTATE. See also: STATUS CODE.\par
\par
RETURNED OCTET LENGTH\par
The length in bytes of a CHAR or BIT or BINARY value which is returned in a\par
descriptor area or to an indicator.\par
\par
REVOKE\par
An SQL verb. To take away Privileges (from users). See also: PRIVILEGES,\par
GRANT.\par
\par
RIGHT JOIN\par
An outer join. In the expression "a RIGHT OUTER JOIN b" Table b is on the\par
right. If there is a row in Table b which is not in Table a, the joined Table\par
contains the Columns of the row in Table b and NULLs for each defined Column\par
in a. For example: if Table a has \{NULL,-1,0,1\} and Table b has \{0,1,2\} then a\par
RIGHT JOIN b produces \{0 0, 1 1, NULL 2\}. See also: OUTER JOIN, LEFT JOIN,\par
FULL JOIN.\par
\par
ROLE\par
An SQL Standard term. A named Object, describing a collection of zero or more\par
Privileges. Handy for granting and revoking bundles of Privileges at a time.\par
Roles and users are in the same name space.\par
\par
ROLL FORWARD\par
Not an SQL Standard term. Update a database using information in a log. Often\par
part of a recovery procedure.\par
\par
ROLLBACK\par
An SQL statement, the opposite of COMMIT. When we ROLLBACK, we cancel data or\par
Schema changes that happened during the transaction and close all Cursors.\par
Thus the database returns to its original state. Normally this original state\par
is the state as of the last COMMIT, but SQL3 has an option for rollbacking to\par
the last savepoint instead.\par
\par
ROUNDING\par
Adjusting to the nearest whole number after arithmetic operation, as opposed\par
to truncation.\par
\par
ROUTINE\par
An SQL3 term. Either a function or a procedure. In a host language, the\par
difference between a function and a procedure is that a function can return a\par
value: the return code. The Standard's CLI document allows for implementations\par
that contain return code in the parameter list (passed by reference so it can\par
receive values). But in practice, if the host language is C or Pascal, expect\par
functions.\par
\par
ROUTINE NAME\par
An SQL3 term. One of the ways that a routine can be identified, (the other is\par
SPECIFIC NAME). The routine name is what you "call" when you use procedures or\par
functions, including methods. However, a routine name may not be unique within\par
a Schema, so the DBMS may need further information when it chooses which\par
routine to execute. See also: SIGNATURE, PATH.\par
\par
ROW\par
[1] An SQL Standard term. A sequence of (Field name, value) pairs -- that is,\par
the header and the instance are both theoretically part of the "row". But in\par
practice we usually forget about the Field name.\par
[2] A sequence of Columns. (Remember that "sequence" implies "ordered".) In\par
relational terms, a "tuple". Often used as a synonym for record. In this sense\par
a row is a container where we place a sequence of values.\par
[3] The horizontal component of a Table (the vertical component is a Column).\par
\par
ROW CONSTRUCTOR\par
See: ROW VALUE CONSTRUCTOR.\par
\par
ROW DESCRIPTOR\par
A CLI term. The description of a result set's Columns. There are two kinds:\par
implementation row descriptors (IRDs) and application row descriptors (ARDs).\par
\par
ROW IDENTIFIER\par
See: ROWID.\par
\par
ROW NUMBER\par
The number of a row within a result set, beginning with 1. See also: ROWID.\par
\par
ROW STATUS ARRAY\par
An ODBC term. An array of values for multiple-FETCH operations used by\par
ODBC-specific CLI functions SQLExtendedFETCH or SQLFETCHScroll, reflecting\par
success/failure for each individual row fetched.\par
\par
ROW SUBQUERY\par
A subquery which returns a single row. For example: "SELECT * FROM Table_1\par
WHERE (c1,c2) = (SELECT c1,c2 FROM Table_2);". The row subquery is not common.\par
The other kinds of subqueries are: scalar subquery, table subquery.\par
\par
ROW TYPE\par
An SQL3 term. A data type which is constructed with the word ROW (the other\par
constructed types are REF and ARRAY). A row type is described as a sequence of\par
Fields.\par
\par
ROW VALUE CONSTRUCTOR\par
Also row constructor. A parenthesized expression containing a comma-delimited\par
series of columnar values -- for example "(a,5,b)". Seen in OVERLAPS\par
predicates, VALUES statements and (uncommonly) in other predicates.\par
\par
ROWID\par
An Oracle term. A Column which contains a row's address. Useful for direct\par
access to a row, but frowned on by relational purists. See also:\par
SELF-REFERENCING COLUMN.\par
\par
ROWSET\par
An ODBC term. Sometimes two words: row set. In ODBC it is possible to retrieve\par
two or more rows from a result set. For example you can FETCH "a set of n\par
rows" into an array. Also: the set of rows returned by a block-Cursor\par
operation. In standard SQL you can only FETCH one row at a time, so in\par
standard SQL there is no need for the term "rowset". Try not to confuse this\par
with: result set.\par
\par
ROWSET BUFFER\par
An ODBC term. Data area allocated by host program, used by SQLExtendedFETCH or\par
by SQLFETCHScroll, containing data and statuses for multiple fetched rows.\par
\par
RULE\par
[1] (Obsolete) Constraint.\par
[2] A statement in the SQL Standard which is preceded by the words General\par
Rule, Syntax Rule or Access Rule. See also: REQUIREMENT.\par
\par
RUNTIME\par
A non-standard term. Runtime is a period (not an interval) during which an SQL\par
statement is being executed.\par
\par
S\par
\par
SAG\par
Abbreviation for SQL Access Group. A consortium for SQL Standards.\par
Generalizing: SAG membership is more commercial than ANSI's or ISO's and SAG's\par
orientation is more toward the CLI than the SQL grammar. Historically, SAG's\par
original mandate was for connections (e.g.: RDA). We respect SAG but usually\par
when we say "standard SQL" we mean "ISO standard SQL". However, there is\par
rarely significant conflict. Often SAG gives a specific prescription where ISO\par
says "implementation-defined"; compare the action of other non-ISO standard\par
bodies like FIPS and X/Open.\par
\par
SATISFY\par
An SQL Standard term.\par
[1] An SQL statement "satisfies the conditions" of a syntax or access rule if\par
it avoids violating it.\par
[2] (Of a CHECK clause in a Constraint) Not FALSE -- that is, a CHECK clause\par
is satisfied if it is either TRUE or UNKNOWN.\par
[3] (Of a HAVING clause) TRUE -- that is, a HAVING clause is satisfied for a\par
given grouped row if it is TRUE, period.\par
\par
SAVEPOINT\par
An SQL3 term. A named moment during a transaction which can\par
be the object of a ROLLBACK statement. That is, with SQL3 a ROLLBACK may\par
specify that only those statements which are "subsequent to savepoint <s>" are\par
to be cancelled, or rolled back. SQL statements exist for creating and\par
releasing savepoints.\par
\par
SCALAR FUNCTION\par
A function which returns a single value given a single-value argument.\par
Example: "OCTET_LENGTH (column_5)". However, AVG is not a scalar function but\par
a set function (it returns a scalar value but its input is not scalar).\par
\par
SCALAR OPERATOR\par
An operator which takes scalar values as operands and returns a scalar value.\par
For example: "+" is a scalar arithmetic operator and ">" is a scalar\par
comparison operator.\par
\par
SCALAR SUBQUERY\par
A subquery which returns a scalar value. Example: SELECT (SELECT MAX(n) FROM\par
Table_1) FROM Table_1);. The other kinds of subquery are: row subquery, Table\par
subquery.\par
\par
SCALAR VALUE\par
A single value. The types of scalar values are: parameter / host language\par
variable, Column instance, literal, or expression containing any of the\par
previous. A compound item, such as a row, has more than one scalar value.\par
\par
SCALE\par
The number of positions after the radix point. Since we deal in decimal\par
numbers, we can define scale as the number of digits after the decimal point.\par
Scale applies only for exact numeric data types: INTEGER and SMALLINT (which\par
have a scale of 0) or DECIMAL and NUMERIC (which have a user-specified scale).\par
See also: FRACTIONAL PRECISION.\par
\par
SCHEMA\par
The level of the SQL Object hierarchy below a Catalog. A named group of\par
Tables/Domains/Constraints/Character sets/etc. which is owned by a single\par
user.\par
\par
SCHEMA DEFINITION STATEMENT\par
An SQL Standard term. One of: CREATE, GRANT. See also: SCHEMA MANIPULATION\par
STATEMENT, SCHEMA STATEMENT.\par
\par
SCHEMA MANIPULATION LANGUAGE\par
Abbreviation: SML. Obsolete. See: SCHEMA MANIPULATION STATEMENT.\par
\par
SCHEMA MANIPULATION STATEMENT\par
An SQL Standard term. One of: ALTER, DROP, REVOKE. See also: SCHEMA DEFINITION\par
STATEMENT, SCHEMA STATEMENT.\par
\par
SCHEMA STATEMENT\par
An SQL Standard term. One of: CREATE, DROP, ALTER, GRANT, REVOKE. See also:\par
SCHEMA DEFINITION STATEMENT, SCHEMA MANIPULATION STATEMENT.\par
\par
SCIENTIFIC NOTATION\par
See: EXPONENTIAL NOTATION.\par
\par
SCOPE\par
The horizon beyond which an identifier is not visible. For example, in C a\par
variable's scope may be the process or the module or the program. For example,\par
in the SQL statement "SELECT C1 FROM Table_1 WHERE C1 = (SELECT C2 FROM\par
Table_2 WHERE C2 = 5)", the scope of the inner SELECT is bounded by the\par
parentheses. Most SQL Objects, except temporary Tables, have global scope\par
i.e.: they can be seen by any SQL statement and in any Module.\par
\par
SCROLL CURSOR\par
A Cursor whose result set you can go both forward or backward in. (With a\par
regular or non-scroll or forward-only Cursor you can only "FETCH NEXT".)\par
\par
SEARCH CONDITION\par
A predicate or combination of predicates. Thus, "a = b OR b = c" is a search\par
condition (which happens to contain two predicates that are merged by a\par
Boolean operator). A search condition can occur within a WHERE clause, a\par
HAVING clause, an ON clause, a CHECK clause or a CASE expression. A search\par
condition returns a value of data type BOOLEAN: TRUE or FALSE or UNKNOWN. For\par
example: assume a Table T that has a Column c and a single row, containing\par
NULL. If we execute the query "SELECT * FROM T WHERE c = 5;" -- the result of\par
the search condition "c = 5" is UNKNOWN for the single row, the WHERE clause\par
rejects all FALSE or UNKNOWN results, so the result of the query is an empty\par
result set.\par
\par
SEARCHED OPERATION\par
An UPDATE statement (searched UPDATE) or DELETE statement (searched DELETE)\par
which is not a positioned operation, that is, contains no WHERE CURRENT OF\par
clause. Examples: "UPDATE Table_1 WHERE c=5;", "DELETE FROM Table_1;".\par
\par
SECOND NORMAL FORM\par
A relational term. There are no Columns which functionally depend on only one\par
Column of a multi-Column primary key. For example, the following Table is not\par
in second normal form: "CREATE TABLE Monthly_Expenses (employee_name CHAR(10),\par
expense_month INT, employee_sex CHAR(100), amount DECIMAL(5,2), PRIMARY KEY\par
(employee_id, expense_month));" -- presumably employee_sex functionally\par
depends on employee_name alone. See also: FIRST NORMAL FORM, FUNCTIONAL\par
DEPENDENCE, NORMALIZATION, PRIMARY KEY.\par
\par
SECURITY\par
Rules and operations which prevent or inhibit access of data by unauthorized\par
users. The basic SQL security model consists of authorizations, users, Roles,\par
Privileges, GRANT and REVOKE statements, the concept of Schema ownership and\par
access rules. See also: INTEGRITY.\par
\par
SELECT CLAUSE\par
Bad usage. Everything preceding the word FROM in a SELECT query expression.\par
See: SELECT LIST.\par
\par
SELECT EXPRESSION\par
A term used by C.J.Date. A synonym for the standard term: query specification.\par
\par
SELECT LIST\par
A list of Columns/expressions, between the word SELECT and the word FROM, in a\par
SELECT statement. The components of a select list, which are separated by\par
commas, can be either "[qualifier.]*" or derived Columns which are specified\par
as: "value expression [AS derived Column name].\par
\par
SELF JOIN\par
A join of an instance of a Table to another instance of the same Table. For\par
example, if Table a has three rows \{1,2,3\}, then "SELECT ... FROM a,a;" will\par
produce nine rows: \{1 1, 1 2, 1 3, 2 1, 2 2, 2 3, 3 1, 3 2, 3 3\}.\par
\par
SELF-REFERENCING COLUMN\par
An Object/Relational term. A unique Column in a typed Table, whose data type\par
is REF(type) For example: for "UDT1" is a UDT name, "CREATE TABLE Table_1 OF\par
"UDT1" REF IS c SYSTEM GENERATED" -- Table_1 is a typed Table and c is the\par
Table's self-referencing Column. Since a row in this Table can be thought of\par
as an instance of the Table's UDT and since a UDT is analogous to a "class",\par
the self-referencing Column is analogous to what object-oriented folk call an\par
"object identifier" (OID). The value of a self-referencing Column is decided\par
at INSERT time; the Column cannot be updated. The types of self-referencing\par
Column are: system generated, user generated and derived.\par
\par
SEMIRELATIONAL\par
(Of a DBMS) Following rules for a relational system, but not exclusively. For\par
example, a DBMS which allows searches via pointer navigation as well as by\par
relational joining.\par
\par
SEPARATOR\par
A character in an SQL statement which helps the parser realize that one token\par
has ended and another is beginning. The clearest separators are spaces. Other\par
separators are: newline (carriage return and/or line feed) and comments. See\par
also: DELIMITER TOKEN.\par
\par
SEQUEL\par
Originally, SEQUEL was the API for an early (circa 1974) IBM relational\par
database system, System R. Later the names SEQUEL and SEQUEL/2 were applied to\par
the language and later still the name was changed to SQL. The name SEQUEL\par
stood for "Structured English Query Language" and "SQL" is often pronounced\par
"sequel" to this day.\par
\par
SEQUENCE\par
[1] A set-theory term. A set which is written in a particular order. Thus\par
\{1,7,8\} and \{8,1,7\} are two different sequences of equal sets. In SQL3,\par
sequences may be multisets.\par
[2] A CLI term. The order of execution. You get a "function sequence error" if\par
you call functions in the wrong order.\par
\par
SEQUENTIAL\par
[1] A search strategy: read the first row in a file and check whether it\par
matches the query, then read the second row, then the third, etc. (without\par
indexes or other speed-up tricks). See also: FULL-TABLE SCAN.\par
[2] The opposite of concurrent.\par
\par
SERIALIZABLE\par
Two transactions are serializable if the effect of running them concurrently\par
is the same as running them sequentially.\par
\par
SERIES\par
[1] A set theory term. A series is a sequence in which the components are\par
separated by some operator, usually +, as in "1+2+3+4".\par
[2] Loosely: a synonym for sequence. For example: "serializable" must mean\par
"capable of being put in a sequence".\par
\par
SERVER\par
A central program in a client/server environment. The server is responsible\par
for accessing a database and returning information to a client.\par
\par
SESSION\par
Also SQL-session. The sequence of database related activities which takes\par
place for an instance of a Module, in the period of time between the execution\par
of CONNECT and DISCONNECT statements. In CLI contexts, the word "connection"\par
is used instead of "session".\par
\par
SESSION STATEMENT\par
Also SQL-session Statement. One of: SET LOCAL TIME ZONE, SET SESSION\par
AUTHORIZATION. In SQL3, add: SET ROLE, SET SESSION CHARACTERISTICS.\par
\par
SESSION_USER\par
An SQL niladic character string function, which returns the identifier of the\par
user associated with the current SQL-session. See also: CURRENT_USER,\par
SYSTEM_USER.\par
\par
SET\par
[1] A mathematical term. An enclosure of values that have something in common.\par
SQL is sometimes said to be a "set-oriented language", but see also: MULTISET,\par
RELATION.\par
[2] An SQL verb, used when changing various options and flags: SET CONNECTION,\par
SET CONSTRAINTS, SET DEFAULT, etc.\par
[3] An SQL keyword, meaning "assign", in the UPDATE statement.\par
\par
SET CONDITION\par
Obsolete. An operator that returns a set of records.\par
\par
SET FUNCTION\par
One of the five built-in SQL functions:  AVG, COUNT, MAX, MIN, SUM, GROUPING,\par
EVERY, ANY, SOME. A set function differs from a scalar function because the\par
input is a collection; however, the output is a scalar value. Often set\par
functions are found in the context of GROUP BY and HAVING clauses, but not\par
necessarily. The popular but non-standard term for set function is "aggregate\par
function".\par
\par
SET OPERATOR\par
One of the three operators that merge sets: UNION, EXCEPT, INTERSECT.\par
\par
SET QUANTIFIER\par
See: QUANTIFIER.\par
\par
SET STATEMENT\par
A PSM term. The statement which assigns values to items. The format is: SET\par
<target> = <source>. The target can be a variable or parameter (not a Column\par
reference). The source can be a value expression.\par
\par
SET THEORY\par
A branch of mathematics. Pioneered by Georg Cantor. Used as a theoretical\par
basis for SQL.\par
\par
SHAPE\par
The box outline of a picture of a Table. Formally: an occasional term for\par
describing a Table's degree, Column names, data types and other descriptive\par
details.\par
\par
SIGNAL\par
A PSM term. An SQL keyword, starting a "signal statement", which signals an\par
exception condition.\par
\par
SIGNATURE\par
An SQL3 term. Information used to identify the correct SQL routine to call.\par
The routine name alone may be insufficient, since two routines in the same\par
Schema may have the same name. However, the statement "CALL R (x)" contains\par
enough information, namely: it's implied that R is a procedure, the routine\par
name is R and there is one parameter with the declared type of x. A complete\par
signature includes: routine type (procedure or non-method function or static\par
function or overriding function), routine name, parameter count and parameter\par
types. See also: PROTOTYPE.\par
\par
SIGNED NUMBER\par
A number which may be preceded by + (positive) or - (negative). In SQL all\par
predefined numeric data types are for signed numbers.\par
\par
SIGNIFICANT\par
The digits in a number, between the last leading zero and the first trailing\par
zero. All the following numbers have 3 significant digits: 3.14, 003.1400,\par
999.\par
\par
SIMILAR\par
An SQL3 keyword. The SIMILAR predicate works much like grep (the general\par
regular expression parser) in Unix. Its syntax and usage are pretty well the\par
same as for the LIKE predicate, but SIMILAR has more pattern options.\par
\par
SIMPLE COMMENT\par
A comment which begins with -- and continues to the end of the line.\par
\par
SIMPLE KEY\par
A key based on a single Column. Opposite of composite key.\par
\par
SIMPLE LATIN LETTER\par
A Latin letter which is not an accented letter.\par
\par
SIMPLE TABLE\par
One of: a query expression, a Table value or an explicit Table.\par
\par
SIMPLE TARGET SPECIFICATION\par
A target specification with no indicator. See also: TARGET SPECIFICATION.\par
\par
SIMPLE VALUE SPECIFICATION\par
A parameter or a host variable, with no indicator. See also: VALUE\par
SPECIFICATION.\par
\par
SINGLE QUOTE\par
See: QUOTE.\par
\par
SINGLETON SELECT\par
An embedded SQL term. A SELECT which can return at most one row. For example:\par
"EXEC SQL SELECT <Column> INTO :host-variable ...;". In effect, this combines\par
into one statement the DECLARE, SELECT, OPEN, FETCH and CLOSE operations. But\par
it's an error if the SELECT returns more than one row.\par
\par
SITE\par
A place which is occupied by an instance of a value. Thus a site can be\par
thought of as a physical storage unit, such as a page of RAM or a file\par
location. Sites may be transient (e.g.: the address of a return code),\par
temporary (e.g.: a resource) or persistent (e.g.: a Schema description). A\par
Base table can be either a temporary or persistent site.\par
\par
SKELETON\par
A CLI term. If an SQLAllocHandle call fails, the DBMS is sometimes able to\par
return a handle anyway -- but this handle is not fully functional, all you can\par
do with it is get diagnostics. Such a handle is a "skeleton".\par
\par
SMALL LETTER\par
See: LOWER CASE LETTER.\par
\par
SMALLINT\par
One of the exact numeric data types with fixed scale of zero (the other\par
standard one is INTEGER). In practice, always a signed 16-bit value with a\par
range between -32767 (not -32768) and +32767.\par
\par
SOME\par
An SQL key word. A synonym for ANY. See: ANY.\par
\par
SORT\par
To arrange values in a sequence which is defined by the characteristics of the\par
data type (for example an ascending number sequence has +5 following -5) and\par
by the Collation. In SQL, the ORDER BY clause ensures sorted results.\par
\par
SOURCE\par
Where something is coming from, as in the "source Character set" (the\par
Character set which is used as a basis for CREATE CHARACTER SET), the "source\par
value" (the value which we "assign" to a "target"), the "insert source" (the\par
rows in an INSERT statement's query expression) and so on.\par
\par
SOURCE CODE\par
A character string containing statements. If the statements are SQL\par
statements, the DBMS may prepare and execute them.\par
\par
SPACE\par
A character which is present in all SQL Character sets. The ASCII encoding for\par
space is 32. Among other things, spaces are separators and pad characters. See\par
also: WHITE SPACE.\par
\par
SPARC\par
Abbreviation for Standards Planning And Requirements Committee.\par
\par
SPECIAL CHARACTER\par
A character which does not appear in an alphabet and is not a digit. The SQL\par
special characters are: / : ; " % & ' ( ) * + , - . < = > ? _ | and space.\par
\par
SPECIAL VALUE\par
An obsolete term. See: NILADIC FUNCTION.\par
\par
SPECIFIC\par
[1] The phrase "most specific type" refers to the type which cannot be broken\par
down into subtypes, i.e.: an atomic type for which all others are supertypes.\par
By extension: the "specific" type TIMESTAMP WITHOUT TIME ZONE is classed with\par
the generality: datetime.\par
[2] In general, the SQL Standard uses the word "specific" for a single\par
particular instance of some group, but it is not a synonym for "specified".\par
\par
SPECIFIC NAME\par
An SQL3 term. A routine can have two names: the routine name and the specific\par
name. The specific name, which may be automatically created by the DBMS in an\par
implementation-dependent fashion, may be qualified. Unlike routine names,\par
specific names are unique (but there is another way to uniquely identify a\par
routine: see SIGNATURE). Sometimes one uses specific names for actions other\par
than "call", for example: "DROP SPECIFIC ROUTINE <specific name> CASCADE;".\par
See also: ROUTINE NAME.\par
\par
SPECIFICATION\par
A word used within terms that imply singularity. Thus, a value specification\par
is a value which contains one operand and no operators; a query specification\par
is a simple query which contains no UNIONs or the like.\par
\par
SQL\par
[1] An SQL Standard term. The language described by the ISO Standard SQL\par
documents.\par
[2] A popular term. Pronounced "Sequel". Stands (unofficially) for Structured\par
Query Language. A (sub)language for accessing computer databases. See also:\par
SEQUEL.\par
\par
SQL CONFORMANCE LEVEL\par
Reflects the fullness with which a particular SQL implementation supports an\par
SQL Standard.\par
\par
SQL DATA TYPE\par
See: DATA TYPE.\par
\par
SQL DATA TYPE CODE\par
See: DATA TYPE CODE.\par
\par
SQL LANGUAGE CHARACTER SET\par
See: SQL_CHARACTER.\par
\par
SQL PROCEDURE STATEMENT\par
See: PROCEDURE STATEMENT.\par
\par
SQL ROUTINE\par
A PSM term. A routine which is written in SQL and invoked from SQL.\par
\par
SQL SERVER\par
See: MICROSOFT or SYBASE.\par
\par
SQL STATEMENT\par
See: STATEMENT.\par
\par
SQL STATEMENT IDENTIFIER\par
See: STATEMENT IDENTIFIER.\par
\par
SQL-TRANSACTION STATEMENT\par
See: TRANSACTION STATEMENT.\par
\par
SQL-\par
Some words that begin with SQL- can be found under their unprefixed\par
equivalents. Example: for "SQL-Schema" see "Schema".\par
\par
SQL-89\par
See: ISO STANDARD SQL.\par
\par
SQL-92\par
Formerly known as SQL2. The official standard before SQL3 and what will be the\par
de facto "official" standard for some years to come. ANSI X3.135-1992 (as\par
amended by Technical Corrigendum 3), ANSI/ISO/IEC 9075-3(1995) for the CLI,\par
ANSI/ISO/IEC 9075-4(1996) for persistent Modules and ANSI/IEC 9759-2 for\par
remote data access. See also: ISO STANDARD SQL.\par
\par
SQL-CONNECTION STATEMENT\par
See: CONNECTION STATEMENT.\par
\par
SQL-CONTROL STATEMENT\par
See: CONTROL STATEMENT.\par
\par
SQL-DATA\par
See: DATA.\par
\par
SQL-DATA STATEMENT\par
See: DATA STATEMENT.\par
\par
SQL-PATH\par
See: PATH.\par
\par
SQL-SCHEMA STATEMENT\par
See: SCHEMA STATEMENT.\par
\par
SQL-SERVER MODULE\par
A PSM term. A Module that is a Schema Object.\par
\par
SQL-SESSION STATEMENT\par
See: SESSION STATEMENT.\par
\par
SQL TRANSACTION\par
See: TRANSACTION.\par
\par
SQL2\par
The original designation for what is now SQL-92.\par
\par
SQL3\par
The original designation for the latest version of the SQL Standard. The name\par
will probably change, just as "SQL2" became "SQL-92".\par
\par
SQL4\par
Some stuff that will still be undone when SQL3 comes out. For example:\par
enumerated data types and null classes.\par
\par
SQLCA\par
A host language data structure containing basic information for SQL\par
applications, such as error returns and sometimes row counts.\par
\par
SQLCLI.H\par
A header file used in CLI applications. C programs may begin with "#include\par
sqlcli.h". Prototypes and definitions in sqlcli.h are suggested in an appendix\par
of the Standard; it is not required that an SQL-conforming program use\par
sqlcli.h.\par
\par
SQLCODE\par
In SQL-92 and earlier, an integer representing a completion state of an SQL\par
statement. For example: 0 is okay. For example: -966 is not okay. No longer\par
supported for SQL3 -- see: SQLSTATE.\par
\par
SQLDA\par
A host language data structure containing information for dynamic SQL\par
applications. Although some DBMSs still support the SQLDA, the modern style is\par
to let the DBMS store the structure. See: ARD, IRD.\par
\par
SQLJ\par
Abbreviation for "SQL - Java". The embedded SQL variant for Java. See also:\par
JDBC.\par
\par
SQLSTATE\par
A five-character output parameter containing a status code for an SQL\par
statement: okay, warning, error. For example: '00000' is okay. For example:\par
'22008' is an error.\par
\par
SQL_CHARACTER\par
Also: SQL language Character set. The set of 83 characters which are\par
meaningful in SQL key words or symbols. In SQL3 and the FIPS specification: a\par
predefined Character set. Other predefined Character sets are: ASCII_GRAPHIC,\par
LATIN1, ASCII_FULL, SQL_TEXT, UNICODE.\par
\par
SQL_TEXT\par
A predefined Character set. SQL_TEXT is a superset of all other Character\par
sets, that is, any character in another set is also in SQL_TEXT. The SQL_TEXT\par
set is used for SQL identifiers. Other predefined Character sets are:\par
ASCII_GRAPHIC, LATIN1, ASCII_FULL, SQL_CHARACTER, UNICODE.\par
\par
STANDARD\par
[1] (As used in this book) ISO Standard SQL or proposed modifications thereof.\par
[2] (Another common and acceptable usage) SQL syntax recognized by more than\par
one vendor, also known as "de facto standard".\par
[3] See: ISO STANDARD SQL.\par
\par
STATE\par
[1] (Of a Cursor) Open or closed.\par
[2] (Of a database) The values of all data and metadata items at a given\par
moment. Any data change or Schema change statement causes a change in state.\par
[3] An SQL3 keyword for a function associated with UDTs.\par
[4] An object oriented term. The ordered sequence of an object's instance's\par
attributes, excluding the object identifier -- see: ROW.\par
\par
STATEMENT\par
[1] Also "SQL Statement". A string containing SQL keywords, structured\par
according to the rules of SQL syntax, designed for passing instructions to the\par
DBMS.\par
[3] Also "Allocated SQL statement". A standard CLI term. See: STMT.\par
[4] A set theory term, not to be used. See instead: SEARCH CONDITION.\par
\par
STATEMENT HANDLE\par
See: HSTMT.\par
\par
STATEMENT IDENTIFIER\par
Also: command function. A short (one-word or two-word or three-word) string\par
based on the general classification of an SQL statement. Usually SQL statement\par
identifiers are based on the most important keywords in the statement and are\par
used for diagnostics messages. The Standard SQL3 statement identifiers are:\par
ALTER DOMAIN, ALTER TABLE, CALL, CLOSE CURSOR, COMMIT WORK, CONNECT, CREATE\par
ASSERTION, CREATE CHARACTER SET, CREATE COLLATION, CREATE DOMAIN, CREATE\par
ORDERING, CREATE ROLE, CREATE ROUTINE, CREATE SCHEMA, CREATE TABLE, CREATE\par
TRANSFORM, CREATE TRANSLATION, CREATE TRIGGER, CREATE TYPE, CREATE VIEW,\par
DECLARE CURSOR, DELETE CURSOR, DELETE WHERE, DISCONNECT, DROP ASSERTION, DROP\par
CHARACTER SET, DROP COLLATION, DROP DOMAIN, DROP ORDERING, DROP ROLE, DROP\par
ROUTINE, DROP SCHEMA, DROP TABLE, DROP TRANSFORM, DROP TRANSLATION, DROP\par
TRIGGER, DROP TYPE, DROP VIEW, FETCH, FREE LOCATOR, GRANT, GRANT ROLE, HOLD\par
LOCATOR, INSERT, OPEN, RELEASE SAVEPOINT, RETURN, REVOKE, ROLLBACK WORK,\par
SAVEPOINT, SELECT, SET CONNECTION, SET CONSTRAINT, SET ROLE, SET SESSION\par
AUTHORIZATION, SET SESSION CHARACTERISTICS, SET TIME ZONE, SET TRANSACTION,\par
START TRANSACTION, UPDATE CURSOR, UPDATE WHERE.\par
\par
STATEMENT INFORMATION ITEM\par
The header part of a status record.\par
\par
STATEMENT TERMINATOR\par
A token in an SQL statement that marks statement end. Almost always a\par
semicolon (;), but in embedded COBOL one would use END-EXEC. In some contexts\par
the statement terminator may be omitted.\par
\par
STATIC CURSOR\par
An ODBC Term. A Cursor that is not dynamic. See also: DYNAMIC CURSOR.\par
\par
STATIC SQL\par
Statements in static SQL assume prior knowledge of the database structure,\par
therefore no access is required to "descriptor areas" at runtime. As opposed\par
to: dynamic SQL. Static SQL may be more efficient when a precompiler is used,\par
since more information is known in advance. Static SQL statements are called\par
"static" because they stay the same, instead of changing when the application\par
runs. See also: DYNAMIC SQL.\par
\par
STATUS CODE\par
The value that is returned in SQLSTATE.\par
\par
STATUS CONDITION\par
The exception or completion condition that an SQL statement or CLI function\par
causes to be raised. See also: status record.\par
\par
STATUS PARAMETER\par
See: SQLSTATE.\par
\par
STATUS RECORD\par
A CLI term. Inside the diagnostics area are zero or more status records. If\par
present, a status record has information about an exception condition or\par
completion condition that was detected during execution of the last CLI\par
function. The record's main fields are: sqlstate string, native-error integer,\par
implementation-dependent error message string. The ODBC manual uses the term\par
"diagnostic record" rather than status record. The Standard uses the terms\par
"condition" or "condition information item" rather than status record in some\par
places, but uses the term status record when the context is the standard CLI.\par
\par
STATUS VARIABLES\par
The sqlcode integer and the sqlstate string.\par
\par
STMT\par
A CLI term. A structured area which is created by SQLAllocHandle\par
(SQL_HANDLE_STMT,...), which is destroyed by\par
SQLFreeHandle(SQL_HANDLE_STMT,...), which belongs to a dbc, which is\par
referenced via a handle (the hstmt) and which is used by all CLI functions\par
that have to do with "statements". The full standard term is actually\par
"allocated SQL statement", but the abbreviations hstmt and hstmt are used in\par
the Standard for CLI examples; we have preferred them because "SQL statement"\par
usually means something else.\par
\par
STORE\par
To place (a value) within the DBMS's scope. Opposite of retrieve.\par
\par
STORE ASSIGNMENT\par
Assign to a target which can contain NULL (without needing a separate\par
indicator parameter). For example: putting values from C parameters into rows\par
in a Table.\par
\par
STORED PROCEDURE\par
A procedure which is kept in the database.\par
\par
STRING\par
[1] A C term. An array of characters ending with a null terminator.\par
[2] An SQL term. A sequence of bits or characters. A value in a BIT or\par
character Column. Or, in SQL3: also a value in a BINARY Column.\par
\par
STRUCTURE\par
A standard C term. A type of data object whose values are sequences of members\par
that have other data object types.\par
\par
STRUCTURED TYPE\par
An Object/Relational term. A UDT which is not a distinct type. Structured\par
types are the only data types which may be part of multi-member type families.\par
Structured types are made with CREATE TYPE statements that contain at least\par
one attribute definition or UNDER clause.\par
\par
SUB (prefix)\par
In general, one prefixes SUB to a word to indicate it "doesn't stand on its\par
own" -- as in subclass, sublanguage, subquery, subtable, subtype. Sometimes it\par
corresponds to a term with the prefix: super.\par
\par
SUBCODE\par
See: SUBTYPE.\par
\par
SUBCLASS\par
The last three characters of the 5-character status code (the first two\par
letters are the Class). \par
\par
SUBJECT DATA TYPE\par
The data type in effect for a Column definition, which affects what can be in\par
the DEFAULT clause.\par
\par
SUBJECT ROUTINE\par
An SQL3 term. The routine which is effectively called.\par
\par
SUBJECT Table\par
[1] The Table that a Trigger acts on.\par
[2] The Table that a DELETE or UPDATE or INSERT statement acts on.\par
\par
SUBLANGUAGE\par
A language which does not stand on its own, because some constructs (e.g.:\par
procedural loops) are not defined and therefore sublanguage statements must be\par
somehow bound with a host language. Standard SQL-92 is in fact a sublanguage\par
but traditionally it is called a language. With PSM the appropriate constructs\par
exist, but PSM implementations are not common (yet).\par
\par
SUBQUERY\par
An SQL Standard term. A parenthesized query which is not an SQL statement. The\par
common example is "SELECT * FROM Table_1 WHERE C1 IN (SELECT C2 FROM\par
Table_2);", where the "(SELECT C2 FROM Table_2)" portion is a subquery and the\par
"SELECT * FROM Table_1 ..." portion is sometimes informally called an outer or\par
parent statement. In the statement "INSERT INTO Table_1 VALUES (1);" the\par
"VALUES (1)" portion is not parenthesized and therefore not formally a\par
subquery, but logically it certainly is. There are three types of subquery:\par
scalar subquery, row subquery, Table subquery.\par
\par
SUBTABLE\par
An Object/Relational term.\par
[1] A typed Table which is effectively subordinate to another Table (the\par
"supertable"), in the same way that a subtype is subordinate to a supertype.\par
Subtables are defined with CREATE TABLE <subtable name> OF <UDT name> UNDER\par
<supertable name>, where: (a) the supertable is also a typed Table and (b) the\par
subtable's UDT is a direct subtype of the supertable's UDT.\par
[2] Similarly to [1], a "viewed subtable" or "subview" is a View which is\par
created UNDER another Table.\par
[3] In the same way that a set is its own subset, all Tables are subtables of\par
themselves. See also: DIRECT, PROPER, SUBTYPE, UDT.\par
\par
SUBTRANSACTION\par
A non-standard term. The part of a transaction which lies between the\par
transaction start and a given savepoint or between a given savepoint and\par
"now".\par
\par
SUBTYPE\par
[1] An Object/Relational term. (In a UDT hierarchy) Type Chimp is a subtype of\par
type Primate if it was created thus: "CREATE TYPE Chimp ... UNDER Primate\par
...". If in turn Primate is a subtype of Mammal, then Chimp is also a subtype\par
of Mammal. In both cases, Chimp is a "proper subtype". Since Chimp may inherit\par
attributes or methods from Primate (the supertype), subtypes formed this way\par
are sometimes called "extensions" (of the supertype).\par
[2] (Of any data type) In the same way that every set is a subset of itself,\par
every data type is its own subtype. For example: INTEGER is a subtype of\par
INTEGER (and of nothing else) and Chimp is a subtype of Chimp (among other\par
things). In these two examples, neither INTEGER nor Chimp are "proper\par
subtypes".\par
[3] (A common erroneous definition) "A data type T2 is a subtype of data type\par
T1 if every value of T2 is also a value of T1". Unfortunately this definition\par
suggests that SMALLINT is a subtype of INTEGER, which isn't so: no predefined\par
data type is a subtype of anything except itself. See also: PROPER SUBTYPE,\par
DIRECT SUBTYPE, SUPERTYPE.\par
[4] Also known as: subcode or DATETIME_INTERVAL_CODE or datetime data type. A\par
numeric code which is used in conjunction with the SQL data type code, for\par
datetime and interval data types only. If SQL data type code = 9 (datetime)\par
then subtype = 1 (date) or 2 (time) or 3 (timestamp) or 4 (time with time\par
zone) or 5 (timestamp with time zone). If SQL data type code = 10 (interval)\par
then subtype = 1 (year) or 2 (month) or 3 (day) or 4 (hour) or 5 (minute) or 6\par
(second) or 7 (year to month) or 8 (day to hour) or 9 (day to minute) or 10\par
(day to second) or 11 (hour to minute) or 12 (hour to second) or 13 (minute to\par
second).\par
\par
SUBVERT\par
Don't use this word, use "violate" instead.\par
\par
SUBVIEW\par
An Object/Relational term. A View which is a subtable.\par
\par
SUCCESS\par
The "okay" state. An SQL/CLI function returns SQL_SUCCESS in the return code\par
if there are no errors or warnings.\par
\par
SUMMARY QUERY\par
Infrequent term. A SELECT statement which contains any or all of (a GROUP BY\par
clause) (a HAVING clause) (a set function).\par
\par
SUPER KEY\par
A candidate key containing more Columns than are necessary for ensuring\par
uniqueness.\par
\par
SUPERTABLE\par
An Object/Relational term. "Supertable" is defined as the reverse of\par
"subtable", that is, if Table t1 is a subtable of Table t2, then t2 is a\par
supertable of t1.\par
\par
SUPERTYPE\par
An Object/Relational term. "Supertype" is defined as the reverse of "subtype",\par
that is, if type t1 is a subtype of type t2, then t2 is a supertype of t1.\par
\par
SYBASE\par
A vendor. Makes "Adaptive Server Enterprise" (formerly Sybase SQL Server) and\par
"Adaptive Server Anywhere" (formerly Watcom SQL). {\field{\*\fldinst{HYPERLINK "www.sybase.com"}}{\fldrslt{\ul\cf1 www.sybase.com}}}\f1\fs21 .\par
\par
SYNONYM\par
A DB2/Oracle term. A Schema Object which translates one Table name to another.\par
In standard SQL one might use a View for this purpose.\par
\par
SYNTAX\par
The expected order and significance of keywords in a language.\par
\par
SYNTAX RULE\par
An SQL Standard term. A syntax rule declares not only what the correct way to\par
express an SQL statement is, but also what Objects must be present (therefore\par
a "syntax error" exception condition may be the result of either syntax error\par
or Catalog lookup failure). See also: ACCESS RULE, GENERAL RULE.\par
\par
SYSTEM\par
From the Greek for "put together". A large computer software package with\par
several distinguishable program components. Common examples: "operating\par
system", "database management system". In the Standard, the word system\par
usually seems to mean operating system.\par
\par
SYSTEM CATALOG\par
Obsolete for metadata or INFORMATION_SCHEMA.\par
\par
SYSTEM GENERATED\par
An Object/Relational term.\par
(Of a self-referencing Column) Values are assigned by the DBMS during insert\par
-- opposed to "user-generated" or "derived" values.\par
\par
SYSTEM R\par
An early IBM relational DBMS, a precursor of SQL. See also: SEQUEL.\par
\par
SYSTEM_USER\par
An SQL niladic character function, which returns an implementation-defined\par
string that equals what the operating system thinks your name is (as opposed\par
to what you logged in to the DBMS with when you connected, which is\par
SESSION_USER).\par
\par
T\par
\par
TABLE\par
[1] An Object defined by a CREATE TABLE statement, which contains one or more\par
ordered Columns.\par
[2] An instance of the preceding, after INSERTs happen, containing one or more\par
unordered rows.\par
[3] (deprecated) A file. Called "Table" because its conceptual representation\par
is a vertical bunch of Columns and a horizontal bunch of rows.\par
\par
TABLE CONSTRUCTOR\par
See: TABLE VALUE CONSTRUCTOR.\par
\par
TABLE ELEMENT\par
A Column or Constraint definition within the CREATE TABLE or ALTER TABLE\par
statements.\par
\par
TABLE EXPRESSION\par
[1] An SQL Standard term. This is the BNF: "FROM clause [WHERE clause] [GROUP\par
BY clause] [HAVING clause]". Notice that a Table expression does not include a\par
select list or an ORDER BY clause.\par
[2] (in the writings of C.J.Date) A synonym for what the Standard calls a\par
query expression.\par
\par
TABLE OPERATOR\par
A FIPS term. One of the operators that combines queries: UNION or EXCEPT or\par
INTERSECT. We prefer the Standard's term: set operator.\par
\par
TABLE REFERENCE\par
[1] One of the comma-delimited references in a FROM clause. Usually that's\par
just the Table identifier, as in "FROM t1,t2" or "FROM Schema1.Table1".\par
Sometimes there's a Correlation name attached, as in "FROM Table_1 AS t1,\par
Table_2 AS t2". Sometimes there's a nested Table, as in "FROM (SELECT * FROM\par
Table_1) AS t1".\par
\par
TABLE SUBQUERY\par
A subquery which returns (potentially) more than one row and (probably) more\par
than one Column). See also: NESTED TABLE.\par
\par
TABLE VALUE CONSTRUCTOR\par
Also: table constructor. A query expression formed with "VALUES (row-value\par
expression) [,(row-value expression)...]". In effect: you can build a\par
multi-Column multi-row Table into an SQL statement. Not that you'd want to\par
though. Table value constructors are occasionally used for static multi-row\par
INSERTs.\par
\par
TABLESPACE\par
DB2/Oracle term. A section of a disk reserved for physical storage of a Table.\par
Advanced users can define two or more Tables in the same Tablespace. With\par
MS-DOS / Windows, tablespace means file, but sometimes a BLOB is not in the\par
same file as the rest of the fields.\par
\par
TARGET SPECIFICATION\par
Where to place (target) output from an SQL statement. The target specification\par
is an output host variable. In the CLI, descriptions of target specifications\par
are in the ARD. See also: SIMPLE TARGET SPECIFICATION.\par
\par
TAUTOLOGY\par
A search condition which can be guaranteed to return TRUE, for example "1 =\par
1".\par
\par
TECHNICAL CORRIGENDUM\par
See: CORRIGENDUM.\par
\par
TEMPORAL\par
Having to do with time. The SQL temporal data types are the datetime data\par
types (DATE/TIME/TIMESTAMP) plus INTERVAL.\par
\par
TEMPORARY\par
Adjective. When a Base table is TEMPORARY, the values in all rows disappear\par
when the transaction or session ends. In SQL3, a View can also be TEMPORARY.\par
\par
TENTATIVELY\par
Not an SQL Standard term. We used it in descriptions of data change operations\par
as a reminder that any changes are still subject to reversal due to a\par
ROLLBACK. Data changes are not permanent until COMMIT happens.\par
\par
TERMINAL\par
The end of the trail. A terminal node has lines coming in but none going out.\par
In BNF, a terminal is a keyword or a special character used as an operator and\par
it is combinations of terminals which we use to construct non-terminal\par
expressions.\par
\par
TERMINATOR\par
An embedded SQL term. The mark that ends an SQL statement. The mark differs\par
depending on the host language. In C or Pascal: semicolon. In COBOL: END-EXEC.\par
\par
TERNARY RELATION\par
A relation with three Columns.\par
\par
THETA JOIN\par
A relational term. A join based on any comparison operator. A specific case,\par
where the operator is =, is an Equijoin.\par
\par
THIRD NORMAL FORM\par
A relational term. A Table is in third normal form if no Column functionally\par
depends on a Column which is not part of the primary key. For example: if\par
country='UK' then monarch='Queen Elizabeth II' and heir='Prince Charles'. That\par
is, monarch and heir are both functionally dependent on country. But heir also\par
depends on monarch (because if the Stuarts overthrow the Queen then the Prince\par
changes too). Therefore "CREATE TABLE Kingdoms (country ... PRIMARY KEY,\par
monarch ..., heir ...)" does not describe a Table which is in third normal\par
form.\par
\par
THREE-VALUED LOGIC\par
A system which contains three logical values: TRUE or FALSE or UNKNOWN. Since\par
SQL allows three-valued logic while most procedure languages allow only\par
two-valued (TRUE/FALSE) logic, this is a source of occasional confusion.\par
Usually the UNKNOWN value happens because NULLs are present somewhere.\par
\par
TIME\par
One of the basic data types. Represents time of day with a 24-hour clock. An\par
example of a TIME literal is '12:00:00'.\par
\par
TIME ZONE\par
Since the sun is not in the same position of the sky at the same time for all\par
regions of the round earth, the time of day differs depending on longitude,\par
that is, the distance east or west of the zero meridian (Greenwich). In SQL we\par
take this factor into account with the two data types: TIME WITH TIME ZONE and\par
TIMESTAMP WITH TIME ZONE.\par
\par
TIMEOUT\par
An ODBC term. A timeout is a connection or statement attribute which is an\par
integer, containing the number of seconds which should elapse before the DBMS\par
gives up and returns an error: "Operation timed out".\par
\par
TIMESTAMP\par
[1] An SQL Standard term. One of the basic data types. Represents both date\par
and time of day, that is, TIMESTAMP is a combination of a DATE and a TIME. An\par
example of a TIMESTAMP literal is '2000-01-01 00:00:00'.\par
[2] A SQL Server term. A TIMESTAMP data type is a binary sequence number used\par
to order statement execution -- the date+time data type is DATETIME. We never\par
use this meaning.\par
\par
TIMESTAMPING\par
An optimistic concurrency control, which requires each accessed/updated row to\par
be marked with a timestamp, which may be some arbitrary serial number or a\par
precise time of day.\par
\par
TOKEN\par
An SQL Standard term. A parser breaks up an SQL statement up into its minimal\par
syntactic components and throws away comments or separators. The result is\par
individual tokens. For example "SELECT /* comment */ col1, 'X' FROM Table_1"\par
becomes 5 tokens: <SELECT> <col1> <'X'> <FROM> <Table_1>.\par
\par
TRACE FILE\par
An ODBC term. For audit or debugging purposes, you may choose to have copies\par
of every SQL statement printed to a file. That file is called the trace file.\par
See also: JOURNAL, LOG.\par
\par
TRAILING\par
Appearing at the end of a string. Opposite of leading. In the character string\par
'ABC ' there is one trailing space. Use this word instead of "rightmost"\par
because (e.g.:) Arabs write from right to left.\par
\par
TRANSACTION\par
Also SQL-transaction.\par
[1] All activities which have taken place since the last COMMIT or ROLLBACK.\par
[2] A group of SQL procedure statements which constitute an atomic execution\par
unit, i.e.: must either all succeed together or all fail together.\par
\par
TRANSACTION STATEMENT\par
Also SQL-transaction statement. One of: COMMIT, ROLLBACK, SET CONSTRAINTS, SET\par
TRANSACTION. In SQL3, add: START TRANSACTION, SAVEPOINT, RELEASE SAVEPOINT.\par
\par
TRANSFORM\par
An SQL3 term. A function which is automatically called when a UDT value is\par
output from the DBMS to the application or input from the application to the\par
DBMS. There is a CREATE TRANSFORM and a DROP TRANSFORM statement.\par
\par
TRANSIENT\par
Designed to have a short existence. SQL-sessions and SQL statements are\par
transient, but the things they operate on -- Modules and databases -- are\par
persistent. See also: TEMPORARY.\par
\par
TRANSLATE\par
An SQL function which changes a string from Character set X to Character set\par
Y. This may involve transliteration, e.g.: change Latin KHAN to Cyrillic XAH\par
(notice that 4 Latin characters became 3 Cyrillic characters --\par
transliteration is rarely one-to-one character-to-character). It may also\par
involve accent stripping, e.g.: change German F\'81hrer to Latin Fuehrer. Or it\par
may involve whatever the implementor wants.\par
\par
TRANSLATION\par
A named SQL Object which controls the mapping between two Character sets. Used\par
by the TRANSLATE function.\par
\par
TRANSLATOR DLL\par
An ODBC term. A DLL which is used to convert character strings to and from the\par
default Windows code page. This is necessary if the application or DBMS does\par
not support SQL-92 Character sets.\par
\par
TRIADIC\par
Having three operands or parameters and so distinguishable from niladic,\par
monadic and dyadic. BETWEEN is a triadic operator. SUBSTRING is a triadic\par
function.\par
\par
TRIGGER\par
An SQL3 term. A named Schema Object, associated with a Base table, which\par
describes a Trigger action time (BEFORE or AFTER), a Trigger event (INSERT or\par
UPDATE or DELETE) and a Trigger action (one or more SQL procedure statements).\par
When the event happens, the DBMS executes the Trigger action. See also:\par
CONSTRAINT.\par
\par
TRIGRAPH\par
An SQL3 term. A three-character string which can be used as a substitute for a\par
bracket. SQL's left bracket trigraph is ??(. SQL's right bracket trigraph is\par
??).\par
\par
TRIM\par
An SQL function which removes lead or trail pad characters. Usually the pad\par
character is a space.\par
\par
TRUE\par
One of the BOOLEAN values (the other two are FALSE and UNKNOWN). See also:\par
LOGIC, THREE-VALUED LOGIC, BOOLEAN.\par
\par
TRUNCATION\par
[1] Chopping of trailing characters in a character string or the trailing bits\par
in a bit string. Happens automatically when assigning a CHAR(6) string to a\par
CHAR(5) string. Also happens with TRIM.\par
[2] Chopping of post-decimal digits in a number (as opposed to rounding).\par
[3] Oracle term. Deletion of all rows in a Table.\par
\par
TUPLE\par
Relational term. See: ROW, RELATION.\par
\par
TWO-PHASE COMMIT\par
When a single transaction is being processed by more than one server, there is\par
a danger that the "all-or-nothing" requirement of the COMMIT process will be\par
violated: one server fails, the other succeeds. Two-phase commit will first do\par
the transaction, then check that it was done.\par
\par
TYPE\par
[1] A verb whose modifier indicates whether a computer language is strict\par
about data type definitions; thus BASIC is "weakly typed" but Pascal and the\par
modern versions of SQL are "strongly typed".\par
[2] See: DATA TYPE.\par
\par
TYPE INDICATOR\par
An ODBC term. An integer representing a data type. For example, the CHAR data\par
type is associated with the code value 1. See also: DATA TYPE CODE.\par
\par
TYPE-PRESERVING FUNCTION\par
A function whose input and output have the same data type. Specifically: if\par
the input parameter has declared type "t", then the return value has most\par
specific type "t" or a subtype of "t".\par
\par
TYPED TABLE\par
An Object/Relational term. A Base table which is created with CREATE TABLE\par
<Table name> OF TYPE <UDT name>, where <UDT name> refers to a structured\par
instantiable UDT. Or, a View which is created similarly. The first Column in a\par
typed Table is a self-referencing Column, hence typed Tables are often called\par
"referenceable Tables". The other Columns in a typed Table have names and data\par
types which correspond to the names and data types in the UDT's attribute\par
definitions. See also: SELF-REFERENCING COLUMN.\par
\par
U\par
\par
UNBIND\par
[1] In an IDA of an ARD, set the SQL_DATA_POINTER field to zero. Or, set all\par
SQL_DATA_POINTER fields to zero by calling SQLFreeStmt(SQL_UNBIND).\par
[2] In an IDA of an APD, set the SQL_DATA_POINTER field to zero. Or, set all\par
SQL_DATA_POINTER fields to zero by calling SQLFreeStmt(SQL_RESET_PARAMS).\par
\par
UDT\par
An SQL3 term. Abbreviation for User Defined Type: a data type which is created\par
by the user with a CREATE TYPE statement. In SQL3 you can go beyond the\par
predefined data types such as INTERVAL and FLOAT and define your own data\par
types. But there's lots of work: you must define processes for every operation\par
that values of this data type can undergo. UDTs are Schema Objects in the same\par
name space as Domains; they contain components (attributes or methods); they\par
may be used wherever a data type" is called for; they are analogous to what in\par
OO jargon is called a "class": they have some object-orientation features such\par
as inheritance and constructors. The two kinds of UDT are: Distinct Type,\par
Structured Type. See also: ADT, DOMAIN.\par
\par
UNDER\par
An Object/Relational term.\par
[1] A clause in a CREATE TABLE or CREATE VIEW statement, which allows for\par
creation of subtables.\par
[2] A clause in a CREATE TYPE statement, which allows for creation of\par
subtypes.\par
[3] A Privilege to use an UNDER clause for an Object (Table or UDT), required\par
when defining subtypes or subtables.\par
\par
UNDERLINE\par
See: UNDERSCORE.\par
\par
UNDERLYING\par
Used as a foundation in an Object definition. Example: if we say "CREATE VIEW\par
V (v1) AS SELECT s1 FROM Table_1;", then Table_1 is the underlying Table of\par
View V and s1 is the underlying Column of View Column v1.\par
\par
UNDERSCORE\par
The _ character (value = 95 in ISO 8859-1 encoding). Underscores may be used\par
inside identifiers. They operate as position markers within LIKE patterns.\par
\par
UNICODE\par
[1] A standardized encoding which takes into account the great majority of the\par
world's writing schemes. There are several levels, but what most people mean\par
when they say "Unicode" is: a 16-bit "wide char" encoding which matches\par
official standard ISO 10646. Text: The Unicode Consortium, The Unicode\par
Standard, Version 2.0, 1996. ISBN 0-201-48345-9. Web site: {\field{\*\fldinst{HYPERLINK "www.unicode.org"}}{\fldrslt{\ul\cf1 www.unicode.org}}}\f1\fs21 .\par
[2] In SQL3, a predefined Character set. It may also be called ISO10646. This\par
set includes all Unicode characters. It may be the same set as SQL_TEXT. \par
\par
UNION\par
One of the SQL set operators (the others are EXCEPT and INTERSECT). The union\par
of a set containing \{a,b,c,d,e\} with a set containing \{c,d,e,f,g\} results in\par
\{a,b,c,d,e,f,g\} (duplicates are eliminated). If the operator is UNION ALL, the\par
result is \{a,b,c,c,d,d,e,e,f,g\} (duplicates are not eliminated).\par
\par
UNION COMPATIBLE\par
Having the same degree (number of Columns) and having similar Columns. Thus\par
(5,'A') is union compatible with (-33,'C') but not with ('A',5) or (5).\par
\par
USER DESC\par
A desc which is created with SQLAllocHandle(SQL_HANDLE_DESC...) and associated\par
with a dbc. As opposed to: automatic desc.\par
\par
UNION JOIN\par
An operation which combines the features of a union and a join.\par
\par
UNIQUE\par
(Of a set) All members of the set have different values. A NULL is different\par
from another NULL. A non-NULL is different from another non-NULL if a\par
comparison shows they're not "equal". For example, the following set is\par
unique: \{1,2,3,4,NULL,NULL\}. For counter-example, the following set is not\par
unique: \{1,2,3,4,4,NULL,NULL\}. The search condition "UNIQUE (SELECT col1 FROM\par
Table_1);" is TRUE if the subquery is unique. The Table Constraint in "ALTER\par
TABLE Table_1 ADD CONSTRAINT c UNIQUE (col1);" is satisfied if Table_1 is\par
unique.\par
\par
UNIQUE INDEX\par
An index whose keys must be unique. Often unique indexes are used to support\par
the UNIQUE Constraint, but that's an implementation consideration -- index\par
usage is not defined by the SQL Standard.\par
\par
UNIT OF WORK\par
Non-standard term. See: TRANSACTION.\par
\par
UNIVERSAL TIME\par
See: UTC.\par
\par
UNIX\par
An operating system.\par
\par
UNKNOWN\par
One of three logical-result values (the others are the more familiar TRUE and\par
FALSE). See also: LOGIC.\par
\par
UNNAMED\par
[1] (Of a Column) The statement "SELECT Column_1, 1+1 AS "1+1",\par
UPPER(Column_2) FROM Table_1;" has 3 Columns in a select list. The first is\par
named: it inherits the Table Column name. The second is named: it has an AS\par
clause. The third is unnamed: although the DBMS will assign it an\par
implementation-dependent name, it's not explicitly named.\par
[2] (Of a Module) Lacking a name clause.\par
\par
UNQUOTED\par
(Of a string) Not within quotes. 'A' is a quoted string; A is an unquoted\par
string.\par
\par
UPDATABLE\par
An SQL Standard term. Applies to query expressions and therefore applies to\par
Views (since in the Standard definition a View is a named query expression).\par
The phrase "updatable View" is common. Updatability is certain if the query\par
merely selects some or all Columns from one Base table; beyond that\par
restrictions may apply. An updatable View can be used as the object of INSERT,\par
UPDATE or DELETE operations.\par
\par
UPDATE\par
[1] An SQL keyword, found at the start of an "UPDATE statement", which changes\par
specified Column values in existing rows. Example: "UPDATE Employees SET\par
salary = salary / 2;".\par
[2] (When set in lower case to indicate it is not a keyword) Change database\par
contents with any or all of: DELETE, INSERT, UPDATE. \par
But see: DATA CHANGE STATEMENT. Note that some other SQL statements, such as\par
DROP and ALTER, may have an implicit updating effect.\par
\par
UPDATE RULE\par
The part of a Constraint clause that begins with the words "ON UPDATE ...".\par
This specifies referential action on a foreign key if a primary key is\par
updated.\par
\par
UPPER\par
An SQL monadic function which returns the upper-case equivalent of a character\par
string. Thus UPPER('A. Smith') returns 'A. SMITH'. In SQL-92 the UPPER\par
function only works for simple Latin letters, in SQL3 the UPPER function\par
should work for any letters.\par
\par
UPPER CASE\par
A form of a letter in a Latin, Greek, Cyrillic, Georgian or Armenian alphabet.\par
In English text, upper case is used at the beginning of a sentence or proper\par
name. The official (Unicode) name of an upper case letter always contains the\par
word "capital", e.g.: LATIN CAPITAL LETTER M.\par
\par
USAGE\par
An SQL Standard term. A type of Privilege which applies to non-tabular\par
Objects, such as Domains or Translations.\par
\par
USER\par
[1] Somebody who types on a keyboard or clicks on a mouse.\par
[2] The person(s) associated with an AuthorizationID. See also: ROLE.\par
\par
USER DEFINED TYPE\par
See: UDT.\par
\par
USER IDENTIFIER\par
[1] (SQL-session user identifier) An identifier which is set by the CONNECT or\par
(SQL3) SET SESSION AUTHORIZATION statement and is retrievable via the\par
SESSION_USER niladic function.\par
[2] (Current user identifier) An identifier which may be the same as the\par
session user identifier, but with SQL3 the authorization might be a Role\par
instead.\par
\par
USER TABLES\par
Tables that users can CREATE and DROP. The Views in INFORMATION_SCHEMA are not\par
user Tables.\par
\par
USER-DEFINED\par
The opposite of implementation-defined. In SQL3, users can define certain\par
things (such as data types and functions) which are fixed ("built in") with\par
earlier versions of the SQL Standard.\par
\par
USER-DEFINED TYPE\par
See: UDT.\par
\par
USER GENERATED\par
An Object/Relational term.\par
(Of a self-referencing Column) Values are supplied by the user during insert\par
-- as opposed to "system generated" or "derived".\par
\par
UTC\par
Stands for Universal Time Coordinated (though many people prefer to say\par
Universal Coordinated Time). The base for displacement of SQL time values.\par
Differs by a few seconds from GMT (Greenwich Mean Time).\par
\par
V\par
\par
VALID\par
Legally acceptable. Said of a value, a database state, a locator, a character\par
encoding, a procedure or an identifier.\par
\par
VALIDATION\par
[1] Obsolete for Constraint (on a Column).\par
[2] Syntax check to determine whether a literal value is appropriate for a\par
data type, for example whether '199x-44-12' is a valid date.\par
[2] An ODBC term. A comparison of a parsed statement's identifier tokens\par
(e.g.: Table names) with the database Catalog components (e.g.: Table\par
descriptors), accompanied by Privilege testing.\par
\par
VALUE\par
SQL distinguishes between "row values" (multi-component) and "scalar values"\par
(single-component). In this book we sometimes use value as a synonym for\par
scalar value.\par
[1] An occurrence of an attribute. For example: color is an attribute and\par
"green" is a specific color, so "green" is an occurrence of a color attribute.\par
[2] A literal or expression result. To remember the distinction between a\par
variable and its value, pull a penny out of your pocket. Read it. It says "One\par
Cent" on one side. But you did not pull out one cent. You pulled out one\par
penny.\par
\par
VALUE SPECIFICATION\par
A value by itself, with no operators. Thus these are value specifications: a\par
literal, a host variable (including indicator), a Column name, a niladic\par
function, the word VALUE in a Domain Constraint. If you put two value\par
specifications together, e.g.: 5+5, that's a value expression. See also:\par
SIMPLE VALUE SPECIFICATION.\par
\par
VALUES\par
An SQL-92 verb. Most commonly seen nested in an INSERT statement, as in\par
"INSERT INTO Table_1 VALUES (1,2,3);".\par
\par
VARCHAR\par
An abbreviation for CHAR VARYING. See: CHARACTER, VARYING.\par
\par
VARIABLE\par
[1] Any unknown in an equation -- e.g.: for "x+5", x is a variable (5 is a\par
constant or literal).\par
[2] See: HOST VARIABLE.\par
[3] See: PARAMETER.\par
\par
VARIABLE-LENGTH\par
See: VARYING.\par
\par
VARIABLE-LENGTH ENCODING\par
An encoding, popular for Chinese and Japanese character sets, where one, two,\par
or more octets may be needed to represent a character. Usually variable-length\par
encoding involves escape sequences. See also: FIXED-LENGTH ENCODING,\par
FORM-OF-USE, MULTIBYTE.\par
\par
VARYING\par
(Of a CHAR or BIT description) Variable in length. Thus, a Column described as\par
BIT VARYING (n) may contain values whose length ranges from 0 to n bits.\par
Similarly, a Column defined as CHAR VARYING (5) might contain 'ABCDE' (4\par
characters) or only 'A ' (2 characters). It is not correct to say that a CHAR\par
VARYING is a CHAR from which trail spaces are stripped. An abbreviation for\par
CHAR VARYING is VARCHAR. For the opposite, see: FIXED-LENGTH.\par
\par
VENDOR\par
A certain company who sells an SQL product. See also: IMPLEMENTOR. In this\par
book, we have used "implementor" as a vague term when we had nobody particular\par
in mind; we have used "vendor" to mean, specifically, one of these companies:\par
\{Centura IBM Informix Ingres Inprise Microsoft Ocelot Oracle Sybase XDB\}.\par
\par
VERB\par
Not an SQL Standard term. An SQL keyword, generally the first word in an SQL\par
statement, often an English verb, which describes the general action. For\par
example: SET, SELECT, CREATE. See also: STATEMENT IDENTIFIER.\par
\par
VERBOSE CODE\par
An ODBC term. For this book we have preferred the standard term: see DATA TYPE\par
CODE.\par
\par
VERSION\par
A non-standard term. Part of the definition of the implementation. In\par
SQLGetInfo, this is a string containing '##.##.#### comment', where the first\par
two digits are the major version, then comes the minor version, then the\par
release and then an optional comment or name.\par
\par
VERSIONING\par
An ODBC term. A non-standard aid for concurrency control.\par
\par
VIEW\par
[1] An SQL Standard term. According to the Standard a View is a "named query"\par
in a Schema, defined with a CREATE VIEW statement. So, very pickily: a View is\par
not a Table. But the result of a View is a Table. That is why one sometimes\par
sees the term "Viewed Table".\par
[2] Also derived Table or virtual Table. A Table whose definition and content\par
come from another Table via a selection. (Do not use "View" in this sense --\par
only named derived Tables should be called Views.)\par
\par
VIEW COLUMN LIST\par
The list of Column names that optionally appears in a View definition. In\par
"CREATE VIEW V (v1,v2) AS SELECT t1,t2 FROM Table_1;" the list (v1,v2) is a\par
View Column list.\par
\par
VIEW DEFINITION\par
A CREATE VIEW statement.\par
\par
VIEWED TABLE\par
See: VIEW.\par
\par
VIOLATE\par
Fail or refuse to comply with a rule or convention. Example: if we have a\par
Domain Constraint "CHECK (value > 6)" and we say "INSERT ... VALUES (5)", we\par
are attempting to violate the Constraint. One can also attempt to violate\par
security (by getting around the Privilege restrictions).\par
\par
VIRTUAL COLUMN\par
A dBASE term. A Column which is based on a calculation, as opposed to a Column\par
which is actually stored in the Base table. See also: PSEUDO-COLUMN.\par
\par
VIRTUAL TABLE\par
A Table which is derived from another Table (or Tables) via the application of\par
relational operators. For example: "SELECT a,b,c FROM Table_1 WHERE a=5;"\par
brings three virtual Tables into momentary existence: (1) "FROM Table_1" makes\par
a virtual Table which is a copy of the Base table t; (2) "WHERE a=5" makes a\par
virtual Table which is a row-subset (i.e.: restriction) of the Table made by\par
step (1); (3) "SELECT a,b,c" makes a virtual Table which is a projection of\par
the Table made by step (2). Usually these "virtual Tables" are only\par
conceptual, but it helps us understand SQL syntax if we realize that every\par
SELECT clause makes a virtual Table. For non-virtual Tables, see: BASE TABLE.\par
For named virtual Tables, see: VIEW. For virtual Tables which are\par
materialized, see: DERIVED TABLE.\par
\par
W\par
\par
WARNING\par
An SQL procedure statement can end with success, no-data, error or warning.\par
The SQLSTATE variable will get a status code with class = '01'. If the\par
statement was executed via a CLI function call, the return code will be\par
SQL_SUCCESS_WITH_INFO. Typically a warning happens if the statement executed,\par
but something was noticed during execution. For example: "NULL value\par
eliminated during set function". See also: COMPLETION CONDITION.\par
\par
WATCOM SQL\par
See: SYBASE.\par
\par
WHENEVER\par
The embedded SQL statement "EXEC SQL WHENEVER SQLERROR GOTO x;" means: "after\par
every SQL statement following this, there is an implicit host language\par
statement saying "if (sqlcode<0) goto x;".\par
\par
WHERE CLAUSE\par
A clause which contains a search condition. The WHERE clause picks out those\par
rows for which the search condition is TRUE (not FALSE or UNKNOWN).\par
\par
WHILE\par
A PSM term. A keyword introducing a "while statement", which takes the form:\par
[<label> :] WHILE <search condition> DO <SQL statement list> END WHILE\par
[<ending label>]. See also: FOR, LOOP, REPEAT.\par
\par
WHITE SPACE\par
One or more spaces or characters which SQL considers to be equivalent to\par
spaces for the purpose of deciding "this is a separator" (as opposed to: part\par
of a token). The following are the white space characters in Unicode, with\par
hexadecimal codes (notice that the first seven are also in the ASCII_FULL\par
Character set): Horizontal Tab (U+0009), Line Feed (U+000A), Vertical\par
Tabulation (U+000B), Form Feed (U+000C), Carriage Return (U+000D), Space\par
(U+0020), No-Break Space (U+00A0), En Quad (U+2000), Em Quad (U+2001), En\par
Space (U+2002), Em Space (U+2003), Three-Per-Em Space (U+2004), Four-Per-Em\par
Space (U+2005), Six-Per-Em Space (U+2006), Figure Space (U+2007), Punctuation\par
Space (U+2008), Thin Space (U+2009), Hair Space (U+200A), Zero Width Space\par
(U+200B), Zero Width Non-Joiner (U+200C), Zero Width Joiner (U+200D),\par
Left-To-Right Mark (U+200F), Right-To-Left Mark (U+200F), Line Separator\par
(U+2028), Paragraph Separator (U+2029), Zero Width No-Break Space (U+FEFF).\par
\par
WIDE CHAR\par
A C term. A 16-bit character encoding which is signalled by the type\par
definition char_t and whose strings are preceded by L as in L"abc". See also:\par
ENCODING, MULTIBYTE, UNICODE.\par
\par
WILDCARD\par
A special "stands for anything" character in a LIKE or SIMILAR pattern,\par
usually % or _.\par
\par
WRITE\par
An operating system term. The word "write" usually applies to disk files: by\par
writing a record, we make a copy of that record in a disk file. For a database\par
context, this would usually occur if we COMMIT after a data-change. See also:\par
READ.\par
\par
WRITE-AHEAD CACHE\par
An operating system term. An area in RAM which holds copies of buffers that\par
should be written to disk. Write-ahead caches increase speed but (if the\par
operating system is MS-Windows) they are unsafe.\par
\par
X\par
\par
X/OPEN\par
\par
"X/Open and the 'X' symbol are registered trademarks of X/Open Company Ltd. in\par
the UK and other countries" ... This organization, which is involved with\par
several Unix standards, published the Common Applications Environment (CAE)\par
specification, with the SAG/CLI. X/Open's "Data Management Working Group" is\par
responsible for a standard that is much like ISO Standard SQL Intermediate\par
Level, plus a few commands which many vendors have implemented (like CREATE\par
INDEX and DROP INDEX). X/Open is now part of The Open Group, {\field{\*\fldinst{HYPERLINK "www.open.org"}}{\fldrslt{\ul\cf1 www.open.org}}}\f1\fs21 .\par
\par
X3\par
The American ACME which is responsible for some computer standards. Above X3\par
is ANSI. Below X3 are the technical committees, of which the most relevant is\par
X3H2, the members of which discuss and propose the wording of one particular\par
standard: SQL. In other words, the SQL Standard is produced by the X3H2\par
"Database" committee of the X3 organization, which reports to ANSI. See also:\par
ISO.\par
\par
Y\par
\par
YEAR-MONTH INTERVAL\par
An interval which includes year and/or month fields. See also: DAY-TIME\par
INTERVAL.\par
\par
Z\par
\par
ZERO BASED INDEXING\par
An ODBC term. In the C expression "a[n]", n is the index of an array. What is\par
the first element of the array? If a[0], that's zero based indexing. In almost\par
all SQL contexts, a[1] is the first element. However, there are some\par
exceptions in ODBC.\par
\par
ZONE\par
See: TIME ZONE.\par
\par
[]\par
Non-standard special characters. Usual name: "brackets". Not used in standard\par
SQL, but in syntax descriptions, brackets enclose options. See also: BNF.\par
\par
_\par
SQL special character; used as an introducer or as part of a name. Standard\par
name: "underscore". The specification that the underscore is a SQL special\par
character may be an error in the Standard. Underscores are often used in\par
identifiers, for example: Time_Of_Day. They have a special significance in\par
LIKE patterns, for example: "... LIKE '_A_B%' ...".\par
\par
|\par
SQL special character; used in a SIMILAR pattern to denote logical OR.\par
Standard name: "vertical bar". Also called "broken vertical bar" or (in\par
Unicode) "vertical line". In BNF, a vertical bar separates two options --\par
e.g.: CASCADE | RESTRICT. See also: BNF.\par
\par
||\par
SQL concatenation operator. See also: CONCATENATION.\par
\par
\{\}\par
Non-standard special characters. Usual name: "braces". Also called (in\par
Unicode) "curly bracket".\par
[1] Not used in standard SQL, but in syntax descriptions braces enclose a\par
choice of compulsory alternatives. See also: BNF.\par
[2] In set-theory notation, braces enclose the members of a set. In this book\par
we have used braces for both meaning [1] and meaning [2].\par
\page\par
APPENDIX G -- Errata\par
\par
This concise errata list concerns apparent errors in some of our source\par
literature, such as the SQL standard documents or the ODBC manual. We do not\par
intend this as a comment. Like any errata list, its sole use is to help you\par
avoid confusion if you happen to read one of those texts. And, like any errata\par
list, it's ephemeral. At some time, the original documents will cease to contain these errors.\par
\par
SQL Foundation\par
\par
## The data type and size of CURRENT_ROLE is not defined, but we have assumed that it's supposed to match the data type and size defined for CURRENT_USER.\par
\par
## The Standard declares that precision is the number of "significant digits". We have to assume they don't use the usual definition of significant.\par
\par
## The Standard speaks of valid datetime or interval results "according to the\par
Gregorian calendar". But the Gregorian calendar only validates dates. We\par
assume they mean "based on a 24 hour clock" for times, with adjustments\par
according to the Gregorian calendar in the case of timestamps and (where applicable) intervals.\par
\par
## The word "satisfies" means "is TRUE" when the context is the HAVING clause,\par
or "is not FALSE" when the context is a constraint. But it is not clear what\par
"satisfies" means when the context is a WHEN clause or a view's WITH CHECK\par
OPTION clause. Therefore it is not possible to be sure whether these clauses\par
are "satisfied" if the search conditions that they refer to are UNKNOWN.\par
\par
## SQL3's BOOLEAN data type should have four values: TRUE, FALSE, UNKNOWN and NULL.\par
\par
## For "effect of replacing rows in base tables", the trigger event is defined as DELETE. We assume that UPDATE is meant.\par
\par
## The DROP TABLE ... CASCADE definition fails to specify that all dependent\par
triggers will also be dropped. The DROP TABLE ... RESTRICT definition fails to\par
specify that, if there are dependent triggers, the drop will fail. Since\par
analogous statements are true for DROP VIEW, we assume that they should also be true for DROP TABLE.\par
\par
## The Standard states six times that the following statement, or a slight variation thereof, is "implicit" (in column definitions etc.):\par
      "CREATE TRIGGER BTN BEFORE DELETE ON TND\par
        FOR EACH STATEMENT\par
        SET CONSTRAINT CCN DEFERRED"\par
\par
But SET CONSTRAINT statements are illegal within triggers.\par
\par
## According to the Standard, DROP TRIGGER is legal in Core SQL; but CREATE TRIGGER is illegal. We assume that the intent is not to include DROP TRIGGER in Core SQL either.\par
\par
## In the description of <cast specification> there is a reference to an\par
SQLSTATE error 'Data exception - invalid interval format'; this error does not\par
appear in the list of SQLSTATE exception conditions so we haven't been able to provide an SQLSTATE code for it.\par
\par
## The ASCII_FULL character set does not include the \\0 character. This contradicts FIPS, and makes casts from bit strings difficult.\par
\par
## The Standard's Section 9.7 <type name determination> has no mention of BOOLEAN. Neither does Section 10.14. BOOLEAN appears to have been forgotten in many places.\par
\par
## There is an initial definition of "subtype". The Standard's description of UDTs is comprehensible only if this definition is ignored.\par
\par
## The Standard's definition of "direct subtype" is confusing:\par
"A type T(a) is a direct subtype of a type T(b) if T(a) is a proper subtype of\par
T(b) and there does not exist a type T(c) such that T(c) is a proper subtype\par
of T(b) and a proper subtype of T(a)."\par
\par
Perhaps it should read:\par
"A type T(a) is a direct subtype of a type T(b) if T(a) is a proper subtype of\par
T(b) and there does not exist a type T(c) such that T(c) is a proper subtype\par
of T(b) and a proper supertype of T(a)."\par
\par
If this emendation is correct, then the terms "every direct supertype" and "every direct supertable" are misleading; more English are the terms "the direct supertype" and "the direct supertable", passim.\par
\par
## The CREATE TYPE definition contains a contradiction:\par
"4) If <subtype clause> is not specified, then <representation> shall be specified.\par
 5) If <subtype clause> is not specified, then NOT FINAL shall be specified.\par
 6) If <representation> specifies <predefined type>, then:\par
     a) ...\par
     b) FINAL shall be specified.\par
     c) <subtype clause> shall not be specified."\par
\par
We have made no assumption as to the Standard's intent here.\par
\par
## The BNF nonterminal <method specification> is defined differently in two separate sections. We have made no assumption as to which definition is the correct one.\par
\par
## For the NEW statement, the Standard contains this suspicious looking grammer:\par
"<new specification> ::= NEW <routine invocation>\par
\par
   <new invocation> ::= <method invocation>"\par
\par
<new invocation> is not used elsewhere. We assume that the definition is actually "NEW <method invocation>".\par
\par
If this assumption is incorrect, the first syntax rule for the NEW statement seems like it would work only for the main option:\par
"1) Let RN be the <routine name> immediately contained in the <routine invocation>. Let MN be the <qualified identifier> immediately contained in RN."\par
\par
Possibly what is meant is:\par
"1) Let RN be the <routine name> immediately contained in the <routine invocation> or <method invocation>. Let MN be the <qualified identifier> immediately contained in RN."\par
\par
## This note looks out of place, and in any case is superseded by Note 243:\par
"NOTE 242 - The comparison categories of two user-defined types in the same type family must be the same."\par
\par
Possibly what is meant is:\par
"NOTE 242 - The comparison forms of two user-defined types in the same type family must be the same."\par
\par
## The INFORMATION_SCHEMA.ATTRIBUTES view definition contains references to\par
TABLE_CATALOG and COLUMN_DEFAULT columns -- neither of which are applicable\par
here. We assume they should be UDT_CATALOG and ATTRIBUTE_DEFAULT.\par
\par
## The DEFINITION_SCHEMA.ATTRIBUTES base table is also defined as having two\par
columns -- TABLE_CATALOG and TABLE_SCHEMA -- which are not applicable here. We assume they should be UDT_CATALOG and UDT_SCHEMA.\par
\par
Also, this table's columns USER_DEFINED_TYPE_CATALOG, USER_DEFINED_TYPE_SCHEMA and USER_DEFINED_TYPE_NAME are defined on domain INFORMATION_SCHEMA.CHARACTER_DATA.\par
But everywhere else, such columns are defined on domain INFORMATION_SCHEMA.SQL_IDENTIFIER. We assume the intent is to be consistent here as well.\par
\par
## The NUMERIC_PRECISION_RADIX value for datetime / interval data types is unclear. The GetTypeInfo description of the ODBC 3.0 manual says:\par
"If the data type is an approximate numeric type, this column contains the\par
value 2 to indicate that COLUMN_SIZE specifies a number of bits. For exact\par
numeric types, this column contains the value 10 to indicate that COLUMN_SIZE\par
specifies a number of decimal digits. Otherwise, this column is NULL."\par
\par
The same section in the SQL/CLI document says:\par
"r) The value of NUM_PREC_RADIX is\par
     Case:\par
     i) If the value of PRECISION is the value of a precision, then the radix of that precision.\par
     ii) Otherwise, the null value."\par
\par
While the definition of the DEFINITION_SCHEMA.DATA_TYPE_DESCRIPTOR base table, where this information is stored has this constraint:\par
"    CHECK (\par
     ...\par
     DATA_TYPE IN ( 'DATE', 'TIME', 'TIMESTAMP',\par
                    'TIME WITH TIME ZONE', 'TIMESTAMP WITH TIME ZONE' )\par
     ...\par
     AND ( NUMERIC_PRECISION, NUMERIC_PRECISION_RADIX ) IS NOT NULL"\par
\par
From the above quotes, some disagreements are visible:\par
(a) The writers of ODBC thought datetime/interval radices are nullable.\par
(b) The SQL/CLI writers had no idea PRECISION is a nonexistent column but agree that radices can be nullable if a data type has no precision.\par
(c) The foundation writers thought datetime/interval radices couldn't be NULL.\par
\par
For GET_TYPE_INFO, we assume the first two quotes reflect the true intent: that NUMERIC_PRECISION_RADIX value for datetimes and intervals is NULL.\par
\par
## The definition of the INFORMATION_SCHEMA.ROLE_ROUTINE_GRANTS view contains:\par
   "SELECT\par
   ...\par
   ROUTINE_CATALOG, ROUTINE_SCHEMA, ROUTINE_NAME\par
   ...\par
   FROM ROUTINE_PRIVILEGES"\par
\par
But these three columns do not exist in the ROUTINE_PRIVILEGES table. We assume these columns should be omitted from the view.\par
\par
## The definition of the INFORMATION_SCHEMA.ROLE_USER_DEFINED_TYPE_GRANTS view contains:\par
   "SELECT\par
   ...\par
   OBJECT_TYPE\par
   ...\par
   FROM DEFINITION_SCHEMA.USER_DEFINED_TYPE_PRIVILEGES"\par
\par
But this column does not exist the in USER_DEFINED_TYPE_PRIVILEGES table. We assume this column should be omitted from the view.\par
\par
SQL/CLI\par
\par
## The "Description of CLI item descriptors" says that DEFERRED is true if the octet length pointer points to SQL NULL DATA.\par
\par
## For SQLGetTypeInfo, NULL values are returned for sql_prefix and sql_suffix -- i.e.: NULL is used to mean "blank string". In other fields it means N/A.\par
\par
## For SQLExecute and SQLExecute, the general rules are ordered in such a way\par
that input parameters will be checked for consistency AFTER execution. We\par
assume that checking should take place before execution. The embedded SQL document has parameter-checking in the logical place.\par
\par
## The SQLDisconnect function description contains a reference to an exception "active SQL-statement"; we assume this should read "active SQL-transaction".\par
\par
## The SQLGetData function description contains a reference to IP and DP, which do not exist.\par
\par
## The SQLSetDescField function description suggests that it is illegal to set the SQL_DESC_TYPE field to SQL_SMALLINT, SQL_INTEGER, SQL_REAL or SQL_DOUBLE_PRECISION (or several other legal data types). This is clearly an oversight.\par
\par
## The SQLSetDescField function description fails to state that the RecordNumber parameter should be ignored if FieldIdentifier is SQL_DESC_COUNT. We assume this is the case.\par
\par
## The SQLGetDescRec function description is ambiguous about the field to be used as the source for Length.\par
\par
## For SQLGetDiagField, the Standard says SQL_DIAG_MORE is associated with a return of 'Y' or 'N'. But SQL_DIAG_MORE is not defined as a string.\par
\par
## For SQLGetLength: exception "Invalid argument value" is undefined.\par
\par
## For SQLColumns: for a <fractional seconds precision>, the value is taken\par
from INFORMATION_SCHEMA.COLUMNS.NUMERIC_PRECISION. The value is actually in\par
INFORMATION_SCHEMA.COLUMNS.DATETIME_PRECISION and we assume this is the\par
intent. Also: the SQL_DATA_TYPE column has been forgotten; we assume it is\par
included. Also: for calculating SQL_DATETIME_SUB, the Standard says one is\par
supposed to use INFORMATION_SCHEMA.COLUMNS.DATA_TYPE to look up a 'Code' -- however, the information is actually in found in INFORMATION_SCHEMA.COLUMNS.INTERVAL_TYPE; we assume this is the intent.\par
\par
## There is an implicit assumption that CAST is possible between two character sets (otherwise, why bother having character set in the descriptor IDA?). But CAST is illegal if repertoires differ.\par
\page\par
INDEX\par
\par
- A -\par
\par
abandoned\par
ABS\par
ABSOLUTE\par
access mode\par
ACTION\par
ADA\par
ADD\par
add column definition\par
add domain constraint definition\par
add table constraint definition\par
ADMIN\par
AFTER trigger\par
ALL\par
ALTER\par
alter column action\par
alter column definition\par
ALTER DOMAIN\par
alter domain action\par
ALTER TABLE\par
alter table action\par
ambiguous cursor name\par
AND\par
ANY\par
applicable privileges\par
approximate numeric literal\par
approximate numeric type\par
ARE\par
ARRAY\par
array concatenate function\par
array data\par
array element\par
array locator\par
array type\par
array value constructor\par
array value expression\par
array value function\par
AS\par
as clause\par
ASC\par
ASENSITIVE\par
ASSERTION\par
assertion definition\par
asterisk\par
ASYMMETRIC\par
AT\par
ATOMIC\par
atomic SQL statement\par
attribute\par
attribute definition\par
attribute name\par
AUTHORIZATION\par
AuthorizationID\par
authorization identifier\par
AVG\par
\par
- B -\par
\par
base table\par
BEFORE trigger\par
BEGIN\par
BETWEEN\par
BINARY\par
binary large object\par
binary large object string type\par
binary string literal\par
binary string type\par
binding style\par
BIT\par
bit concatenation\par
bit factor\par
BIT_LENGTH\par
bit string literal\par
bit string type\par
bit substring function\par
BLOB\par
blob concatenation\par
blob overlay function\par
blob position expression\par
blob trim function\par
BOOLEAN\par
boolean literal\par
boolean test\par
boolean type\par
boolean value expression\par
BOTH\par
bracketed comment\par
BREADTH\par
BY\par
\par
- C -\par
\par
C\par
CALL\par
CARDINAL_NUMBER\par
CARDINALITY\par
cardinality expression\par
CASCADE\par
CASCADED\par
CASE\par
case abbreviation\par
case expression\par
CAST\par
cast to distinct\par
cast to distinct identifier\par
cast to source\par
cast to source identifier\par
CATALOG\par
CATALOG_NAME\par
CHAIN\par
CHAR\par
CHAR_LENGTH\par
char length expression\par
CHARACTER\par
CHARACTER_DATA\par
character enumeration\par
character large object\par
CHARACTER_LENGTH\par
character like predicate\par
character match value\par
CHARACTER_MAXIMUM_LENGTH\par
CHARACTER_OCTET_LENGTH\par
character pattern\par
character repertoire\par
character representation\par
character set\par
CHARACTER_SET_CATALOG\par
character set definition\par
CHARACTER_SET_NAME\par
CHARACTER_SET_SCHEMA\par
character set specification\par
CHARACTER_SETS\par
character string literal\par
character string type\par
character substring function\par
character translation\par
character type\par
character value expression\par
CHECK\par
CHECK_CLAUSE\par
CHECK_COLUMN_USAGE\par
check constraint\par
check constraint definition\par
CHECK_CONSTRAINTS\par
CHECK_OPTION\par
CHECK_TABLE_USAGE\par
CHECK_TIME\par
CHECKED\par
CLASS\par
CLASS_ORIGIN\par
CLOB\par
CLOSE\par
CLOSE CURSOR\par
cluster\par
COALESCE\par
COBOL\par
coercibility\par
Coercible\par
COLLATE\par
collate clause\par
collating sequence\par
COLLATION\par
COLLATION_CATALOG\par
COLLATION_DEFINITION\par
COLLATION_DICTIONARY\par
COLLATION_NAME\par
COLLATION_SCHEMA\par
COLLATION_TYPE\par
COLLATIONS\par
collection\par
collection expression\par
collection type\par
collection type constructor\par
collection value constructor\par
collection value expression\par
COLUMN\par
column constraint\par
COLUMN_DEFAULT\par
column definition\par
COLUMN_DOMAIN_USAGE\par
column list\par
COLUMN_NAME\par
column name list\par
column options\par
COLUMN_PRIVILEGES\par
column reference\par
column scope clause\par
COLUMNS\par
COMMAND_FUNCTION\par
COMMAND_FUNCTION_CODE\par
comment\par
COMMIT\par
COMMITTED\par
comp op\par
comparable\par
comparison predicate\par
compatible\par
COMPLETION\par
CONCATENATE\par
concatenated grouping\par
concatenation\par
concatenation operator\par
condition information\par
condition information item\par
condition information item name\par
CONDITION_NUMBER\par
conditions\par
conformance\par
conforming SQL-implementation\par
CONNECT\par
CONNECTION\par
connection exception\par
CONNECTION_NAME\par
connection user name\par
CONSTRAINT\par
CONSTRAINT_CATALOG\par
constraint characteristics\par
constraint check time\par
CONSTRAINT_COLUMN_USAGE\par
constraint mode\par
CONSTRAINT_NAME\par
constraint name definition\par
CONSTRAINT_SCHEMA\par
CONSTRAINT_TABLE_USAGE\par
CONSTRAINT_TYPE\par
CONSTRAINTS\par
containing SQL\par
containing SQL not permitted\par
CONTINUE\par
CONVERT\par
Coordinated Universal Time\par
correlation name\par
CORRESPONDING\par
corresponding join columns\par
COUNT\par
CREATE\par
created by\par
created local temporary table\par
CROSS\par
cross join\par
CUBE\par
CURRENT\par
CURRENT_DATE\par
current date value function\par
current local time value function\par
current local timestamp value function\par
CURRENT_PATH\par
CURRENT_ROLE\par
current SQL-connection\par
current SQL-session\par
CURRENT_TIME\par
current time value function\par
CURRENT_TIMESTAMP\par
current timestamp value function\par
CURRENT_USER\par
CURSOR\par
CURSOR_NAME\par
cursor sensitivity\par
cursor specification\par
CYCLE\par
cycle clause\par
cycle column\par
cycle mark column\par
cycle mark value\par
\par
- D -\par
\par
DATA_TYPE\par
DATA_TYPE_DESCRIPTOR\par
database\par
DATE\par
date literal\par
date string\par
date value\par
DATETIME_INTERVAL_CODE\par
DATETIME_INTERVAL_PRECISION\par
datetime literal\par
DATETIME_PRECISION\par
datetime type\par
datetime value\par
datetime value expression\par
datetime value function\par
DAY\par
day-time interval\par
day-time literal\par
days value\par
DEALLOCATE\par
DEC\par
DECIMAL\par
DECLARE\par
DECLARE CURSOR\par
declared local temporary table\par
DEFAULT\par
DEFAULT_CHARACTER_SET_CATALOG\par
DEFAULT_CHARACTER_SET_NAME\par
DEFAULT_CHARACTER_SET_SCHEMA\par
default clause\par
DEFAULT_COLLATE_CATALOG\par
DEFAULT_COLLATE_NAME\par
DEFAULT_COLLATE_SCHEMA\par
default collation\par
default option\par
default specification\par
default SQL-connection\par
default SQL-session\par
default time zone\par
DEFERRABLE\par
DEFERRED\par
DEFINITION_SCHEMA\par
degree\par
DELETE_RULE\par
DELETE\par
delete statement: positioned\par
delete statement: searched\par
delimited identifier\par
delimiter token\par
deprecated\par
DEPTH\par
DEREF\par
dereference operation\par
dereference operator\par
derived column\par
derived table\par
DESC\par
DESCRIBE\par
DESCRIPTOR\par
descriptor area\par
DETERMINISTIC\par
deterministic characteristic\par
DIAGNOSTICS\par
diagnostics area limit\par
diagnostics size\par
digit\par
direct invocation\par
direct SQL statement\par
direct subtable\par
direct supertable\par
DISCONNECT\par
DISPATCH\par
dispatch clause\par
DISTINCT\par
distinct predicate\par
division by zero\par
DML\par
does not possibly contain SQL\par
DOMAIN\par
DOMAIN_CATALOG\par
domain constraint\par
DOMAIN_DEFAULT\par
domain definition\par
domain descriptor\par
DOMAIN_NAME\par
DOMAIN_SCHEMA\par
DOMAINS\par
dormant SQL-connection\par
dormant SQL-session\par
DOUBLE\par
double quote\par
DROP\par
DROP ASSERTION\par
drop behavior\par
DROP CHARACTER SET\par
DROP COLLATION\par
drop column default clause\par
drop column definition\par
drop column scope clause\par
drop domain constraint definition\par
drop domain default clause\par
DROP DOMAIN\par
DROP ROLE\par
drop routine statement\par
DROP SCHEMA\par
drop table constraint definition\par
DROP TABLE\par
drop transform statment\par
DROP TRANSLATION\par
drop trigger statement\par
drop user-defined cast statement\par
drop user-defined ordering statement\par
DROP VIEW\par
duplicate\par
dyadic\par
DYNAMIC\par
DYNAMIC_FUNCTION\par
DYNAMIC_FUNCTION_CODE\par
\par
- E -\par
\par
EACH\par
element\par
element reference\par
element type\par
ELSE\par
else clause\par
embedded SQL host program\par
empty specification\par
ENABLED_APPLICABLE_ROLES\par
ENABLED_ROLE\par
ENABLED_ROLES\par
END\par
END-EXEC\par
environment\par
EQUAL_KEY_DEGREES\par
EQUALS\par
equals operator\par
equals ordering form\par
ESCAPE\par
escape character\par
escape octet\par
EVERY\par
exact numeric literal\par
exact numeric type\par
EXCEPT\par
EXCEPTION\par
EXEC\par
executable routine\par
EXECUTE\par
EXECUTE IMMEDIATE\par
execute privilege\par
EXISTING\par
existing collation name\par
existing translation name\par
EXISTS\par
exponent\par
EXTERNAL\par
external body reference\par
EXTERNAL_NAME\par
external routine\par
external routine authorization identifier\par
external routine invocation\par
external routine name\par
externally-invoked procedure\par
EXTRACT\par
extract expression\par
extract field\par
\par
- F -\par
\par
FALSE\par
FETCH\par
fetch orientation\par
fetch target list\par
field definition\par
field name\par
field reference\par
FINAL\par
finality\par
FIRST\par
FLOAT\par
fold\par
FOR\par
FOREIGN\par
FORM_OF_USE\par
form-of-use conversion\par
form-of-use conversion name\par
FORTRAN\par
FOUND\par
FREE\par
free locator statement\par
FROM\par
from clause\par
from sql function\par
FULL\par
full ordering form\par
FUNCTION\par
\par
- G -\par
\par
GENERAL\par
general literal\par
general value specification\par
GENERATED\par
GET\par
get diagnostics statement\par
GLOBAL\par
global or local\par
global temporary table\par
GO\par
GOTO\par
grand total\par
GRANT\par
GRANT ROLE\par
GRANTEE\par
GRANTOR\par
greater than operator\par
greater than or equals operator\par
GROUP\par
group by clause\par
group name\par
grouped table\par
grouped view\par
GROUPING\par
grouping column reference\par
grouping operation\par
grouping set\par
\par
- H -\par
\par
handle\par
HASH\par
hash function specification\par
HAVING\par
having clause\par
hex string literal\par
hexit\par
HOLD\par
hold locator statement\par
holdable-cursor\par
holdable-locator\par
HOST\par
host parameter\par
host parameter data type\par
host parameter declaration\par
host parameter name\par
HOUR\par
hours value\par
\par
- I -\par
\par
identifier\par
IDENTITY\par
IGNORE\par
IMMEDIATE\par
implementation-defined\par
implementation-defined character set name\par
implementation-dependent\par
IN\par
in predicate value\par
in value list\par
INDICATOR\par
indicator overflow\par
indicator parameter\par
INFORMATION_SCHEMA\par
inherited column\par
initial alphabetic character\par
INITIALIZE\par
INITIALLY\par
INITIALLY_DEFERRED\par
INNER\par
inner table\par
INOUT\par
INPUT\par
input parameter\par
input SQL parameter\par
INSENSITIVE\par
INSERT\par
insert column list\par
instance\par
INSTANTIABLE\par
instantiable clause\par
INT\par
INTEGER\par
integrity constraint\par
integrity constraint violation\par
interface\par
INTERSECT\par
INTERVAL\par
interval absolute value function\par
interval data type descriptor\par
interval fractional seconds precision\par
interval leading field precision\par
interval literal\par
INTERVAL_PRECISION\par
interval qualifier\par
INTERVAL_TYPE\par
interval value expression\par
INTO\par
introducer\par
invocable routine\par
IS\par
IS_DEFERRABLE\par
IS_DETERMINISTIC\par
IS_GRANTABLE\par
IS_NULLABLE\par
IS_UPDATABLE\par
ISOLATION\par
isolation level\par
ITERATE\par
\par
- J -\par
\par
JOIN\par
join columns\par
join condition\par
join type\par
joined table\par
\par
- K -\par
\par
KEY\par
KEY_COLUMN_USAGE\par
KEY_DEGREE_GREATER_THAN_OR_ EQUAL_TO_ KEY_MEMBER\par
KEY_TYPE\par
keyword\par
keyword parameter tag\par
known not nullable\par
\par
- L -\par
\par
LANGUAGE\par
language clause\par
large object length\par
LAST\par
LATERAL\par
lateral derived table\par
LEADING\par
LEFT\par
left bracket trigraph\par
LENGTH\par
length expression\par
LESS\par
less than operator\par
less than or equals operator\par
LEVEL\par
level of isolation\par
levels clause\par
LIKE\par
like clause\par
LIMIT\par
literal\par
LOCAL\par
local temporary table\par
LOCALTIME\par
LOCALTIMESTAMP\par
LOCATOR\par
LOW\par
LOWER\par
lower case\par
\par
- M -\par
\par
mantissa\par
MATCH\par
MATCH_OPTION\par
match type\par
matching rows\par
MAX\par
maximal supertype\par
maximum dynamic result sets\par
MESSAGE_LENGTH\par
MESSAGE_OCTET_LENGTH\par
MESSAGE_TEXT\par
METHOD\par
method invocation\par
method name\par
method reference\par
MIN\par
MINUTE\par
minutes value\par
MOD\par
MODIFIES\par
MODIFY\par
modifying SQL-data\par
modifying SQL-data not permitted\par
MODULE\par
module authorization identifier\par
MODULE_CATALOG\par
module character set specification\par
module contents\par
MODULE_NAME\par
module name clause\par
module path specification\par
MODULE_PRIVILEGES\par
MODULE_SCHEMA\par
module transform group specification\par
modulus expression\par
MONTH\par
months value\par
MORE\par
MUMPS\par
mutator function\par
mutually assignable\par
\par
- N -\par
\par
NAME\par
named columns join\par
named row type\par
NAMES\par
NATIONAL\par
national character string literal\par
national character string type\par
NATURAL\par
NCHAR\par
NCLOB\par
NEW\par
new values correlation name\par
new values table alias\par
newline\par
NEXT\par
NO\par
No collating sequence\par
non-deterministic\par
non-join query expression\par
non-reserved word\par
non-second primary datetime field\par
nondelimiter token\par
NONE\par
NOT\par
not deferrable\par
not equals operator\par
NULL\par
null-call clause\par
null specification\par
null value\par
null value eliminated in set function\par
null value not allowed\par
nullability characteristic\par
NULLABLE\par
NULLIF\par
NUMBER\par
NUMBER_OF_CHARACTERS\par
number of conditions\par
NUMERIC\par
numeric data type descriptor\par
NUMERIC_PRECISION\par
NUMERIC_PRECISION_RADIX\par
NUMERIC_SCALE\par
numeric type\par
numeric value expression\par
numeric value expression dividend\par
numeric value expression divisor\par
numeric value function\par
\par
- O -\par
\par
OBJECT\par
OBJECT_CATALOG\par
OBJECT_NAME\par
object privileges\par
OBJECT_SCHEMA\par
OBJECT_TYPE\par
observer function\par
octet\par
OCTET_LENGTH\par
octet length expression\par
octet like predicate\par
octet match value\par
octet pattern\par
OF\par
OFF\par
OLD\par
old or new values alias\par
old or new values alias list\par
old values correlation name\par
old values table alias\par
ON\par
ONLY\par
OPEN\par
OPERATION\par
operator\par
OPTION\par
OPTIONS\par
OR\par
ORDER\par
order by clause\par
order of execution\par
ordering category\par
ORDINAL_POSITION\par
ORDINALITY\par
OUT\par
OUTER\par
outer join type\par
OUTPUT\par
output parameter\par
output SQL parameter\par
OVERLAPS\par
OVERLAY\par
OVERRIDING\par
overriding method signature\par
owned by\par
\par
- P -\par
\par
PAD\par
pad characteristic\par
PARAMETER\par
PARAMETER_MODE\par
PARAMETER_NAME\par
PARAMETER_ORDINAL_POSITION\par
parameter passing style\par
PARAMETER_SPECIFIC_CATALOG\par
PARAMETER_SPECIFIC_NAME\par
PARAMETER_SPECIFIC_SCHEMA\par
parameter style\par
parameter type\par
PARAMETERS\par
Part 1\par
Part 2\par
Part 3\par
Part 4\par
Part 5\par
PARTIAL\par
PASCAL\par
PATH\par
path specification\par
persistent\par
persistent base table\par
PLACING\par
PLI\par
POSITION\par
position expression\par
possible qualifiers\par
possibly contains SQL\par
possibly modifies SQL-data\par
possibly non-deterministic\par
possibly nullable\par
possibly read SQL-data\par
PRECISION\par
predefined type\par
predicate\par
PREFIX\par
PREORDER\par
preparable statement\par
PREPARE\par
PRESERVE\par
PRIMARY\par
primary datetime field\par
primary key\par
primary key constraint\par
PRIOR\par
privilege\par
privilege column list\par
privilege descriptor\par
PRIVILEGE_DESCRIPTORS\par
PRIVILEGE_TYPE\par
PRIVILEGES\par
PROCEDURE\par
procedure name\par
PUBLIC\par
\par
- Q -\par
\par
qualified identifier\par
quantified comparison predicate\par
quantified predicate\par
quantifier\par
query\par
query expression\par
query expression body\par
query name\par
query specification\par
\par
- R -\par
\par
READ\par
READ ONLY\par
READ WRITE\par
reading SQL-data\par
reading SQL-data not permitted\par
READS\par
REAL\par
RECURSIVE\par
redundant duplicate\par
REF\par
reference column list\par
reference resolution\par
reference scope check\par
reference type\par
reference value expression\par
referenced columns\par
referenced table\par
referenced table and columns\par
referenced type\par
REFERENCES\par
references specification\par
REFERENCING\par
referencing columns\par
referencing table\par
referential action\par
referential constraint\par
REFERENTIAL_CONSTRAINTS\par
regular expression\par
regular expression substring function\par
regular identifier\par
RELATIVE\par
relative category\par
release savepoint statement\par
REPEATABLE\par
repertoire\par
representation\par
reserved word\par
RESTRICT\par
RESULT\par
result cast\par
result parameter\par
RESULT SETS\par
retrieval assignment\par
RETURN\par
return value\par
RETURNED_LENGTH\par
RETURNED_OCTET_LENGTH\par
RETURNED_SQLSTATE\par
RETURNS\par
returns clause\par
returns data type\par
REVOKE\par
REVOKE ROLE\par
RIGHT\par
right bracket trigraph\par
ROLE\par
role authorization\par
ROLE_AUTHORIZATION_DESCRIPTORS\par
ROLE_COLUMN_GRANTS\par
role definition\par
role granted\par
ROLE_NAME\par
role specification\par
ROLE_TABLE_GRANTS\par
ROLES\par
ROLLBACK\par
ROLLUP\par
ROUTINE\par
routine authorization identifier\par
ROUTINE_BODY\par
ROUTINE_CATALOG\par
routine characteristics\par
ROUTINE_DEFINITION\par
routine invocation\par
ROUTINE_NAME\par
ROUTINE_SCHEMA\par
routine SQL-path\par
ROUTINE_TYPE\par
ROUTINES\par
ROW\par
ROW_COUNT\par
row reference\par
row subquery\par
row type\par
row value constructor\par
row value expression\par
ROWS\par
\par
- S -\par
\par
SAVEPOINT\par
savepoint clause\par
savepoint name\par
scalar subquery\par
SCALE\par
SCHEMA\par
schema authorization identifier\par
schema character set specification\par
schema definition\par
schema element\par
schema-level routine\par
SCHEMA_NAME\par
schema name clause\par
schema name list\par
SCHEMA_OWNER\par
schema path specification\par
schema procedure\par
schema qualified name\par
schema routine\par
SCHEMATA\par
scope\par
scope clause\par
scope table name list\par
SCROLL\par
SEARCH\par
search condition\par
search or cycle clause\par
searched case\par
searched when clause\par
SECOND\par
seconds fraction\par
seconds integer value\par
seconds value\par
SECTION\par
SELECT\par
select list\par
select statement: single row\par
SELF\par
SENSITIVE\par
sensitivity\par
separator\par
SEQUENCE\par
SERIALIZABLE\par
SERVER_NAME\par
SESSION\par
session characteristic\par
SESSION_USER\par
SET\par
set clause\par
set column default clause\par
set connection statement\par
set constraints mode statement\par
set domain default clause\par
set function\par
set local time zone statement\par
set of affected rows\par
set quantifier\par
set role statement\par
set session characteristics statement\par
set session user identifier statement\par
set time zone value\par
set transaction statement\par
SETS\par
signature\par
significant\par
SIMILAR\par
similar pattern\par
SIMPLE\par
simple case\par
simple comment\par
simple Latin letter\par
simple Latin lower case letter\par
simple Latin upper case letter\par
simple target specification\par
simple value specification\par
single datetime field\par
site\par
site scope\par
SIZE\par
SMALLINT\par
SOME\par
sort key\par
sort specification\par
SOURCE\par
SOURCE_CHARACTER_SET_ CATALOG\par
SOURCE_CHARACTER_SET_NAME\par
SOURCE_CHARACTER_SET_SCHEMA\par
source character set specification\par
source data type\par
source type\par
SPACE\par
SPECIFIC\par
SPECIFIC_CATALOG\par
SPECIFIC_NAME\par
specific routine designator\par
SPECIFIC_SCHEMA\par
specific type function\par
SPECIFICTYPE\par
SQL\par
SQL-agent\par
SQL_CHAR\par
SQL-client\par
SQL-client module\par
SQL-client module name\par
SQL-connection\par
SQL connection statement\par
SQL control statement\par
SQL-data\par
SQL-data access indication\par
SQL data change statement\par
SQL data statement\par
SQL diagnostics information\par
SQL diagnostics statement\par
SQL-environment\par
SQL executable statement\par
SQL_IDENTIFIER\par
SQL-implementation\par
SQL-invoked function\par
SQL-invoked procedure\par
SQL-invoked routine\par
SQL language character\par
SQL_LANGUAGE_CONFORMANCE\par
SQL language identifier\par
SQL_LANGUAGE_IMPLEMENTATION\par
SQL_LANGUAGE_INTEGRITY\par
SQL_LANGUAGE_SOURCE\par
SQL_LANGUAGE_YEAR\par
SQL_LANGUAGES\par
SQL parameter\par
SQL parameter name\par
SQL parameter reference\par
SQL-path\par
SQL procedure statement\par
SQL routine\par
SQL-schema\par
SQL schema definition statement\par
SQL schema statement\par
SQL-server\par
SQL-server module\par
SQL-server name\par
SQL-session\par
SQL-session module\par
SQL session statement\par
SQL special character\par
SQL_TEXT\par
SQL-transaction\par
SQL transaction statement\par
SQLEXCEPTION\par
SQLSTATE\par
SQLWARNING\par
standard character set name\par
START\par
start field\par
start position\par
start transaction statement\par
STATE\par
state category\par
state change\par
status parameter\par
store assignment\par
string length\par
string position expression\par
string value expression\par
STRUCTURE\par
STYLE\par
SUBCLASS_ORIGIN\par
SUBLIST\par
subquery\par
SUBSTRING\par
subtable\par
subtable family\par
subtype\par
subtype family\par
SUM\par
supertable\par
supertype\par
SYMMETRIC\par
synchronous\par
SYSTEM\par
system-generated specification\par
SYSTEM_USER\par
\par
- T -\par
\par
TABLE\par
TABLE_CATALOG\par
table constraint\par
table constraint descriptor\par
TABLE_CONSTRAINTS\par
table contents source\par
table definition\par
table descriptor\par
table element\par
table element list\par
table expression\par
TABLE_NAME\par
table or query name\par
TABLE_PRIVILEGES\par
table reference\par
TABLE_SCHEMA\par
table scope\par
table subquery\par
TABLE_TYPE\par
table value constructor\par
TABLES\par
target\par
TARGET_CHARACTER_SET_CATALOG\par
TARGET_CHARACTER_SET_NAME\par
TARGET_CHARACTER_SET_SCHEMA\par
target character set specification\par
target data type\par
target specification\par
TEMPORARY\par
temporary table\par
temporary table declaration\par
TERMINATE\par
THAN\par
THE\par
THEN\par
TIME\par
time fractional seconds precision\par
time interval\par
time literal\par
time precision\par
time value\par
time zone\par
time zone field\par
time zone interval\par
time zone specifier\par
TIMESTAMP\par
timestamp literal\par
timestamp precision\par
timestamp string\par
TIMEZONE_HOUR\par
TIMEZONE_MINUTE\par
TO\par
to sql function\par
token\par
TRAILING\par
TRANSACTION\par
transaction access mode\par
TRANSACTION_ACTIVE\par
transaction characteristics\par
transaction-initiating\par
transaction mode\par
transaction rollback\par
TRANSACTIONS_COMMITTED\par
TRANSACTIONS_ROLLED_BACK\par
TRANSFORM\par
transform definition\par
transform group\par
transforms to be dropped\par
transient\par
TRANSLATE\par
TRANSLATION\par
TRANSLATION_CATALOG\par
TRANSLATION_DEFINITION\par
translation descriptor\par
TRANSLATION_NAME\par
translation routine\par
TRANSLATION_SCHEMA\par
translation source\par
TRANSLATIONS\par
TREAT\par
TRIGGER\par
trigger action time\par
TRIGGER_CATALOG\par
trigger column list\par
trigger definition\par
trigger descriptor\par
trigger event\par
TRIGGER_NAME\par
TRIGGER_SCHEMA\par
triggered action\par
triggered SQL statement\par
TRIM\par
trim character\par
trim function\par
trim octet\par
trim source\par
TRUE\par
TYPE\par
\par
- U -\par
\par
UDT\par
UDT specification\par
UNCOMMITTED\par
UNDER\par
underlying\par
UNION\par
union-compatible\par
UNIQUE\par
unique column list\par
unique constraint\par
UNIQUE_CONSTRAINT_NAME\par
unique matching rows\par
unique specification\par
UNKNOWN\par
UNNAMED\par
unqualified schema name\par
updatability clause\par
updatable\par
updatable table\par
UPDATE\par
update operation\par
UPDATE_RULE\par
update statement: positioned\par
update statement: searched\par
update target\par
UPPER\par
USAGE\par
USAGE_PRIVILEGES\par
USER\par
user-defined cast definition\par
user-defined character set name\par
user-defined ordering definion\par
user-defined type\par
USER_DEFINED_TYPE_CATALOG\par
user-defined type definition\par
USER_DEFINED_TYPE_EQUALS\par
USER_DEFINED_TYPE_NAME\par
USER_DEFINED_TYPE_PRIVILEGES\par
USER_DEFINED_TYPE_SCHEMA\par
USER_DEFINED_TYPES\par
user identifier\par
USER_NAME\par
USERS\par
USING\par
UTC\par
\par
- V -\par
\par
VALUE\par
value expression\par
value specification\par
VALUES\par
VARCHAR\par
VARIABLE\par
variable-length coding\par
VARYING\par
VIEW\par
VIEW_CATALOG\par
view column list\par
VIEW_COLUMN_USAGE\par
VIEW_DEFINITION\par
view descriptor\par
VIEW_NAME\par
VIEW_SCHEMA\par
VIEW_TABLE_USAGE\par
viewed table\par
VIEWS\par
\par
- W -\par
\par
warning\par
WHEN\par
when operand\par
WHENEVER\par
WHERE\par
where clause\par
white space\par
WITH\par
WITH CHECK OPTION\par
with check option violation\par
with clause\par
with column list\par
WITH GRANT OPTION\par
with or without time zone\par
WITHOUT\par
WORK\par
WRITE\par
\par
- Y -\par
\par
YEAR\par
year-month interval\par
year-month literal\par
years value\par
YES\par
\par
- Z -\par
\par
ZONE\par
}
 